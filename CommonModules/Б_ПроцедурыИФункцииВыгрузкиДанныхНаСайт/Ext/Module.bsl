
Процедура ПодготовитьДанныеДереваГруппРекурсивно(ТаблицаТоваровДереваГрупп, ДеревоГрупп, ТаблицаГруппНоменклатурыДереваГрупп)
	 
	 Для Каждого СтрокаДерева Из ДеревоГрупп Цикл
		
		Для Каждого НоменклатураЭлемент Из СтрокаДерева.Номенклатура Цикл
			
			НоменклатураСсылка = НоменклатураЭлемент.Значение;
			
			Если НЕ ЗначениеЗаполнено(НоменклатураСсылка) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Если НоменклатураСсылка.ЭтоГруппа Тогда
				
				НовСтрока = ТаблицаГруппНоменклатурыДереваГрупп.Добавить();
				НовСтрока.ИдГруппы 		= СтрокаДерева.ИдГруппы;
				НовСтрока.Номенклатура 	= НоменклатураСсылка;
				
			КонецЕсли;
			
			НовСтрока = ТаблицаТоваровДереваГрупп.Добавить();
			НовСтрока.ИдГруппы 		= СтрокаДерева.ИдГруппы;
			НовСтрока.Номенклатура 	= НоменклатураСсылка;
	
		КонецЦикла;
		
		ПодготовитьДанныеДереваГруппРекурсивно(ТаблицаТоваровДереваГрупп, СтрокаДерева.Строки, ТаблицаГруппНоменклатурыДереваГрупп);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ФормированиеФайловXMLОбменаДанных(ПараметрыОбмена, Операция, ЭтоДозагрузка = Ложь) Экспорт
	
	Если Операция = "ОбщаяИнформация" тогда
		
		Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Выгрузка пакетов общей информации в в XML.", ПараметрыОбмена);
		
		СтрокаКаталога = 0;
		
		Для Каждого СтрокаТаблицыКаталогов Из ПараметрыОбмена.ТаблицаКаталогов Цикл
			
			Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Выгрузка пакета общей информации каталога: " + СтрокаТаблицыКаталогов.Каталог, ПараметрыОбмена, Истина);
			МассивДанных = ПолучитьДанныеИзРегистраПакетов(ПараметрыОбмена, СтрокаТаблицыКаталогов.ИдКаталога); 
			ВыгрузитьОбщуюИнформацию(ПараметрыОбмена, МассивДанных, Операция, СтрокаТаблицыКаталогов, СтрокаКаталога);
			СтрокаКаталога = СтрокаКаталога + 1;	
			Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Выгрузка пакета общей информации каталога: " + СтрокаТаблицыКаталогов.Каталог + " завершена.", ПараметрыОбмена, Истина);
			
		КонецЦикла;	
		
		Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Выгрузка пакетов общей информации в XML завершена.", ПараметрыОбмена);
		
	ИначеЕсли Операция = "Свойства" тогда
		
		Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Выгрузка пакетов свойств в XML.", ПараметрыОбмена);
		
		СтрокаКаталога = 0;
		
		Для Каждого СтрокаТаблицыКаталогов Из ПараметрыОбмена.ТаблицаКаталогов Цикл
			
			Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Выгрузка пакета свойства каталога: " + СтрокаТаблицыКаталогов.Каталог, ПараметрыОбмена, Истина);
			МассивДанных = ПолучитьДанныеИзРегистраПакетов(ПараметрыОбмена, СтрокаТаблицыКаталогов.ИдКаталога); 
			ВыгрузитьИнформациюОСвойствах(ПараметрыОбмена, МассивДанных, Операция, СтрокаТаблицыКаталогов, СтрокаКаталога);
			СтрокаКаталога = СтрокаКаталога + 1;	
			Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Выгрузка пакета свойства каталога: " + СтрокаТаблицыКаталогов.Каталог + " завершена.", ПараметрыОбмена, Истина);
			
		КонецЦикла;	
		
		Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Выгрузка пакетов свойств в XML завершена.", ПараметрыОбмена);
		
	ИначеЕсли Операция = "Товары" тогда
		
		Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Выгрузка пакетов товаров в в XML.", ПараметрыОбмена);
		
		СтрокаКаталога = 0;
		
		Для Каждого СтрокаТаблицыКаталогов Из ПараметрыОбмена.ТаблицаКаталогов Цикл
			
			Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Выгрузка пакетов каталога: " + СтрокаТаблицыКаталогов.Каталог, ПараметрыОбмена, Истина);
			МассивДанных = ПолучитьДанныеИзРегистраПакетов(ПараметрыОбмена, СтрокаТаблицыКаталогов.ИдКаталога); 
			ВыгрузитьИнформациюОТоварах(ПараметрыОбмена, МассивДанных, Операция, СтрокаТаблицыКаталогов, СтрокаКаталога);
			СтрокаКаталога = СтрокаКаталога + 1;	
			Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Выгрузка пакетов каталога: " + СтрокаТаблицыКаталогов.Каталог + " завершена.", ПараметрыОбмена, Истина);
			
		КонецЦикла;	
		
		Если НЕ ПараметрыОбмена.ВыгружатьТолькоИзменения И ПараметрыОбмена.ВыгружатьНаСайт тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	Б_ПакетныйОбмен.Объект,
			|	Б_ПакетныйОбмен.Каталог,
			|	Б_ПакетныйОбмен.Пакет
			|ИЗ
			|	РегистрСведений.Б_ПакетныйОбмен КАК Б_ПакетныйОбмен
			|ГДЕ
			|	Б_ПакетныйОбмен.НастройкаОбмена = &ПараметрыОбмена
			|	И Б_ПакетныйОбмен.Каталог В(&МассивКаталогов)";
			Запрос.УстановитьПараметр("ПараметрыОбмена",ПараметрыОбмена.Ссылка);
			Запрос.УстановитьПараметр("МассивКаталогов",ПараметрыОбмена.ТаблицаКаталогов.ВыгрузитьКолонку("ИдКаталога"));
			
			ТзнВрем = запрос.Выполнить().Выгрузить();
			
			Если ТзнВрем.Количество() = 0 тогда
				
				Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Деактивация элементов, не попавшие в полную пакетную выгрузку.", ПараметрыОбмена, Истина);   
				Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ВыгрузитьДанныеОДективацииНаСайт(ПараметрыОбмена, "catalog");
				
			КонецЕсли;
			
       	КонецЕсли;
		
		Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Выгрузка пакетов товаров в XML завершена.", ПараметрыОбмена);
		
	ИначеЕсли Операция = "Скидки" тогда
		
		Если ПараметрыОбмена.ВыгрузкаСкидок ИЛИ ПараметрыОбмена.ВыгрузкаВидовКартЛояльности тогда
			Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Выгрузка пакетов скидок в XML.", ПараметрыОбмена);
			МассивДанных = ПолучитьДанныеИзРегистраПакетов(ПараметрыОбмена, "Скидки");
			ВыгрузитьИнформациюОСкидках(ПараметрыОбмена,МассивДанных, Операция);
			Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Выгрузка пакетов пользовательских справочников в XML завершена.", ПараметрыОбмена);
		КонецЕсли;
		
	ИначеЕсли Операция = "КартыЛояльности" тогда
		
		Если ПараметрыОбмена.ВыгрузкаКартЛояльности тогда
			Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Выгрузка пакетов карт лояльности в XML.", ПараметрыОбмена);
			МассивДанных = ПолучитьДанныеИзРегистраПакетов(ПараметрыОбмена, "КартыЛояльности");
			ВыгрузитьИнформациюОКартахЛояльности(ПараметрыОбмена,МассивДанных, Операция);
			Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Выгрузка пакетов карт лояльности в XML завершена.", ПараметрыОбмена);
		КонецЕсли;
		
	ИначеЕсли Операция = "ПользовательскиеСправочники" тогда
		
		Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Выгрузка пакетов пользовательских справочников в XML.", ПараметрыОбмена);
		МассивДанных = ПолучитьДанныеИзРегистраПакетов(ПараметрыОбмена, "ПользовательскиеСправочники");
		ВыгрузитьПользовательскиеСправочникиXDTO(ПараметрыОбмена,МассивДанных, Операция);
		Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Выгрузка пакетов пользовательских справочников в XML завершена.", ПараметрыОбмена);
		
	ИначеЕсли Операция = "Контрагенты" тогда
		
		Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Выгрузка пакетов контрагентов в XML.", ПараметрыОбмена);
		
		МассивДанных = ПолучитьДанныеИзРегистраПакетов(ПараметрыОбмена, "Контрагенты");
		
		ВыгрузитьКонтрагентов(ПараметрыОбмена,МассивДанных, Операция);
		Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Выгрузка пакетов контрагентов в XML завершена.", ПараметрыОбмена);
		
	ИначеЕсли Операция = "Заказы" тогда
		
		Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Выгрузка пакетов заказов в XML.", ПараметрыОбмена);
		МассивДанных = ПолучитьДанныеИзРегистраПакетов(ПараметрыОбмена, "Заказы");
		ВыгрузитьДокументы(ПараметрыОбмена,МассивДанных, Операция);
		Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Выгрузка пакетов заказов в XML завершена.", ПараметрыОбмена);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДанныеИзРегистраПакетов(ПараметрыОбмена, Каталог)
	
	Запрос = Новый Запрос;    	
	Запрос.Текст = "ВЫБРАТЬ
	|	Б_ПакетныйОбмен.Объект,
	|	Б_ПакетныйОбмен.Пакет КАК Пакет,
	|	Б_ПакетныйОбмен.ТипОбъекта,
	|	Б_ПакетныйОбмен.ПользовательскийСправочник,
	|	Б_ПакетныйОбмен.Статус
	|ИЗ
	|	РегистрСведений.Б_ПакетныйОбмен КАК Б_ПакетныйОбмен
	|ГДЕ
	|	Б_ПакетныйОбмен.НастройкаОбмена = &НастройкаОбмена
	|	И Б_ПакетныйОбмен.Каталог = &Каталог
	|
	|УПОРЯДОЧИТЬ ПО
	|	Пакет";
	Запрос.УстановитьПараметр("НастройкаОбмена", ПараметрыОбмена.Ссылка);
	Запрос.УстановитьПараметр("Каталог", Каталог);
	МассивДанных = Запрос.Выполнить().Выгрузить();
	
	Возврат МассивДанных; 	
	
КонецФункции

Функция РазборМассиваДанныхПоТипамОбъектов(МассивДанных)
	
	Результат 		= Новый Структура;
	
	СпкНоменклатура = Новый СписокЗначений;
	СпкСклады 		= Новый СписокЗначений;
	СпкТипыЦен 		= Новый СписокЗначений;
	СпкСвойства 	= Новый СписокЗначений;
	СпкСвойства 	= Новый СписокЗначений;
	СпкЕдиницы 		= Новый СписокЗначений;
	СпкСкидки 			= Новый СписокЗначений;
	СпкВидыДК 			= Новый СписокЗначений;
	СпкКартыЛояльности	= Новый СписокЗначений;
	
	Для каждого ТекСтр Из МассивДанных Цикл
		Если ТекСтр.ТипОбъекта = "Номенклатура" тогда
			СпкНоменклатура.Добавить(ТекСтр.Объект);	
		ИначеЕсли ТекСтр.ТипОбъекта = "Склад" тогда
			СпкСклады.Добавить(ТекСтр.Объект);	
		ИначеЕсли ТекСтр.ТипОбъекта = "ТипЦены" тогда
			СпкТипыЦен.Добавить(ТекСтр.Объект);	
		ИначеЕсли ТекСтр.ТипОбъекта = "Свойство" тогда
			СпкСвойства.Добавить(ТекСтр.Объект);
		ИначеЕсли ТекСтр.ТипОбъекта = "ЕдиницаИзмерения" тогда
			СпкЕдиницы.Добавить(ТекСтр.Объект);	
		ИначеЕсли ТекСтр.ТипОбъекта = "ВидДисконтнойКарты" тогда
			СпкВидыДК.Добавить(ТекСтр.Объект);	
		ИначеЕсли ТекСтр.ТипОбъекта = "Скидка" тогда
			СпкСкидки.Добавить(ТекСтр.Объект);	
		ИначеЕсли ТекСтр.ТипОбъекта = "ДисконтнаяКарта" тогда
			СпкКартыЛояльности.Добавить(ТекСтр.Объект);	
		КонецЕсли;
	КонецЦикла;
	
	Результат.Вставить("Номенклатура", СпкНоменклатура);
	Результат.Вставить("Склады"		, СпкСклады);
	Результат.Вставить("ТипыЦен"	, СпкТипыЦен);
	Результат.Вставить("Свойства"	, СпкСвойства);
	Результат.Вставить("Единицы"	, СпкЕдиницы);
	Результат.Вставить("Скидки"			, СпкСкидки);
	Результат.Вставить("ВидыДК"			, СпкВидыДК);
	Результат.Вставить("КартыЛояльности", СпкКартыЛояльности);
	
	Возврат Результат;
КонецФункции


// Процедура - Удаляет регистрацию измений данных, если они успешно выгружены на сайт
//
// Параметры:
//  Успешно					 - 	 Признак успешности выгрузки данных на сайт 
//  ПараметрыОбмена			 - 	 Настройки узла обмена 
//  Пакет					 - 	 Номер пакета данных 
//  ИдентификаторКаталога	 - 	 Идентификатор каталога(инфоблока), куда были выгружены данные 
//  МассивСтрок				 - 	 Массив данных, для которых нужно удалить регистрацию изменений, если обмен успешен  
//  МассивКартинок			 - 	 Массив картинок, для которых нужно удалить регистрацию изменений, если обмен успешен 
//  МассивФайлов			 - 	 Массив файлов, для которых нужно удалить регистрацию изменений, если обмен успешен 
Процедура УдалениеПакетовИРегистраций(Успешно, ПараметрыОбмена, Операция, Пакет, ИдентификаторКаталога, МассивСтрок, МассивКартинок = Неопределено, МассивФайлов = Неопределено)
	
	Если Успешно ИЛИ НЕ ПараметрыОбмена.ВыгружатьНаСайт тогда
		НаборЗаписей = РегистрыСведений.Б_ПакетныйОбмен.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Пакет.Установить(Пакет);
		НаборЗаписей.Отбор.НастройкаОбмена.Установить(ПараметрыОбмена.Ссылка);
		НаборЗаписей.Отбор.Каталог.Установить(ИдентификаторКаталога);
		НаборЗаписей.Отбор.Операция.Установить(Операция);
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать(Истина);
	КонецЕсли;
	
	Если Успешно  тогда
		
		Для Каждого Данные Из МассивСтрок Цикл
			
			ПланыОбмена.УдалитьРегистрациюИзменений(ПараметрыОбмена.Ссылка, Данные.Объект);
		
		КонецЦикла; 
		
		Если МассивКартинок <> неопределено тогда
			Для Каждого Данные Из МассивКартинок Цикл
				ПланыОбмена.УдалитьРегистрациюИзменений(ПараметрыОбмена.Ссылка, Данные);
			КонецЦикла;
		КонецЕсли;                    		
		МассивКартинок = Неопределено;
		
		Если МассивФайлов <> неопределено тогда
			Для Каждого Данные Из МассивФайлов Цикл
				ПланыОбмена.УдалитьРегистрациюИзменений(ПараметрыОбмена.Ссылка, Данные);
			КонецЦикла;
		КонецЕсли;
		МассивФайлов = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - Удаляет регистрацию измений данных общей информации, если она успешно выгружены на сайт
//
// Параметры:
//  Успешно					 - 	 Признак успешности выгрузки данных на сайт 
//  ПараметрыОбмена			 - 	 Настройки узла обмена 
//  Пакет					 - 	 Номер пакета данных 
//  ИдентификаторКаталога	 - 	 Идентификатор каталога(инфоблока), куда были выгружены данные 
//  МассивСтрок				 - 	 Массив данных, для которых нужно удалить регистрацию изменений, если обмен успешен  
Процедура УдалениеПакетовИРегистрацийОбщейИнформации(Успешно, ПараметрыОбмена, Операция, Пакет, ИдентификаторКаталога, МассивСтрок)
	
	Если Успешно ИЛИ НЕ ПараметрыОбмена.ВыгружатьНаСайт тогда
		НаборЗаписей = РегистрыСведений.Б_ПакетныйОбмен.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Пакет.Установить(Пакет);
		НаборЗаписей.Отбор.НастройкаОбмена.Установить(ПараметрыОбмена.Ссылка);
		НаборЗаписей.Отбор.Каталог.Установить(ИдентификаторКаталога);
		НаборЗаписей.Отбор.Операция.Установить(Операция);
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать(Истина);
	КонецЕсли;
	
	Если Успешно  тогда
		
		Для Каждого Данные Из МассивСтрок Цикл
			
			Если Данные.ТипОбъекта <> "ТоварДляГруппы" тогда
				ПланыОбмена.УдалитьРегистрациюИзменений(ПараметрыОбмена.Ссылка, Данные.Объект);
			КонецЕсли;
		
		КонецЦикла; 
		
	КонецЕсли;
	
КонецПроцедуры


Процедура ДобавлениеТоваровВРегистрПакетов(ПостроительЗапроса, ПараметрыОбмена, СтрокаТаблицыКаталогов, Операция, КоличествоПакетов)
	
	Если  Операция <> "Свойства" тогда
		
		ИмяОтбораПоДеревуГрупп 	= "ОтборПоДеревуГрупп";
		ОтборПоКаталогу 		= "ОтборПоКаталогу";
		
		Пока Истина Цикл
			ЭлементОтбора = ПостроительЗапроса.Отбор.Найти(ИмяОтбораПоДеревуГрупп);
			Если ЭлементОтбора = НеОпределено Тогда
				Прервать;
			Иначе
				ПостроительЗапроса.Отбор.Удалить(ПостроительЗапроса.Отбор.Индекс(ЭлементОтбора));
			КонецЕсли;
		КонецЦикла;
		
		Пока Истина Цикл
			ЭлементОтбора = ПостроительЗапроса.Отбор.Найти(ОтборПоКаталогу);
			Если ЭлементОтбора = НеОпределено Тогда
				Прервать;
			Иначе
				ПостроительЗапроса.Отбор.Удалить(ПостроительЗапроса.Отбор.Индекс(ЭлементОтбора));
			КонецЕсли;
		КонецЦикла;
		
		мДеревоГрупп = СтрокаТаблицыКаталогов.ДеревоГрупп;
		мСписокГруппКаталога = СтрокаТаблицыКаталогов.Группы;
		
		мКлассифицироватьПоДеревуГрупп = НЕ мДеревоГрупп.Строки.Количество() = 0;
		
		Если мКлассифицироватьПоДеревуГрупп Тогда
			
			СписокНоменклатурыДереваГрупп  = Новый СписокЗначений;
			
			//для оптимизации используем таблицы значений, т.к. их можно свернуть.
			ТаблицаТоваровДереваГрупп = Новый ТаблицаЗначений;
			ТаблицаТоваровДереваГрупп.Колонки.Добавить("ИдГруппы");
			ТаблицаТоваровДереваГрупп.Колонки.Добавить("Номенклатура");
			ТаблицаТоваровДереваГрупп.Индексы.Добавить("Номенклатура");
			
			ТаблицаГруппНоменклатурыДереваГрупп = Новый ТаблицаЗначений;
			ТаблицаГруппНоменклатурыДереваГрупп.Колонки.Добавить("ИдГруппы");
			ТаблицаГруппНоменклатурыДереваГрупп.Колонки.Добавить("Номенклатура");
			
			ПодготовитьДанныеДереваГруппРекурсивно(ТаблицаТоваровДереваГрупп, мДеревоГрупп.Строки, ТаблицаГруппНоменклатурыДереваГрупп);
			
			ТаблицаТоваровДереваГрупп.Свернуть("Номенклатура");
			ТаблицаГруппНоменклатурыДереваГрупп.Свернуть("Номенклатура");
			МассивНоменклатурыДереваГрупп = ТаблицаТоваровДереваГрупп.ВыгрузитьКолонку("Номенклатура");
			СписокНоменклатурыДереваГрупп.ЗагрузитьЗначения(МассивНоменклатурыДереваГрупп);
			
			Если СписокНоменклатурыДереваГрупп.Количество() > 0 Тогда
				
				НайденныйОтбор = ПостроительЗапроса.Отбор.Найти("Номенклатура");
				
				Если НайденныйОтбор <> Неопределено тогда   			
					НовыйОтбор = ПостроительЗапроса.Отбор.Добавить("Номенклатура", ИмяОтбораПоДеревуГрупп);
					НовыйОтбор.ВидСравнения = ВидСравнения.ВСпискеПоИерархии;
					НовыйОтбор.Значение = СписокНоменклатурыДереваГрупп;
					НовыйОтбор.Использование = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			Если ТипЗнч(мСписокГруппКаталога) = Тип("СписокЗначений") Тогда
				Если мСписокГруппКаталога.Количество() > 0 Тогда
					Если ПараметрыОбмена.КлассифицироватьПоЦеновымГруппам Тогда
						Отбор = ПостроительЗапроса.Отбор.Добавить("Номенклатура.ЦеноваяГруппа", ОтборПоКаталогу);
					Иначе
						Отбор = ПостроительЗапроса.Отбор.Добавить("Номенклатура", ОтборПоКаталогу);
					КонецЕсли;
					Отбор.ВидСравнения = ВидСравнения.ВСпискеПоИерархии;
					Отбор.Значение = мСписокГруппКаталога;
					Отбор.Использование = Истина;
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	//разбиваем на пакеты
	     
	ЗапросПостроителя = ПостроительЗапроса.ПолучитьЗапрос();
	ТаблицаОбъектовОбменаВыгрузки = ЗапросПостроителя.Выполнить().Выгрузить(); 
	
	ЗагрузкаТаблицыДанныхВРегистрПакетов(ТаблицаОбъектовОбменаВыгрузки, ПараметрыОбмена, СтрокаТаблицыКаталогов.ИдКаталога, КоличествоПакетов, Операция);	
	
КонецПроцедуры

Процедура ПодготовкаДанныхДереваГруппРекурсивно(ТаблицаТоваровДереваГрупп, ДеревоГрупп, ТаблицаГруппНоменклатурыДереваГрупп)
	 
	 Для Каждого СтрокаДерева Из ДеревоГрупп Цикл
		
		Для Каждого НоменклатураЭлемент Из СтрокаДерева.Номенклатура Цикл
			
			НоменклатураСсылка = НоменклатураЭлемент.Значение;
			
			Если НЕ ЗначениеЗаполнено(НоменклатураСсылка) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Если НоменклатураСсылка.ЭтоГруппа Тогда
				
				НовСтрока = ТаблицаГруппНоменклатурыДереваГрупп.Добавить();
				НовСтрока.ИдГруппы 		= СтрокаДерева.ИдГруппы;
				НовСтрока.Номенклатура 	= НоменклатураСсылка;
				
			КонецЕсли;
			
			НовСтрока = ТаблицаТоваровДереваГрупп.Добавить();
			НовСтрока.ИдГруппы 		= СтрокаДерева.ИдГруппы;
			НовСтрока.Номенклатура 	= НоменклатураСсылка;
	
		КонецЦикла;
		
		ПодготовкаДанныхДереваГруппРекурсивно(ТаблицаТоваровДереваГрупп, СтрокаДерева.Строки, ТаблицаГруппНоменклатурыДереваГрупп);
		
	КонецЦикла;
	
КонецПроцедуры

 Функция ЗаписьИОтправкаXMLДанныхНаСайт(ПараметрыОбмена, XDTOКоммерческаяИнформация, ИмяКаталога, ИмяФайла, МассивСтрок, Операция, Пакет)
	
	ИмяКаталога = Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьПутьДляПлатформы(ПараметрыОбмена.ПлатформаWindows, ИмяКаталога); 	
	Успешно = Ложь;
	
	Если НЕ Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СуществуетФайл(ИмяКаталога) тогда
		СоздатьКаталог(ИмяКаталога);	
	КонецЕсли;
	
	ПолноеИмяФайла = Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьПутьДляПлатформы(ПараметрыОбмена.ПлатформаWindows,ИмяКаталога +  "\" + ИмяФайла + "___" + Строка(Новый УникальныйИдентификатор) +  ".xml"); 
	
	МойXML = Новый ЗаписьXML;
	МойXML.ОткрытьФайл(ПолноеИмяФайла, "UTF-8");
	МойXML.ЗаписатьОбъявлениеXML();
	
	  //ИмяФайлаЛога
	//XDTOКоммерческаяИнформация.Проверить();
	
	ПараметрыОбмена.МояФабрикаXDTO.ЗаписатьXML(МойXML, XDTOКоммерческаяИнформация, "КоммерческаяИнформация"); 
	МойXML.Закрыть();
	
	Если ПараметрыОбмена.ХранитьФайлыОбменаНаСайте И ПараметрыОбмена.ВыгружатьНаСайт И ПараметрыОбмена.ВыгружатьЛогНаСайт Тогда
		
		КаталогХранения 		= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьПутьДляПлатформы(ПараметрыОбмена.ПлатформаWindows, ПараметрыОбмена.КаталогЛога + "\reports\" + СокрЛП(ПараметрыОбмена.Ссылка.Код) + "\" + ?(Пакет = 0, "", Строка(Пакет)));
		ПолноеИмяФайлаХранения 	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьПутьДляПлатформы(ПараметрыОбмена.ПлатформаWindows, КаталогХранения +  "\" + ИмяФайла +  ".xml"); 
		
		Если НЕ Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СуществуетФайл(КаталогХранения) тогда
			СоздатьКаталог(КаталогХранения);	
		КонецЕсли;

		КопироватьФайл(ПолноеИмяФайла, ПолноеИмяФайлаХранения);
		
	КонецЕсли;
	
	лПродолжатьПопытки 	= Истина;
	лЧислоПопыток		= 0;
	
	Если ПараметрыОбмена.ВыгружатьНаСайт тогда
		
		//Отправляем на сервер	
		
		Если Операция = "ВыгрузкаТоваров" тогда
			
			МассивПодкаталогов = Новый Массив;
			
			Если ПараметрыОбмена.ВыгружатьКартинкиИФайлы Тогда
				
				МассивПодкаталогов.Добавить(ПараметрыОбмена.ПодкаталогФайлов);
				
			КонецЕсли;
			
			Пока лПродолжатьПопытки цикл
				
				Если лЧислоПопыток > 0 И ПараметрыОбмена.ТаймаутМеждуПовторамиНеудачноОтправленныхПакетах тогда
					Б_ОбщиеПроцедурыИФункцииОбменаССайтом.Таймаут(ПараметрыОбмена.ТаймаутМеждуПовторамиНеудачноОтправленныхПакетах);
				КонецЕсли;
				
				Успешно = Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ВыгрузитьДанныеНаСайт(ПараметрыОбмена, ИмяКаталога, ПолноеИмяФайла, МассивПодкаталогов, Истина, "catalog");

				Если Успешно ИЛИ лЧислоПопыток = ПараметрыОбмена.ЧислоПовторовПриНеудачноОтправленныхПакетах тогда
					лПродолжатьПопытки = Ложь;
				КонецЕсли;
				
				лЧислоПопыток = лЧислоПопыток + 1;
				
			КонецЦикла;
				
		ИначеЕсли Операция = "ВыгрузкаКонтрагентов" тогда
			
			Пока лПродолжатьПопытки цикл
				
				Если лЧислоПопыток > 0 И ПараметрыОбмена.ТаймаутМеждуПовторамиНеудачноОтправленныхПакетах тогда
					Б_ОбщиеПроцедурыИФункцииОбменаССайтом.Таймаут(ПараметрыОбмена.ТаймаутМеждуПовторамиНеудачноОтправленныхПакетах);
				КонецЕсли;
				
				Успешно = Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ВыгрузитьДанныеНаСайт(ПараметрыОбмена, ИмяКаталога, ПолноеИмяФайла, МассивПодкаталогов, Истина, "sale");
				
				Если Успешно ИЛИ лЧислоПопыток = ПараметрыОбмена.ЧислоПовторовПриНеудачноОтправленныхПакетах тогда
					лПродолжатьПопытки = Ложь;
				КонецЕсли;
				
				лЧислоПопыток = лЧислоПопыток + 1;
				
			КонецЦикла;
			
		ИначеЕсли Операция = "ВыгрузкаДокументов" тогда
			
			Пока лПродолжатьПопытки цикл
				
				Если лЧислоПопыток > 0 И ПараметрыОбмена.ТаймаутМеждуПовторамиНеудачноОтправленныхПакетах тогда
					Б_ОбщиеПроцедурыИФункцииОбменаССайтом.Таймаут(ПараметрыОбмена.ТаймаутМеждуПовторамиНеудачноОтправленныхПакетах);
				КонецЕсли;
				
				Успешно = Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ВыгрузитьДанныеНаСайт(ПараметрыОбмена, ИмяКаталога, ПолноеИмяФайла, МассивПодкаталогов, Истина, "sale");
				
				Если Успешно ИЛИ лЧислоПопыток = ПараметрыОбмена.ЧислоПовторовПриНеудачноОтправленныхПакетах тогда
					лПродолжатьПопытки = Ложь;
				КонецЕсли;
				
				лЧислоПопыток = лЧислоПопыток + 1;
				
			КонецЦикла;
				
		ИначеЕсли Операция = "ВыгрузкаПользовательскихСправочников" тогда
			
			Пока лПродолжатьПопытки цикл
				
				Если лЧислоПопыток > 0 И ПараметрыОбмена.ТаймаутМеждуПовторамиНеудачноОтправленныхПакетах тогда
					Б_ОбщиеПроцедурыИФункцииОбменаССайтом.Таймаут(ПараметрыОбмена.ТаймаутМеждуПовторамиНеудачноОтправленныхПакетах);
				КонецЕсли;
				
				Успешно = Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ВыгрузитьДанныеНаСайт(ПараметрыОбмена, ИмяКаталога, ПолноеИмяФайла, МассивПодкаталогов, Истина, "reference");
				
				Если Успешно ИЛИ лЧислоПопыток = ПараметрыОбмена.ЧислоПовторовПриНеудачноОтправленныхПакетах тогда
					лПродолжатьПопытки = Ложь;
				КонецЕсли;
				
				лЧислоПопыток = лЧислоПопыток + 1;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Б_ОбщиеПроцедурыИФункцииОбменаССайтом.КаталогОчищен(ИмяКаталога, ПараметрыОбмена);	

	КонецЕсли;	
		
	Возврат Успешно;
	
КонецФункции



			///////////////////////////////////////////////////////////////////
			//			ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЙ ПАКЕТОВ            //
			/////////////////////////////////////////////////////////////////

			
// Процедура формирует пакеты данных, указанного типа
//
// Параметры:
//  ПараметрыОбмена	 - 	 Настройки узла обмена 
//  Операция		 - 	 Тип операции
Процедура ФормированиеПакетовДанных(ПараметрыОбмена, Операция) Экспорт
				
	//Группы товаров, склады, типы цен, ед. изм.	
	Если Операция = "ОбщаяИнформация" тогда
		
		Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Формирование пакета для общих данных для товаров.", ПараметрыОбмена);	
		
		мТаблицаКаталогов 		 = ПараметрыОбмена.СохраненнаяТаблицаКаталогов.Получить();
		мТаблицаОтборовКаталогов = ПараметрыОбмена.СохраненнаяТаблицаОтборовКаталогов.Получить();
		//перебираем каталоги обмена	
		Для Каждого СтрокаТаблицыКаталогов Из мТаблицаКаталогов Цикл
			
			ПостроительЗапроса = Новый ПостроительОтчета;
			НайденнаяСтрокаСОтбором = мТаблицаОтборовКаталогов.Найти(СтрокаТаблицыКаталогов.ИдКаталога);
			
			ПланыОбмена.Б_ОбменССайтом.НастроитьПостроительОбщейИнформации(ПостроительЗапроса, ПараметрыОбмена);
			ПланыОбмена.Б_ОбменССайтом.ЗаполнитьОтборПостроителяОбщейИнформации(ПостроительЗапроса, ПараметрыОбмена);

			Если НайденнаяСтрокаСОтбором <> Неопределено тогда  
				Если НайденнаяСтрокаСОтбором.ОтборПостроителяОтчета <> Неопределено Тогда 
					Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ЗаполнитьОтборПоТаблицеЗначений(ПостроительЗапроса.Отбор, НайденнаяСтрокаСОтбором.ОтборПостроителяОтчета, Операция);
				КонецЕсли;
			КонецЕсли;	

			Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Формирование пакетов для каталога: " + СтрокаТаблицыКаталогов.Каталог, ПараметрыОбмена, Истина);
			ДобавлениеТоваровВРегистрПакетов(ПостроительЗапроса, ПараметрыОбмена, СтрокаТаблицыКаталогов, Операция, 10000);
			Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Формирование пакетов для каталога: " + СтрокаТаблицыКаталогов.Каталог + " Завершено", ПараметрыОбмена, Истина);
			
		КонецЦикла;
		
		Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Формирование пакета для для общих данных  для товаров завершено.", ПараметрыОбмена);	
		
	//Свойства	
	ИначеЕсли Операция = "Свойства" тогда
		
		Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Формирование пакетов для свойств.", ПараметрыОбмена);	
		
		мТаблицаКаталогов 		 = ПараметрыОбмена.СохраненнаяТаблицаКаталогов.Получить();
		мТаблицаОтборовКаталогов = ПараметрыОбмена.СохраненнаяТаблицаОтборовКаталогов.Получить();
		//перебираем каталоги обмена	
		Для Каждого СтрокаТаблицыКаталогов Из мТаблицаКаталогов Цикл
			
			ПостроительЗапроса = Новый ПостроительОтчета;
			НайденнаяСтрокаСОтбором = мТаблицаОтборовКаталогов.Найти(СтрокаТаблицыКаталогов.ИдКаталога);
						
			ПланыОбмена.Б_ОбменССайтом.НастроитьПостроительСвойств(ПостроительЗапроса, ПараметрыОбмена);
			ПланыОбмена.Б_ОбменССайтом.ЗаполнитьОтборПостроителяСвойств(ПостроительЗапроса, ПараметрыОбмена);

			Если НайденнаяСтрокаСОтбором <> Неопределено тогда  
				
				Если НайденнаяСтрокаСОтбором.ОтборПостроителяОтчета <> Неопределено Тогда 
					Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ЗаполнитьОтборПоТаблицеЗначений(ПостроительЗапроса.Отбор, НайденнаяСтрокаСОтбором.ОтборПостроителяОтчета, Операция);
				КонецЕсли;
				
			КонецЕсли;	

			Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Формирование пакетов для каталога: " + СтрокаТаблицыКаталогов.Каталог, ПараметрыОбмена, Истина);
			ДобавлениеТоваровВРегистрПакетов(ПостроительЗапроса, ПараметрыОбмена, СтрокаТаблицыКаталогов, Операция, ПараметрыОбмена.КоличествоСвойствВПакете);
			Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Формирование пакетов для каталога: " + СтрокаТаблицыКаталогов.Каталог + " Завершено", ПараметрыОбмена, Истина);
			
		КонецЦикла;

		Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Формирование пакетов для свойств завершено.", ПараметрыОбмена);	
		
	//Товары	
	ИначеЕсли Операция = "Товары" тогда
		
		Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Формирование пакетов для товаров.", ПараметрыОбмена);	
		
		мТаблицаКаталогов 		 = ПараметрыОбмена.СохраненнаяТаблицаКаталогов.Получить();
		мТаблицаОтборовКаталогов = ПараметрыОбмена.СохраненнаяТаблицаОтборовКаталогов.Получить();
		
		//перебираем каталоги обмена	
		Для Каждого СтрокаТаблицыКаталогов Из мТаблицаКаталогов Цикл
			
			ПостроительЗапроса = Новый ПостроительОтчета;
			НайденнаяСтрокаСОтбором = мТаблицаОтборовКаталогов.Найти(СтрокаТаблицыКаталогов.ИдКаталога);
			
			ПланыОбмена.Б_ОбменССайтом.НастроитьПостроительТоваров(ПостроительЗапроса, ПараметрыОбмена);
			ПланыОбмена.Б_ОбменССайтом.ЗаполнитьОтборПостроителяТоваров(ПостроительЗапроса, ПараметрыОбмена);

			Если НайденнаяСтрокаСОтбором <> Неопределено тогда  
				
				Если НайденнаяСтрокаСОтбором.ОтборПостроителяОтчета <> Неопределено Тогда 
					Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ЗаполнитьОтборПоТаблицеЗначений(ПостроительЗапроса.Отбор, НайденнаяСтрокаСОтбором.ОтборПостроителяОтчета, Операция);
				КонецЕсли;
				
			КонецЕсли;	

			Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Формирование пакетов для каталога: " + СтрокаТаблицыКаталогов.Каталог, ПараметрыОбмена, Истина);
			ДобавлениеТоваровВРегистрПакетов(ПостроительЗапроса, ПараметрыОбмена, СтрокаТаблицыКаталогов, Операция, ПараметрыОбмена.КоличествоТоваровВПакете);
			Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Формирование пакетов для каталога: " + СтрокаТаблицыКаталогов.Каталог + " Завершено", ПараметрыОбмена, Истина);
			
		КонецЦикла;
		
		Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Формирование пакетов для товаров завершено.", ПараметрыОбмена);	
		
	//Скидки
	ИначеЕсли Операция = "Скидки" тогда
		
		Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Формирование пакетов для скидок.", ПараметрыОбмена);	
		
		ПостроительЗапроса = Новый ПостроительОтчета;
		ПланыОбмена.Б_ОбменССайтом.НастроитьПостроительСкидок(ПостроительЗапроса, ПараметрыОбмена.Ссылка);
		ПланыОбмена.Б_ОбменССайтом.ЗаполнитьОтборПостроителяСкидок(ПостроительЗапроса, ПараметрыОбмена.Ссылка);
		
		Если ПараметрыОбмена.ПостроительОтчетаСкидок <> Неопределено Тогда 
			Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ЗаполнитьОтборПоТаблицеЗначений(ПостроительЗапроса.Отбор, ПараметрыОбмена.ПостроительОтчетаСкидок, Операция);
		КонецЕсли;
		
		ЗапросПостроителя = ПостроительЗапроса.ПолучитьЗапрос();
		ТаблицаОбъектовОбменаВыгрузки = ЗапросПостроителя.Выполнить().Выгрузить(); 
		
		ЗагрузкаТаблицыДанныхВРегистрПакетов(ТаблицаОбъектовОбменаВыгрузки, ПараметрыОбмена, "Скидки", ПараметрыОбмена.КоличествоСкидокВПакете, Операция);
		
		Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Формирование пакетов для скидок завершено.", ПараметрыОбмена);	
		
	ИначеЕсли Операция = "КартыЛояльности" тогда
		
		Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Формирование карт лояльности для скидок.", ПараметрыОбмена);	
		
		ПостроительЗапроса = Новый ПостроительОтчета;
		ПланыОбмена.Б_ОбменССайтом.НастроитьПостроительКартЛояльности(ПостроительЗапроса, ПараметрыОбмена.Ссылка);
		ПланыОбмена.Б_ОбменССайтом.ЗаполнитьОтборПостроителяКартЛояльности(ПостроительЗапроса, ПараметрыОбмена.Ссылка);
		
		Если ПараметрыОбмена.ПостроительОтчетаКартЛояльности <> Неопределено Тогда 
			Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ЗаполнитьОтборПоТаблицеЗначений(ПостроительЗапроса.Отбор, ПараметрыОбмена.ПостроительОтчетаКартЛояльности, Операция);
		КонецЕсли;
		
		ЗапросПостроителя = ПостроительЗапроса.ПолучитьЗапрос();
		ТаблицаОбъектовОбменаВыгрузки = ЗапросПостроителя.Выполнить().Выгрузить(); 
		
		ЗагрузкаТаблицыДанныхВРегистрПакетов(ТаблицаОбъектовОбменаВыгрузки, ПараметрыОбмена, "КартыЛояльности", ПараметрыОбмена.КоличествоКартЛояльностиВПакете, Операция);
		
		Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Формирование пакетов для карт лояльности завершено.", ПараметрыОбмена);	
		
	//Пользовательские Справочники
	ИначеЕсли Операция = "ПользовательскиеСправочники" тогда
		
		Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Формирование пакетов для пользовательских справочников.", ПараметрыОбмена, Истина);
		тзнСправочников = ПолучитьПользовательскиеСправочникиОбменаДляФормированияПакетов(ПараметрыОбмена);
		ЗагрузкаТаблицыДанныхВРегистрПакетов(тзнСправочников, ПараметрыОбмена, "ПользовательскиеСправочники", ПараметрыОбмена.КоличествоЭлементовСправочникаВПакете, Операция);
		Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Формирование пакетов для пользовательских справочников завершено.", ПараметрыОбмена, Истина);
		
		//Контрагенты 
	ИначеЕсли Операция = "Контрагенты" тогда
		
		Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Формирование пакетов для контрагентов.", ПараметрыОбмена);	
			
		ПостроительЗапроса = Новый ПостроительОтчета;
		ПланыОбмена.Б_ОбменССайтом.НастроитьПостроительКонтрагентов(ПостроительЗапроса		, ПараметрыОбмена);
		ПланыОбмена.Б_ОбменССайтом.ЗаполнитьОтборПостроителяКонтрагентов(ПостроительЗапроса	, ПараметрыОбмена);
		
		Если ПараметрыОбмена.ПостроительОтчетаКонтрагентов <> Неопределено Тогда 
			Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ЗаполнитьОтборПоТаблицеЗначений(ПостроительЗапроса.Отбор, ПараметрыОбмена.ПостроительОтчетаКонтрагентов, Операция);
		КонецЕсли;
		
		ЗапросПостроителя = ПостроительЗапроса.ПолучитьЗапрос();
		ТаблицаОбъектовОбменаВыгрузки = ЗапросПостроителя.Выполнить().Выгрузить(); 
		
		ЗагрузкаТаблицыДанныхВРегистрПакетов(ТаблицаОбъектовОбменаВыгрузки, ПараметрыОбмена, "Контрагенты", ПараметрыОбмена.КоличествоКонтрагентовВПакете, Операция);
		
		Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Формирование пакетов для контрагентов завершено.", ПараметрыОбмена);	
		
	//Заказы 
	ИначеЕсли Операция = "Заказы" тогда
		
		Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Формирование пакетов для документов", ПараметрыОбмена);	
		
		ПостроительЗапроса = Новый ПостроительОтчета;
		ПланыОбмена.Б_ОбменССайтом.НастроитьПостроительЗаказов(ПостроительЗапроса, ПараметрыОбмена);
		ПланыОбмена.Б_ОбменССайтом.ЗаполнитьОтборПостроителяЗаказов(ПостроительЗапроса, ПараметрыОбмена);
		
		Если ПараметрыОбмена.ПостроительОтчетаЗаказов <> Неопределено Тогда 
			Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ЗаполнитьОтборПоТаблицеЗначений(ПостроительЗапроса.Отбор, ПараметрыОбмена.ПостроительОтчетаЗаказов, Операция);
		КонецЕсли;
		
		ЗапросПостроителя = ПостроительЗапроса.ПолучитьЗапрос();
		ТаблицаОбъектовОбменаВыгрузки = ЗапросПостроителя.Выполнить().Выгрузить(); 
		
		ЗагрузкаТаблицыДанныхВРегистрПакетов(ТаблицаОбъектовОбменаВыгрузки, ПараметрыОбмена, "Заказы", ПараметрыОбмена.КоличествоЗаказовВПакете, Операция);
		
		Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Формирование пакетов для документов завершено", ПараметрыОбмена);	
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузкаТаблицыДанныхВРегистрПакетов(ТаблицаОбъектовОбменаВыгрузки, ПараметрыОбмена, ИдентификаторКаталога, КоличествоДанныхВПакете, Операция)
	
	ТаблицаОбъектовОбменаВыгрузки.Колонки.Добавить("Пакет");
	ТаблицаОбъектовОбменаВыгрузки.Колонки.Добавить("Каталог");
	ТаблицаОбъектовОбменаВыгрузки.Колонки.Добавить("НастройкаОбмена");
	ТаблицаОбъектовОбменаВыгрузки.Колонки.Добавить("Операция");
	
	ТаблицаОбъектовОбменаВыгрузки.Сортировать("ТипОбъекта");
	
	РазбивкаТаблицыДанныхНаПакеты(ТаблицаОбъектовОбменаВыгрузки, КоличествоДанныхВПакете, Операция, ПараметрыОбмена, ИдентификаторКаталога);
	
	НаборЗаписей = РегистрыСведений.Б_ПакетныйОбмен.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Каталог.установить(ИдентификаторКаталога);
	НаборЗаписей.Отбор.НастройкаОбмена.установить(ПараметрыОбмена.Ссылка);
	НаборЗаписей.Отбор.Операция.установить(Операция);
	НаборЗаписей.Загрузить(ТаблицаОбъектовОбменаВыгрузки);
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура РазбивкаТаблицыДанныхНаПакеты(Таблица, КоличествоВПакете, Операция, Узел, Каталог)
	
	мОбъектыПакетов = Новый Массив;
	мОбъектыПакетов.Добавить("Номенклатура");
	мОбъектыПакетов.Добавить("Свойство");
	мОбъектыПакетов.Добавить("Скидка");
	мОбъектыПакетов.Добавить("ДисконтнаяКарта");
	мОбъектыПакетов.Добавить("ПользовательскийСправочник");
	мОбъектыПакетов.Добавить("Контрагент");
	мОбъектыПакетов.Добавить("Заказ");
	
	Итератор 	= 0;
	Пакет 		= 1;
	
	Для каждого ТекСтр из Таблица Цикл
		
		Если  мОбъектыПакетов.Найти(ТекСтр.ТипОбъекта) = Неопределено тогда
			ТекСтр.Пакет 			= 0;
			ТекСтр.Каталог  		= Каталог;
			ТекСтр.НастройкаОбмена 	= Узел.Ссылка;
			ТекСтр.Операция 		= Операция;
			
		Иначе
					
			Итератор = Итератор + 1;

			Если Итератор > КоличествоВПакете тогда
				Пакет = Пакет + 1;
				Итератор = 1;
			КонецЕсли;
			
			ТекСтр.НастройкаОбмена 	= Узел.Ссылка;
			ТекСтр.Каталог 			= Каталог;
			ТекСтр.Пакет 			= Пакет;
			ТекСтр.Операция 		= Операция;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьПользовательскиеСправочникиОбменаДляФормированияПакетов(ПараметрыОбмена)
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Объект");
	Результат.Колонки.Добавить("ТипОбъекта");
	Результат.Колонки.Добавить("ПользовательскийСправочник");
	
	тзнСправочников = ПараметрыОбмена.ВыгружаемыеПоляСправочников.Скопировать();
	тзнСправочников.Свернуть("Справочник");
	
	Для каждого ТекСпр из тзнСправочников Цикл
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПользовательскийСправочник.Ссылка КАК Объект
		|ИЗ
		|	Справочник." +  ТекСпр.Справочник + " КАК ПользовательскийСправочник
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ПолнаяВыгрузка
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ПользовательскийСправочник.Ссылка В
		|					(ВЫБРАТЬ
		|						ПользовательскийСправочникИзменений.Ссылка
		|					ИЗ
		|						Справочник." +  ТекСпр.Справочник + ".Изменения КАК ПользовательскийСправочникИзменений
		|					ГДЕ
		|						ПользовательскийСправочникИзменений.Узел = &Узел)
		|		КОНЕЦ";
		Запрос.УстановитьПараметр("Узел",ПараметрыОбмена.Ссылка);
		Запрос.УстановитьПараметр("ПолнаяВыгрузка",(НЕ ПараметрыОбмена.ВыгружатьТолькоИзменения ИЛИ ПараметрыОбмена.ВыполнятьПолнуюВыгрузкуПринудительно));
		
		ВыборкаЗначений = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаЗначений.Следующий() Цикл
			
			НовСтр = результат.Добавить();
			НовСтр.Объект 		= ВыборкаЗначений.Объект;
			НовСтр.ТипОбъекта	= "ПользовательскийСправочник";
			
			НовСтр.ПользовательскийСправочник = ТекСпр.Справочник;
			
		КонецЦикла;

	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции


 
			///////////////////////////////////////////////////////////////////
			//			    ВЫГРУЗКА ИНФОРМАЦИИ О ТОВАРАХ                   //
			/////////////////////////////////////////////////////////////////

			
// Процедура - выгружает общую информацию в XDTO
//
// Параметры:
//  ПараметрыОбмена			 - 	 Настройки узла обмена 
//  МассивДанных			 - 	 Массив выгружаеммых данных 
//  СтрокаТаблицыКаталогов	 - 	 Информация о каталоге(инфоблоке), куда выгружается информация 
//  НомерСтроки				 - 	 Номер каталога 
Процедура ВыгрузитьОбщуюИнформацию(ПараметрыОбмена, МассивДанных, Операция, СтрокаТаблицыКаталогов, НомерСтроки)
	
	СписокТоваров 		= Новый СписокЗначений;
	СписокСкладов 		= Новый СписокЗначений;
	СписокСоглашений	= Новый СписокЗначений;
	
	Успешно = Ложь;
	
	ПараметрыОбмена.МояФабрикаXDTO 	= СоздатьФабрикуXDTO(ПараметрыОбмена.ФайлСхемы); 
	
	XDTOКоммерческаяИнформацияТип 	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена,  "КоммерческаяИнформация");
	XDTOКаталогТип 					= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена,  "Каталог");
	XDTOКлассификаторТип 			= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена,  "Классификатор");
	XDTOПакетПредложенийТип 		= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена,  "ПакетПредложений");
	
	Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Выгрузка пакетов каталога: " + СтрокаТаблицыКаталогов.Каталог, ПараметрыОбмена, Истина);
	
	МассивДанных = ПолучитьДанныеИзРегистраПакетов(ПараметрыОбмена, СтрокаТаблицыКаталогов.ИдКаталога); 
	
	МассивСтрок = МассивДанных.НайтиСтроки(Новый структура("Пакет", 0));	
	
	Если МассивСтрок.Количество() > 0 тогда
		
		РазбитаяСтруктураДанных = РазборМассиваДанныхПоТипамОбъектов(МассивСтрок);
		
		НовСтрокаКэша = ПараметрыОбмена.КэшДанных.Добавить();
		НовСтрокаКэша.ИдКаталога 					= СтрокаТаблицыКаталогов.ИдКаталога;
		НовСтрокаКэша.ОбщийСписокСкладов 			= РазбитаяСтруктураДанных.Склады;
		НовСтрокаКэша.ОбщийСписокТиповЦен 			= РазбитаяСтруктураДанных.ТипыЦен;
		НовСтрокаКэша.ОбщийСписокЕдиницИзмерений 	= РазбитаяСтруктураДанных.Единицы;
		
	
		лМенеджерВременныхТаблиц 	= СформироватьВременныеТаблицыПоОбщейИнформации(ПараметрыОбмена, РазбитаяСтруктураДанных.Склады, РазбитаяСтруктураДанных.ТипыЦен, РазбитаяСтруктураДанных.Единицы);
		
		XDTOКаталог 				= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOКаталогТип); 
		XDTOКаталог.Ид				= СтрокаТаблицыКаталогов.ИдКаталога;
		XDTOКаталог.ИдКлассификатора= СтрокаТаблицыКаталогов.ИдКаталога;
		XDTOКаталог.Наименование	= СтрокаТаблицыКаталогов.Каталог;
		XDTOКаталог.Описание 		= СтрокаТаблицыКаталогов.Каталог;
		XDTOКаталог.СодержитТолькоИзменения = XMLСтрока(Истина);
		
		Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Выгрузка справочных данных.", ПараметрыОбмена);
		
		ИмяКаталога = ПараметрыОбмена.КаталогНаДиске; 
		
		
		//выгрузка классификатора
		XDTOКоммерческаяИнформация 	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьXDTOКоммерческаяИнформация(ПараметрыОбмена, XDTOКоммерческаяИнформацияТип);
		
		XDTOКлассификатор 				= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOКлассификаторТип); 
		XDTOКлассификатор.Ид            = СтрокаТаблицыКаталогов.ИдКаталога;
		XDTOКлассификатор.Наименование  = СтрокаТаблицыКаталогов.Каталог;
		XDTOКлассификатор.СодержитТолькоИзменения 	= XMLСтрока(Истина);
		
		ВыгрузитьГруппы(ПараметрыОбмена, XDTOКлассификатор, XDTOКлассификаторТип, СтрокаТаблицыКаталогов);   
		
		ВыгрузитьЕдиницыИзмеренияXDTO(ПараметрыОбмена, XDTOКлассификатор, XDTOКлассификаторТип, лМенеджерВременныхТаблиц);
		
		Если ПараметрыОбмена.ВыгружатьОстаткиПоСкладам тогда
			ВыгрузитьСкладыXDTO(ПараметрыОбмена, XDTOКлассификатор, XDTOКлассификаторТип, лМенеджерВременныхТаблиц);
		КонецЕсли;
		Если ПараметрыОбмена.ВыгружатьЦены тогда
			ВыгрузитьТипыЦенXDTO(ПараметрыОбмена, XDTOКлассификатор, XDTOКлассификаторТип, лМенеджерВременныхТаблиц);
		КонецЕсли;
		
		XDTOКоммерческаяИнформация.Классификатор 	= XDTOКлассификатор;
		XDTOКоммерческаяИнформация.Каталог 			= XDTOКаталог;
		
		Успешно = ЗаписьИОтправкаXMLДанныхНаСайт(ПараметрыОбмена, XDTOКоммерческаяИнформация, ИмяКаталога, "import" + ?(НомерСтроки > 0 ,Строка(НомерСтроки), ""), МассивСтрок, "ВыгрузкаТоваров", 0);		
		
		УдалениеПакетовИРегистрацийОбщейИнформации(Успешно, ПараметрыОбмена, Операция, 0, СтрокаТаблицыКаталогов.ИдКаталога, МассивСтрок);
		
		лМенеджерВременныхТаблиц.Закрыть();
		
		
	КонецЕсли;
	
	Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Завершение выгрузки пакета с общей информацией каталога: " + СтрокаТаблицыКаталогов.Каталог, ПараметрыОбмена, Истина);
	
КонецПроцедуры

// Функция - формирует временные таблицы с информацией о общей информации
//
// Параметры:
//  ПараметрыОбмена	 - 	 Настройки узла обмена 
//  СписокСкладов	 - 	 Список выгружаемых складов 
//  СписокСоглашений - 	 Список выгружаемых соглашений 
//  СписокЕдиниц	 - 	 Список выгружаемых единиц измерений 
// Возвращаемое значение:
//   Менеджер временных таблиц, хранящий информацию о общей информации 
Функция СформироватьВременныеТаблицыПоОбщейИнформации(ПараметрыОбмена, СписокСкладов, СписокТиповЦен, СписокЕдиниц)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Узел"	, ПараметрыОбмена.Ссылка);
	Запрос.УстановитьПараметр("ТекДата"	, ТекущаяДата());
	
	Запрос.УстановитьПараметр("СписокСкладов"	, СписокСкладов);
	Запрос.УстановитьПараметр("СписокТиповЦен"	, СписокТиповЦен);
	Запрос.УстановитьПараметр("СписокЕдиниц" 	, СписокЕдиниц);
	
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////
	//	                                                                                                ///
	//             ПАКЕТ ЗАПРОСОВ ДЛЯ ПОЛУЧЕНИЯ НОМЕНКЛАТУРЫ С ХАРАКТЕРИСТИКОЙ                         ///
	//                                                                                                ///
	////////////////////////////////////////////////////////////////////////////////////////////////////
	
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТипыЦенНоменклатуры.Ссылка КАК ТипЦены,
	|	ТипыЦенНоменклатуры.ВерсияДанных,
	|	ТипыЦенНоменклатуры.ПометкаУдаления,
	|	ТипыЦенНоменклатуры.Наименование,
	|	ТипыЦенНоменклатуры.Рассчитывается,
	|	ТипыЦенНоменклатуры.ПроцентСкидкиНаценки,
	|	ТипыЦенНоменклатуры.ЦенаВключаетНДС,
	|	ТипыЦенНоменклатуры.СпособРасчетаЦены,
	|	ТипыЦенНоменклатуры.ВалютаЦены,
	|	ТипыЦенНоменклатуры.ВалютаЦены.Наименование КАК ВалютаЦеныКод,
	|	ТипыЦенНоменклатуры.БазовыйТипЦен,
	|	ВЫБОР
	|		КОГДА ТипыЦенНоменклатуры.Б_Идентификатор = """"
	|			ТОГДА ТипыЦенНоменклатуры.Ссылка
	|		ИНАЧЕ ТипыЦенНоменклатуры.Б_Идентификатор
	|	КОНЕЦ КАК Идентификатор
	|ПОМЕСТИТЬ ВремТипыЦен
	|ИЗ
	|	Справочник.ТипыЦенНоменклатуры КАК ТипыЦенНоменклатуры
	|ГДЕ
	|	ТипыЦенНоменклатуры.Ссылка В(&СписокТиповЦен)
	|{ГДЕ
	|	ТипыЦенНоменклатуры.Ссылка.* КАК ТипЦен}
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТипЦены
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Склады.Ссылка КАК Склад,
	|	ВЫБОР
	|		КОГДА Склады.Б_Идентификатор = """"
	|			ТОГДА Склады.Ссылка
	|		ИНАЧЕ Склады.Б_Идентификатор
	|	КОНЕЦ КАК Идентификатор,
	|	Склады.ВерсияДанных КАК ВерсияДанных,
	|	Склады.Наименование,
	|	Склады.ПометкаУдаления,
	|	Склады.Код,
	|	Склады.ВидСклада,
	|	Склады.Комментарий
	|ПОМЕСТИТЬ ВремСклады
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	НЕ Склады.ЭтоГруппа
	|	И Склады.Ссылка В(&СписокСкладов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА КлассификаторЕдиницИзмерения.Б_Идентификатор = """"
	|			ТОГДА КлассификаторЕдиницИзмерения.Код
	|		ИНАЧЕ КлассификаторЕдиницИзмерения.Б_Идентификатор
	|	КОНЕЦ КАК Идентификатор,
	|	КлассификаторЕдиницИзмерения.ВерсияДанных,
	|	КлассификаторЕдиницИзмерения.ПометкаУдаления,
	|	КлассификаторЕдиницИзмерения.Наименование,
	|	КлассификаторЕдиницИзмерения.НаименованиеПолное,
	|	КлассификаторЕдиницИзмерения.МеждународноеСокращение,
	|	КлассификаторЕдиницИзмерения.Код
	|ПОМЕСТИТЬ ВремЕдиницыИзмерения
	|ИЗ
	|	Справочник.КлассификаторЕдиницИзмерения КАК КлассификаторЕдиницИзмерения
	|ГДЕ
	|	КлассификаторЕдиницИзмерения.Ссылка В(&СписокЕдиниц)";
	
	
	лМенеджерВременныхТаблиц 		= Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц 	= лМенеджерВременныхТаблиц; 
	Запрос.Текст = ТекстЗапроса;
	запрос.Выполнить();	
	
	Возврат лМенеджерВременныхТаблиц;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Процедура ВыгрузитьСкладыXDTO(ПараметрыОбмена, Владелец, ВладелецТип, МенеджерВременныхТаблиц)
	
	Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Выгрузка складов в XML.", ПараметрыОбмена);
	Итератор = 0;

	XDTOСкладыТип	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена, "Склады", Истина, ВладелецТип);	
	XDTOСклады 		= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOСкладыТип); 
	
	XDTOСкладТип 	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена, "Склад");	
	
	//Временная таблица формируется в функции СформироватьВременныеТаблицыПоИнформацииОТоварахПакета
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ *
	|ИЗ
	|	ВремСклады КАК ВремСклады";
	ВыборкаСкладов = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаСкладов.Следующий() Цикл
		
		XDTOСклад 					= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOСкладТип); 
		
		XDTOСклад.Ид				= XMLСтрока(ВыборкаСкладов.Идентификатор);
		XDTOСклад.НомерВерсии		= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьВерсиюОбъекта(ПараметрыОбмена, ВыборкаСкладов.ВерсияДанных, "Складов");
		XDTOСклад.ПометкаУдаления	= XMLСтрока(ВыборкаСкладов.ПометкаУдаления);
		XDTOСклад.Наименование		= ВыборкаСкладов.Наименование;
		XDTOСклад.Комментарий		= ВыборкаСкладов.Комментарий;
		
		XDTOСклады.Склад.Добавить(XDTOСклад);
		
		Итератор = Итератор + 1;
	КонецЦикла;
	
	Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Выгрузка складов в XML завершено. Выгружено " + Строка(Итератор) + " элементов.", ПараметрыОбмена);
	
	Запрос = Новый Запрос("УНИЧТОЖИТЬ ВремСклады");
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();

	Владелец.Склады = XDTOСклады;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Процедура ВыгрузитьЕдиницыИзмеренияXDTO(ПараметрыОбмена, Владелец, ВладелецТип, МенеджерВременныхТаблиц)
	
	Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Выгрузка единиц измерения в XML.", ПараметрыОбмена);
	Итератор = 0;
	
	XDTOЕдиницыИзмеренияТип	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена, "ЕдиницыИзмерения", Истина, ВладелецТип);	
	XDTOЕдиницыИзмерения 	= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOЕдиницыИзмеренияТип); 
	
	XDTOЕдиницаИзмеренияТип = Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена, "ЕдиницаИзмерения");	
	
	//Временная таблица формируется в функции СформироватьВременныеТаблицыПоИнформацииОТоварахПакета
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ *
	|ИЗ
	|	ВремЕдиницыИзмерения КАК ВремЕдиницыИзмерения";
	ВыборкаЕдиниц = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЕдиниц.Следующий() Цикл
		
		XDTOЕдиницаИзмерения		= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOЕдиницаИзмеренияТип); 
		
		XDTOЕдиницаИзмерения.Ид					= XMLСтрока(ВыборкаЕдиниц.Идентификатор);
		XDTOЕдиницаИзмерения.НомерВерсии		= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьВерсиюОбъекта(ПараметрыОбмена, ВыборкаЕдиниц.ВерсияДанных, "Единиц измерений");
		XDTOЕдиницаИзмерения.НаименованиеКраткое= Лев(ВыборкаЕдиниц.Наименование,3);
		XDTOЕдиницаИзмерения.ПометкаУдаления	= XMLСтрока(ВыборкаЕдиниц.ПометкаУдаления);
		XDTOЕдиницаИзмерения.Код				= Лев(ВыборкаЕдиниц.Код,4);
		XDTOЕдиницаИзмерения.НаименованиеПолное = ВыборкаЕдиниц.НаименованиеПолное;
		XDTOЕдиницаИзмерения.МеждународноеСокращение = Лев(ВыборкаЕдиниц.МеждународноеСокращение,3);

		
		XDTOЕдиницыИзмерения.ЕдиницаИзмерения.Добавить(XDTOЕдиницаИзмерения);
		Итератор = Итератор + 1;
		
	КонецЦикла;
	
	Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Выгрузка единиц измерения в XML завершено. Выгружено " + Строка(Итератор) + " элементов.", ПараметрыОбмена);
	
	Запрос = Новый Запрос("УНИЧТОЖИТЬ ВремЕдиницыИзмерения");
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	Владелец.ЕдиницыИзмерения = XDTOЕдиницыИзмерения;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Процедура ВыгрузитьТипыЦенXDTO(ПараметрыОбмена, Владелец, ВладелецТип, МенеджерВременныхТаблиц)
	
	Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Выгрузка типов цен в XML.", ПараметрыОбмена);
	Итератор = 0;
	
	XDTOТипыЦенТип	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена, "ТипыЦен", Истина, ВладелецТип);	
	XDTOТипыЦен 	= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOТипыЦенТип); 
	
	XDTOТипЦеныТип 	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена, "ТипЦены");	
	
	XDTOНалогТип 	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена, "Налог", Истина, XDTOТипЦеныТип);	
	
	//Временная таблица формируется в функции СформироватьВременныеТаблицыПоИнформацииОТоварахПакета
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ *
	|ИЗ
	|	ВремТипыЦен КАК ВремТипыЦен";
	ВыборкаТиповЦен = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаТиповЦен.Следующий() Цикл
		
		XDTOТипЦены 				= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOТипЦеныТип); 
		
		XDTOТипЦены.Ид				= XMLСтрока(ВыборкаТиповЦен.Идентификатор);
		XDTOТипЦены.НомерВерсии		= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьВерсиюОбъекта(ПараметрыОбмена, ВыборкаТиповЦен.ВерсияДанных, "Типов цен");
		XDTOТипЦены.Наименование	= ВыборкаТиповЦен.Наименование;
		XDTOТипЦены.ПометкаУдаления	= XMLСтрока(ВыборкаТиповЦен.ПометкаУдаления);
		XDTOТипЦены.Валюта			= Лев(ВыборкаТиповЦен.ВалютаЦеныКод, 3 );
		
		XDTOНалог				= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOНалогТип);
		XDTOНалог.Наименование 	= ПараметрыОбмена.НаименованиеНалога;
		XDTOНалог.УчтеноВСумме 	= ВыборкаТиповЦен.ЦенаВключаетНДС;
		
		XDTOТипЦены.Налог.Добавить(XDTOНалог);
		
		XDTOТипыЦен.ТипЦены.Добавить(XDTOТипЦены);
		Итератор = Итератор + 1;
		
	КонецЦикла;
	
	Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Выгрузка типов цен в XML завершено. Выгружено " + Строка(Итератор) + " элементов.", ПараметрыОбмена);
	
	Запрос = Новый Запрос("УНИЧТОЖИТЬ ВремТипыЦен");
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	Владелец.ТипыЦен = XDTOТипыЦен;
	
КонецПроцедуры



			///////////////////////////////////////////////////////////////////
			//				ВЫГРУЗКА ГРУПП ТОВАРОВ                          //
			/////////////////////////////////////////////////////////////////

Процедура ВыгрузитьГруппы(ПараметрыОбмена, Владелец, ВладелецТип, СтрокаТаблицыКаталогов)
	
	Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Выгрузка групп в XML.", ПараметрыОбмена);
	
	XDTOГруппыТип 	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена, "Группы", Истина, ВладелецТип);
	XDTOГруппы 		= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOГруппыТип); 

	Итератор = 0;
	ДеревоГрупп = СтрокаТаблицыКаталогов.ДеревоГрупп;                                        
	
	Если ДеревоГрупп.Строки.Количество() > 0 Тогда
		
		ВыгрузитьГруппыРекурсивноПоДеревуГруппXDTO(ПараметрыОбмена, XDTOГруппы, ДеревоГрупп.Строки, Итератор);
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Узел",ПараметрыОбмена.Ссылка);
		Запрос.УстановитьПараметр("Каталог",СтрокаТаблицыКаталогов.ИдКаталога);
		Запрос.УстановитьПараметр("ТипОбъекта","ТоварДляГруппы");
		
		ТекстЗапроса = "ВЫБРАТЬ
		|	Б_ПакетныйОбмен.Объект,
		|	ВЫРАЗИТЬ(Б_ПакетныйОбмен.Объект КАК Справочник.Номенклатура).ЦеноваяГруппа КАК ЦеноваяГруппа,
		|	ВЫРАЗИТЬ(Б_ПакетныйОбмен.Объект КАК Справочник.Номенклатура).Наименование КАК Наименование
		|ПОМЕСТИТЬ ВремНоменклатура
		|ИЗ
		|	РегистрСведений.Б_ПакетныйОбмен КАК Б_ПакетныйОбмен
		|ГДЕ
		|	Б_ПакетныйОбмен.НастройкаОбмена = &Узел
		|	И Б_ПакетныйОбмен.Каталог = &Каталог
		|	И Б_ПакетныйОбмен.ТипОбъекта = &ТипОбъекта ;";
		
		ТекстЗапросаГруппыНоменклатуры =
		"ВЫБРАТЬ
		|	ВремНоменклатура.Объект КАК Объект,
		|	ВремНоменклатура.Наименование КАК Наименование,
		|	ВремНоменклатура.Объект.ЭтоГруппа КАК ЭтоГруппа
		|ИЗ
		|	ВремНоменклатура КАК ВремНоменклатура
		|ИТОГИ ПО
		|	Объект ТОЛЬКО ИЕРАРХИЯ
		|АВТОУПОРЯДОЧИВАНИЕ";
		
		ТекстЗапросаЦеновыеГруппы =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВремНоменклатура.ЦеноваяГруппа КАК ЦеноваяГруппа,
		|	ВремНоменклатура.Объект КАК Объект,
		|	ВремНоменклатура.Объект.ЭтоГруппа КАК ЭтоГруппа
		|ИЗ
		|	ВремНоменклатура КАК ВремНоменклатура
		|ИТОГИ ПО
		|	ЦеноваяГруппа ИЕРАРХИЯ
		|АВТОУПОРЯДОЧИВАНИЕ";
		
		Если ПараметрыОбмена.КлассифицироватьПоЦеновымГруппам тогда
			ТекстЗапроса = ТекстЗапроса + ТекстЗапросаЦеновыеГруппы;	
		Иначе
			ТекстЗапроса = ТекстЗапроса + ТекстЗапросаГруппыНоменклатуры;	
		КонецЕсли;
		
		Запрос.Текст = ТекстЗапроса;
		
		ДеревоГрупп = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		
		Если ПараметрыОбмена.КлассифицироватьПоЦеновымГруппам Тогда
			
			ВыгрузитьГруппыРекурсивноПоЦеновымГруппамXDTO(ПараметрыОбмена, XDTOГруппы, ДеревоГрупп.Строки, СтрокаТаблицыКаталогов.Группы, Итератор);
			
		Иначе
			
			ВыгрузитьГруппыРекурсивноXDTO(ПараметрыОбмена, XDTOГруппы, ДеревоГрупп.Строки, СтрокаТаблицыКаталогов.Группы, Итератор);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Выгрузка групп в XML завершено. Выгружено " + Строка(Итератор) + " элементов.", ПараметрыОбмена);
	
	Если XDTOГруппы.Группа.количество() > 0 тогда
		Владелец.Группы = XDTOГруппы;
	КонецЕсли;
	
КонецПроцедуры

Функция НужноВыгружатьГруппу(СписокГрупп, Элемент)
	
	Если ТипЗнч(СписокГрупп) = Тип("СписокЗначений") Тогда
		Для Каждого Группа Из СписокГрупп Цикл
			Если Элемент.ПринадлежитЭлементу(Группа.Значение) ИЛИ Элемент = Группа.Значение Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура ВыгрузитьГруппыРекурсивноПоДеревуГруппXDTO(ПараметрыОбмена, Владелец, ДеревоГрупп, Итератор);
	
	
	XDTOГруппаТип 	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена, "Группа");
	XDTOГруппыТип 	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена, "Группы", Истина, XDTOГруппаТип);

	Для Каждого СтрокаДерева Из ДеревоГрупп Цикл
		
		XDTOГруппа 					= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOГруппаТип); 
        XDTOГруппа.Ид 				= XMLСтрока(СтрокаДерева.ИдГруппы);
		XDTOГруппа.НомерВерсии 		= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьВерсиюОбъекта(ПараметрыОбмена, "123", "Групп");
		XDTOГруппа.ПометкаУдаления 	= XMLСтрока(Ложь);
        XDTOГруппа.Наименование 	= Лев(СтрокаДерева.Группа, 250);
		
		XDTOГруппы 		= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOГруппыТип); 

		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			
			ВыгрузитьГруппыРекурсивноПоДеревуГруппXDTO(ПараметрыОбмена, XDTOГруппы, СтрокаДерева.Строки, Итератор);
			Если XDTOГруппы.Группа.количество() > 0 тогда
				XDTOГруппа.Группы = XDTOГруппы;
			КонецЕсли;
		КонецЕсли;

		Итератор = Итератор + 1;
		Владелец.Группа.Добавить(XDTOГруппа);
		
	КонецЦикла;

КонецПроцедуры

Процедура ВыгрузитьГруппыРекурсивноXDTO(ПараметрыОбмена, Владелец, ДеревоГрупп, СписокГрупп, Итератор, СоздаватьНовыйУровеньГрупп = Истина, ТекущийРодитель = НеОпределено);
	
	XDTOГруппаТип 	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена, "Группа");
	XDTOГруппыТип 	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена, "Группы", Истина, XDTOГруппаТип);
	
	Для Каждого СтрокаДерева Из ДеревоГрупп Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаДерева.Объект) Тогда 
            Продолжить;    
		КонецЕсли;  
		
		Если НЕ СтрокаДерева.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДерева.Объект = ТекущийРодитель Тогда
			Продолжить;
		КонецЕсли;
				
		XDTOГруппы 		= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOГруппыТип); 
		Если ЭтоГруппаВерхнегоУровня(СтрокаДерева.Объект, СписокГрупп) Тогда
			
			Если СтрокаДерева.Строки.Количество() > 0 Тогда
				
				Если НужноВыгружатьГруппу(СписокГрупп, СтрокаДерева.Объект) тогда
					ВыгрузитьГруппыРекурсивноXDTO(ПараметрыОбмена, XDTOГруппы, СтрокаДерева.Строки, СписокГрупп, Итератор, Ложь);
					
					XDTOГруппа 					= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOГруппаТип); 
					XDTOГруппа.Ид 				= XMLСтрока(?(СтрокаДерева.Объект.Б_Идентификатор = "", СтрокаДерева.Объект, СтрокаДерева.Объект.Б_Идентификатор));
					XDTOГруппа.НомерВерсии 		= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьВерсиюОбъекта(ПараметрыОбмена, СтрокаДерева.Объект.ВерсияДанных, "Групп");
					XDTOГруппа.ПометкаУдаления 	= XMLСтрока(СтрокаДерева.Объект.ПометкаУдаления);
					XDTOГруппа.Наименование 	= Лев(СтрокаДерева.Объект.Наименование, 250);
					
					XDTOГруппа.Группы 			= XDTOГруппы;
					
					Итератор = Итератор + 1;
					Владелец.Группа.Добавить(XDTOГруппа);
					
				Иначе
					ВыгрузитьГруппыРекурсивноXDTO(ПараметрыОбмена, Владелец, СтрокаДерева.Строки, СписокГрупп, Итератор, Ложь);
				КонецЕсли;
			КонецЕсли;
		Иначе
			
			XDTOГруппа 					= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOГруппаТип); 
			XDTOГруппа.Ид 				= XMLСтрока(?(СтрокаДерева.Объект.Б_Идентификатор = "", СтрокаДерева.Объект, СтрокаДерева.Объект.Б_Идентификатор));
			XDTOГруппа.НомерВерсии 		= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьВерсиюОбъекта(ПараметрыОбмена, СтрокаДерева.Объект.ВерсияДанных, "Групп");
			XDTOГруппа.ПометкаУдаления 	= XMLСтрока(СтрокаДерева.Объект.ПометкаУдаления);
			XDTOГруппа.Наименование 	= Лев(СтрокаДерева.Объект.Наименование, 250);
			
			Если СтрокаДерева.Строки.Количество() > 0 Тогда
				ВыгрузитьГруппыРекурсивноXDTO(ПараметрыОбмена, XDTOГруппы, СтрокаДерева.Строки, СписокГрупп, Итератор,, СтрокаДерева.Объект);
				Если XDTOГруппы.Группа.количество() > 0 тогда
					XDTOГруппа.Группы = XDTOГруппы;
				КонецЕсли;
			КонецЕсли;
			
			Итератор = Итератор + 1;
			Владелец.Группа.Добавить(XDTOГруппа);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыгрузитьГруппыРекурсивноПоЦеновымГруппамXDTO(ПараметрыОбмена, Владелец, ДеревоГрупп, СписокГрупп, Итератор, СоздаватьНовыйУровеньГрупп = Истина, ТекущийРодитель = НеОпределено);
	
	XDTOГруппаТип 	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена, "Группа");
	XDTOГруппыТип 	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена, "Группы", Истина, XDTOГруппаТип);
	
	Для Каждого СтрокаДерева Из ДеревоГрупп Цикл
		
		Если СтрокаДерева.ЦеноваяГруппа = ТекущийРодитель Тогда
			Продолжить;
		КонецЕсли;
		
		XDTOГруппы 		= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOГруппыТип); 
		
		Если ЭтоГруппаВерхнегоУровня(СтрокаДерева.ЦеноваяГруппа, СписокГрупп) Тогда
			
			Если СтрокаДерева.Строки.Количество() > 0 Тогда
				ВыгрузитьГруппыРекурсивноПоЦеновымГруппамXDTO(ПараметрыОбмена, XDTOГруппы, СтрокаДерева.Строки, СписокГрупп, Итератор, Ложь);
			КонецЕсли;
			
		Иначе
			
			XDTOГруппа 					= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOГруппаТип); 
			XDTOГруппа.Ид 				= XMLСтрока(СтрокаДерева.ЦеноваяГруппа);
			XDTOГруппа.НомерВерсии 		= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьВерсиюОбъекта(ПараметрыОбмена, СтрокаДерева.ЦеноваяГруппа.ВерсияДанных, "Групп");
			XDTOГруппа.ПометкаУдаления 	= XMLСтрока(СтрокаДерева.ЦеноваяГруппа.ПометкаУдаления);
			XDTOГруппа.Наименование 	= Лев(СтрокаДерева.ЦеноваяГруппа.Наименование, 250);
			
			Если СтрокаДерева.Строки.Количество() > 0 Тогда
				
				ВыгрузитьГруппыРекурсивноПоЦеновымГруппамXDTO(ПараметрыОбмена, XDTOГруппы, СтрокаДерева.Строки, СписокГрупп, Итератор,, СтрокаДерева.ЦеноваяГруппа);
				
			КонецЕсли;
			
			Итератор = Итератор + 1;
			Владелец.Группа.Добавить(XDTOГруппа);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЭтоГруппаВерхнегоУровня(Элемент, СписокГрупп)
	Если ТипЗнч(СписокГрупп) = Тип("СписокЗначений") Тогда
		Для Каждого Группа Из СписокГрупп Цикл
			Если Группа.Значение.ПринадлежитЭлементу(Элемент) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат Ложь;
КонецФункции


// Процедура - выгружает информацию о свойствах в XDTO
//
// Параметры:
//  ПараметрыОбмена			 - 	 Настройки узла обмена 
//  МассивДанных			 - 	 Массив выгружаеммых данных 
//  СтрокаТаблицыКаталогов	 - 	 Информация о каталоге(инфоблоке), куда выгружается информация 
//  НомерСтроки				 - 	 Номер каталога 
Процедура ВыгрузитьИнформациюОСвойствах(ПараметрыОбмена, МассивДанных, Операция, СтрокаТаблицыКаталогов, НомерСтроки)
	
	Успешно = Ложь;
	
	ПараметрыОбмена.МояФабрикаXDTO 	= СоздатьФабрикуXDTO(ПараметрыОбмена.ФайлСхемы); 
	
	XDTOКоммерческаяИнформацияТип 	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена,  "КоммерческаяИнформация");
	XDTOКаталогТип 					= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена,  "Каталог");
	XDTOКлассификаторТип 			= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена,  "Классификатор");
	XDTOПакетПредложенийТип 		= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена,  "ПакетПредложений");
	
	Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Выгрузка пакетов каталога: " + СтрокаТаблицыКаталогов.Каталог, ПараметрыОбмена, Истина);
	
	МассивДанных = ПолучитьДанныеИзРегистраПакетов(ПараметрыОбмена, СтрокаТаблицыКаталогов.ИдКаталога); 
	
	лКоличествоСтрок = МассивДанных.Количество();
	КоличествоПакетов = ?(лКоличествоСтрок > 0, МассивДанных[лКоличествоСтрок - 1].Пакет, -1); 
	
	Для Пакет = 1 по КоличествоПакетов Цикл
		
		Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Начало выгрузки пакета " + Строка(Пакет) + " каталога: " + СтрокаТаблицыКаталогов.Каталог, ПараметрыОбмена);
		
		МассивСтрок = МассивДанных.НайтиСтроки(Новый структура("Пакет", Пакет));	
		
		Если МассивСтрок.Количество() > 0 тогда
							
			ИмяКаталога = Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьПутьДляПлатформы(ПараметрыОбмена.ПлатформаWindows, ПараметрыОбмена.КаталогНаДиске + "\properties\" + Строка(Пакет)); 
			
			РазбитаяСтруктураДанных = РазборМассиваДанныхПоТипамОбъектов(МассивСтрок);
			
			СписокСвойств 			= РазбитаяСтруктураДанных.Свойства;
			
			лМенеджерВременныхТаблиц = СформироватьВременныеТаблицыПоСвойствамПакета(ПараметрыОбмена, СписокСвойств);
			
			//Выгружаем свойства товаров 
			ЗапросСвойств = Новый Запрос;
			ЗапросСвойств.МенеджерВременныхТаблиц = лМенеджерВременныхТаблиц;
			
			ЗапросСвойств.Текст = "ВЫБРАТЬ *
			|ИЗ
			|	ВремСвойства КАК ВремСвойства
			| ГДЕ
			| ВремСвойства.ДляТоваров = ИСТИНА";
			тзнСвойств = ЗапросСвойств.Выполнить().Выгрузить();
				
			Если тзнСвойств.Количество() > 0 тогда	
				XDTOКоммерческаяИнформация 	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьXDTOКоммерческаяИнформация(ПараметрыОбмена, XDTOКоммерческаяИнформацияТип);

				XDTOКаталог 				= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOКаталогТип); 
				XDTOКаталог.Ид				= СтрокаТаблицыКаталогов.ИдКаталога;
				XDTOКаталог.ИдКлассификатора= СтрокаТаблицыКаталогов.ИдКаталога;
				XDTOКаталог.Наименование	= СтрокаТаблицыКаталогов.Каталог;
				XDTOКаталог.Описание 		= СтрокаТаблицыКаталогов.Каталог;
				XDTOКаталог.СодержитТолькоИзменения = XMLСтрока(Истина);

				
				XDTOКлассификатор 				= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOКлассификаторТип); 
				XDTOКлассификатор.Ид            = СтрокаТаблицыКаталогов.ИдКаталога;
				XDTOКлассификатор.Наименование  = СтрокаТаблицыКаталогов.Каталог;
				XDTOКлассификатор.СодержитТолькоИзменения 	= XMLСтрока(Истина);
				
				ВыгрузитьСвойстваXDTO(ПараметрыОбмена, XDTOКлассификатор, XDTOКлассификаторТип, лМенеджерВременныхТаблиц, Пакет, тзнСвойств, "Товар");
				
				XDTOКоммерческаяИнформация.Классификатор 	= XDTOКлассификатор;
				XDTOКоммерческаяИнформация.Каталог 			= XDTOКаталог;
				
				Успешно = ЗаписьИОтправкаXMLДанныхНаСайт(ПараметрыОбмена, XDTOКоммерческаяИнформация, ИмяКаталога, "import" + ?(НомерСтроки > 0 ,Строка(НомерСтроки), ""), МассивСтрок, "ВыгрузкаТоваров", Пакет);		
				
			КонецЕсли;	
			
			//Выгружаем свойства предложений 
			ЗапросСвойств = Новый Запрос;
			ЗапросСвойств.МенеджерВременныхТаблиц = лМенеджерВременныхТаблиц;
			
			ЗапросСвойств.Текст = "ВЫБРАТЬ *
			|ИЗ
			|	ВремСвойства КАК ВремСвойства
			|ГДЕ
			| ВремСвойства.ДляТоваров = ЛОЖЬ";	
			тзнСвойств = ЗапросСвойств.Выполнить().Выгрузить();
				
			Если тзнСвойств.Количество() > 0 тогда	
				
				XDTOКоммерческаяИнформация 	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьXDTOКоммерческаяИнформация(ПараметрыОбмена, XDTOКоммерческаяИнформацияТип);

				XDTOПакетПредложений						= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOПакетПредложенийТип);  
				XDTOПакетПредложений.Ид						= СтрокаТаблицыКаталогов.ИдКаталога + "#";
				XDTOПакетПредложений.Наименование			= "Пакет предложений (" + СтрокаТаблицыКаталогов.Каталог + ")";
				XDTOПакетПредложений.ИдКаталога				= СтрокаТаблицыКаталогов.ИдКаталога;
				XDTOПакетПредложений.ИдКлассификатора		= СтрокаТаблицыКаталогов.ИдКаталога;
				XDTOПакетПредложений.СодержитТолькоИзменения= XMLСтрока(Истина);
					
				XDTOКоммерческаяИнформация.ПакетПредложений = XDTOПакетПредложений;
				
				XDTOКлассификатор 				= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOКлассификаторТип); 
				XDTOКлассификатор.Ид            = СтрокаТаблицыКаталогов.ИдКаталога;
				XDTOКлассификатор.Наименование  = СтрокаТаблицыКаталогов.Каталог;
				XDTOКлассификатор.СодержитТолькоИзменения 	= XMLСтрока(Истина);
				
				ВыгрузитьСвойстваXDTO(ПараметрыОбмена, XDTOКлассификатор, XDTOКлассификаторТип, лМенеджерВременныхТаблиц, Пакет, тзнСвойств, "Предложения");
				
				XDTOКоммерческаяИнформация.Классификатор 	= XDTOКлассификатор;
				
				Успешно = ЗаписьИОтправкаXMLДанныхНаСайт(ПараметрыОбмена, XDTOКоммерческаяИнформация, ИмяКаталога, "offers" + ?(НомерСтроки > 0 ,Строка(НомерСтроки), ""), МассивСтрок, "ВыгрузкаТоваров", Пакет);		
				
			КонецЕсли;	
			
			УдалениеПакетовИРегистраций(Успешно, ПараметрыОбмена, Операция, Пакет, СтрокаТаблицыКаталогов.ИдКаталога, МассивСтрок);
				
			лМенеджерВременныхТаблиц.Закрыть();
			
		КонецЕсли;
		
		Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Завершение выгрузки пакета " + Строка(Пакет) + " каталога: " + СтрокаТаблицыКаталогов.Каталог, ПараметрыОбмена, Истина);
		
	КонецЦикла;
	
КонецПроцедуры

// Функция - формирует временные таблицы с информацией о свойствах пакета
//
// Параметры:
//  ПараметрыОбмена	 - 	 Настройки узла обмена 
//  СписокСвойств	 - 	 Список свойств пакета 
// Возвращаемое значение:
//   Менеджер временных таблиц, хранящий информацию о товарах 
Функция СформироватьВременныеТаблицыПоСвойствамПакета(ПараметрыОбмена, СписокСвойств)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Узел"	, ПараметрыОбмена.Ссылка);
	Запрос.УстановитьПараметр("ТекДата"	, ТекущаяДата());
	
	Запрос.УстановитьПараметр("СписокСвойств"	, СписокСвойств);
	Запрос.УстановитьПараметр("НастройкиСвойств", ПараметрыОбмена.НастройкаСвойствТоваровИХарактеристик);
	
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////
	//	                                                                                                ///
	//             ПАКЕТ ЗАПРОСОВ ДЛЯ ПОЛУЧЕНИЯ НОМЕНКЛАТУРЫ С ХАРАКТЕРИСТИКОЙ                         ///
	//                                                                                                ///
	////////////////////////////////////////////////////////////////////////////////////////////////////
	
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	НастройкиСвойств.Свойство,
	|	НастройкиСвойств.ВлияетНаЦену,
	|	НастройкиСвойств.ВыгружатьВХИ
	|ПОМЕСТИТЬ НастройкиСвойств
	|ИЗ
	|	&НастройкиСвойств КАК НастройкиСвойств
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СвойстваОбъектов.Ссылка КАК СвойствоНоменклатуры,
	|	ВЫБОР
	|		КОГДА СвойстваОбъектов.Б_Идентификатор = """"
	|			ТОГДА СвойстваОбъектов.Ссылка
	|		ИНАЧЕ СвойстваОбъектов.Б_Идентификатор
	|	КОНЕЦ КАК Идентификатор,
	|	СвойстваОбъектов.ВерсияДанных,
	|	СвойстваОбъектов.ПометкаУдаления,
	|	СвойстваОбъектов.Наименование КАК СвойствоНаименование,
	|	ВЫБОР
	|		КОГДА СвойстваОбъектов.НазначениеСвойства = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДляТоваров,
	|	НастройкиСвойств.ВлияетНаЦену,
	|	НастройкиСвойств.ВыгружатьВХИ
	|ПОМЕСТИТЬ ВремСвойства
	|ИЗ
	|	ПланВидовХарактеристик.СвойстваОбъектов КАК СвойстваОбъектов
	|		ЛЕВОЕ СОЕДИНЕНИЕ НастройкиСвойств КАК НастройкиСвойств
	|		ПО СвойстваОбъектов.Ссылка = НастройкиСвойств.Свойство
	|ГДЕ
	|	СвойстваОбъектов.Ссылка В(&СписокСвойств)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СвойствоНоменклатуры,
	|	ДляТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВремСвойства.СвойствоНоменклатуры КАК СвойствоНоменклатуры,
	|	ВремСвойства.Идентификатор,
	|	ВремСвойства.СвойствоНаименование,
	|	ВЫБОР
	|		КОГДА ЗначенияСвойствОбъектов.Б_Идентификатор = """"
	|				ИЛИ ЗначенияСвойствОбъектов.Б_Идентификатор ЕСТЬ NULL 
	|			ТОГДА ЗначенияСвойствОбъектов.Ссылка
	|		ИНАЧЕ ЗначенияСвойствОбъектов.Б_Идентификатор
	|	КОНЕЦ КАК ИдентификаторЗначения,
	|	ЗначенияСвойствОбъектов.Ссылка КАК Ссылка,
	|	ЗначенияСвойствОбъектов.Наименование
	|ПОМЕСТИТЬ ВремЗначенияСвойств
	|ИЗ
	|	ВремСвойства КАК ВремСвойства
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО ВремСвойства.СвойствоНоменклатуры = ЗначенияСвойствОбъектов.Владелец
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	СвойствоНоменклатуры";
	
	лМенеджерВременныхТаблиц 		= Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц 	= лМенеджерВременныхТаблиц; 
	Запрос.Текст = ТекстЗапроса;
	запрос.Выполнить();	
	
	Возврат лМенеджерВременныхТаблиц;
	
КонецФункции

Процедура ВыгрузитьСвойстваXDTO(ПараметрыОбмена, Владелец, ВладелецТип, МенеджерВременныхТаблиц, Пакет, тзнСвойств, ТипОбъекта)
	
	Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Выгрузка свойств в XML.", ПараметрыОбмена);
	
	
		Итератор = 0;
		
		XDTOСвойстваТип = Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена,  "Свойства", Истина, ВладелецТип);
		XDTOСвойства 	= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOСвойстваТип); 
		
		XDTOСвойствоТип = Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена,  "Свойство");
		
		XDTOВариантыЗначенийТип = Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена,  "ВариантыЗначений", Истина, XDTOСвойствоТип);
		XDTOСправочникТип 		= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена,  "Справочник", Истина, XDTOВариантыЗначенийТип);
		
		ЗапросЗначенийСвойств = Новый Запрос;
		ЗапросЗначенийСвойств.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;

		Для каждого ТекСвойство из тзнСвойств Цикл
		
			Итератор = Итератор + 1;
			
			лУчитываетсяВЦене = Ложь;
			
			XDTOСвойство 				= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOСвойствоТип);  
			XDTOСвойство.Ид 			= XMLСтрока(ТекСвойство.Идентификатор);
			XDTOСвойство.НомерВерсии 	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьВерсиюОбъекта(ПараметрыОбмена, ТекСвойство.ВерсияДанных, "Свойств");
			XDTOСвойство.ПометкаУдаления= XMLСтрока(ТекСвойство.ПометкаУдаления);
			XDTOСвойство.Наименование	= Лев(ТекСвойство.СвойствоНаименование, 250);
			
			XDTOСвойство.Внешний		= XMLСтрока(?(ЗначениеЗаполнено(ТекСвойство.ВыгружатьВХИ), ТекСвойство.ВыгружатьВХИ, Ложь));
			лУчитываетсяВЦене			= ?(ЗначениеЗаполнено(ТекСвойство.ВлияетНаЦену), ТекСвойство.ВлияетНаЦену, Ложь);
			XDTOСвойство.Информационное	= XMLСтрока(НЕ лУчитываетсяВЦене);
			
			Типы = ТекСвойство.СвойствоНоменклатуры.ТипЗначения.Типы();
			
			XDTOСвойство.ТипЗначений = "Строка";
			
			Если НЕ Типы.Количество() <> 1 Тогда
	
			Тип = Типы[0];
			
			Если Тип = Тип("Число") Тогда
				XDTOСвойство.ТипЗначений = "Число";
			ИначеЕсли Тип = Тип("Дата") Тогда
				XDTOСвойство.ТипЗначений = "Время";
				
			ИначеЕсли Тип = Тип("Булево") Тогда
				
				XDTOСвойство.ТипЗначений = "Справочник";
				
				XDTOВариантыЗначений = ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOВариантыЗначенийТип);  
				
					XDTOСправочник = ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOСправочникТип);  
					XDTOСправочник.ИдЗначения	= "true";
					XDTOСправочник.Значение		= "Да";
					XDTOВариантыЗначений.Справочник.Добавить(XDTOСправочник);
					
					XDTOСправочник = ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOСправочникТип);  
					XDTOСправочник.ИдЗначения	= "false";
					XDTOСправочник.Значение		= "Нет";  					
					XDTOВариантыЗначений.Справочник.Добавить(XDTOСправочник);
				
				XDTOСвойство.ВариантыЗначений = XDTOВариантыЗначений;

			Иначе
				
				Если ТипЗначенияСправочник(Тип) Тогда
					
					XDTOСвойство.ТипЗначений = "Справочник";
					
						XDTOВариантыЗначений = ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOВариантыЗначенийТип);  
						
						ОбъектПоТипу = Новый(Тип);
						ТипЗначенияСправочник = ОбъектПоТипу.Метаданные().Имя;
						
						Если ТипЗначенияСправочник = "ЗначенияСвойствОбъектов" тогда
							
								ЗапросЗначенийСвойств.Текст = "ВЫБРАТЬ *
								|ИЗ
								|	ВремЗначенияСвойств КАК ВремЗначенияСвойств
								|ГДЕ
								|	ВремЗначенияСвойств.СвойствоНоменклатуры = &Свойство";
							
							ЗапросЗначенийСвойств.УстановитьПараметр("Свойство", ТекСвойство.СвойствоНоменклатуры);  							
							ВыборкаЗначенийСвойств = ЗапросЗначенийСвойств.Выполнить().Выбрать();
							
							Пока ВыборкаЗначенийСвойств.Следующий() Цикл
								
									XDTOСправочник = ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOСправочникТип);  
									XDTOСправочник.ИдЗначения	= XMLСтрока(ВыборкаЗначенийСвойств.ИдентификаторЗначения);
									XDTOСправочник.Значение		= Лев(ВыборкаЗначенийСвойств.Наименование, 1000);
								
								XDTOВариантыЗначений.Справочник.Добавить(XDTOСправочник);
								
							КонецЦикла;
						Иначе
							
							Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Для свойства " + Строка(ТекСвойство.СвойствоНоменклатуры) + " тип значений " + ТипЗначенияСправочник + ". Значения свойств могут очень долго выгружаться(зависит от количества). Если это свойство не нужно - укажите в отборах.", ПараметрыОбмена);
							
								Запрос = Новый Запрос;
								Запрос.Текст = "ВЫБРАТЬ
								|	ПользовательскийСправочник.Ссылка КАК Объект,
								|	ПользовательскийСправочник.Наименование КАК Наименование
								|ИЗ
								|	Справочник." +  ТипЗначенияСправочник + " КАК ПользовательскийСправочник";
							
							ВыборкаЗначенийСвойств = Запрос.Выполнить().Выбрать();
							
							Пока ВыборкаЗначенийСвойств.Следующий() Цикл
							    Если ЗначениеЗаполнено(ВыборкаЗначенийСвойств.Объект) тогда
									XDTOСправочник = ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOСправочникТип);  
									XDTOСправочник.ИдЗначения	= XMLСтрока(ВыборкаЗначенийСвойств.Объект);
									XDTOСправочник.Значение		= Лев(ВыборкаЗначенийСвойств.Наименование, 1000);
									
									XDTOВариантыЗначений.Справочник.Добавить(XDTOСправочник);
								КонецЕсли;	
							КонецЦикла;
							
						КонецЕсли;	
						
					Если XDTOВариантыЗначений.Справочник.Количество() > 0 тогда	
						XDTOСвойство.ВариантыЗначений = XDTOВариантыЗначений;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если XDTOСвойство.ТипЗначений <> "Справочник" И лУчитываетсяВЦене тогда
			
			XDTOСвойство.ТипЗначений = "Справочник";

			XDTOВариантыЗначений = ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOВариантыЗначенийТип);  
			
			//Запрос вытащил сюда, чтобы не лишний раз не засорять память. Вызов этого запроса должен быть редкий.
			Запрос = Новый Запрос;
			запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ЗначенияСвойствОбъектов.Значение
			|ИЗ
			|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
			|ГДЕ
			|	ЗначенияСвойствОбъектов.Свойство = &Свойство";
			Запрос.УстановитьПараметр("Свойство",ТекСвойство.СвойствоНоменклатуры);
			ВыборкаЗначенийСвойств = Запрос.Выполнить().Выбрать();
			
			Пока ВыборкаЗначенийСвойств.Следующий() Цикл
				
				XDTOСправочник = ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOСправочникТип);  
				XDTOСправочник.ИдЗначения	= XMLСтрока(ВыборкаЗначенийСвойств.Значение);
				XDTOСправочник.Значение		= Лев(ВыборкаЗначенийСвойств.Значение, 1000);
				
				XDTOВариантыЗначений.Справочник.Добавить(XDTOСправочник);
				
			КонецЦикла;
			
			Если XDTOВариантыЗначений.Справочник.Количество() > 0 тогда	
				XDTOСвойство.ВариантыЗначений = XDTOВариантыЗначений;
			КонецЕсли;
			
		КонецЕсли;
		
		XDTOСвойство.ДляТоваров		= ?(ТекСвойство.СвойствоНоменклатуры.НазначениеСвойства = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура, XMLСтрока(Истина),  XMLСтрока(Ложь));
		
		XDTOСвойства.Свойство.Добавить(XDTOСвойство);
		
	КонецЦикла;
	
	Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Выгрузка свойств в XML завершено. Выгружено " + Строка(Итератор) + " элементов.", ПараметрыОбмена);
	
	Владелец.Свойства = XDTOСвойства;
	
КонецПроцедуры

Функция ТипЗначенияСправочник(Тип)
	
	ТипЗначенияСправочник = Ложь;
	
	Попытка
		ОбъектПоТипу = Новый(Тип);
		ТипЗначенияСправочник = Метаданные.Справочники.Содержит(ОбъектПоТипу.Метаданные());
	Исключение
	КонецПопытки;
	
	Возврат ТипЗначенияСправочник;
	
КонецФункции



			///////////////////////////////////////////////////////////////////
			//			 ВЫГРУЗКА ПОЛЬЗОВАТЕЛЬСКИХ СПРАВОЧНИКОВ             //
			/////////////////////////////////////////////////////////////////

Процедура ВыгрузитьПользовательскиеСправочникиXDTO(ПараметрыОбмена,МассивДанных, Операция)
	
	лКоличествоСтрок = МассивДанных.Количество();
	КоличествоПакетов = ?(лКоличествоСтрок > 0, МассивДанных[лКоличествоСтрок - 1].Пакет, 0); 
	Для Пакет = 1 по КоличествоПакетов Цикл
		
		Итератор = 0;
		МассивСтрок = МассивДанных.НайтиСтроки(Новый структура("Пакет", Пакет));	
		
		Если МассивСтрок.Количество() > 0 тогда
			
			Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Начало выгрузки пакета " + Строка(Пакет) + " пользовательскиих справочников", ПараметрыОбмена);
			
			ПараметрыОбмена.МояФабрикаXDTO 		= СоздатьФабрикуXDTO(ПараметрыОбмена.ФайлСхемы); 
			
			XDTOКоммерческаяИнформацияТип 		= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена,  "КоммерческаяИнформация");  
			XDTOКоммерческаяИнформация 			= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьXDTOКоммерческаяИнформация(ПараметрыОбмена, XDTOКоммерческаяИнформацияТип);
			
			XDTOПользовательскиеСправочникиТип	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена,  "ПользовательскиеСправочники", Истина, XDTOКоммерческаяИнформацияТип);
			XDTOСправочникТип					= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена,  "Справочник"); 
			
			XDTOЭлементыСправочникаТип	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена,  "ЭлементыСправочника", Истина, XDTOСправочникТип);
			XDTOЭлементСправочникаТип	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена,  "ЭлементСправочника");
			
			ТипpЗначенийРеквизитов	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена,  "ЗначенияРеквизитов", Истина, XDTOЭлементСправочникаТип);
			ТипpЗначенияРеквизита	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена,  "ЗначениеРеквизита");
			
			XDTOРеквизитыТип		= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена,  "Реквизиты", Истина, XDTOСправочникТип);
			XDTOРеквизитТип			= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена,  "Реквизит", Истина, XDTOРеквизитыТип);
			
			ТаблицаСправочников 	= ПараметрыОбмена.ВыгружаемыеПоляСправочников;
			лТаблицаСправочников 	= ТаблицаСправочников.Скопировать();
			лТаблицаСправочников.Свернуть("Справочник");
			Если лТаблицаСправочников.Количество() > 0 тогда
				
				XDTOПользовательскиеСправочники		= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOПользовательскиеСправочникиТип); 
				
				Если (ПараметрыОбмена.ВыгружатьТолькоИзменения И НЕ ПараметрыОбмена.ВыполнятьПолнуюВыгрузкуПринудительно) ИЛИ (ПараметрыОбмена.КоличествоЭлементовСправочникаВПакете <> 0) тогда
					XDTOПользовательскиеСправочники.СодержитТолькоИзменения = XMLСтрока(Истина);
				Иначе
					XDTOПользовательскиеСправочники.СодержитТолькоИзменения = XMLСтрока(Ложь);
				КонецЕсли;
			
				Для каждого ТекСпр из лТаблицаСправочников Цикл
					
					лЕстьЭлементыСправочника = Ложь;
					
					XDTOСправочник				= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOСправочникТип); 
					XDTOСправочник.Ид 			= ТекСпр.Справочник;	
					XDTOСправочник.Наименование = Метаданные.Справочники[ТекСпр.Справочник].Синоним;	
					
					лРеквезитыСпр 	= ТаблицаСправочников.НайтиСтроки(Новый Структура("Справочник", ТекСпр.Справочник));
					
					XDTOРеквизитыСправочника	= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOРеквизитыТип); 
					
					Для каждого ТекРек из лРеквезитыСпр Цикл
						
						Если ТекРек.Выгружаемо тогда
							
							XDTOРеквизитСправочника	= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOРеквизитТип); 
							
							XDTOРеквизитСправочника.Ид = ТекРек.Поле;

							Если ТекРек.Поле = "Код" тогда
								XDTOРеквизитСправочника.ТипЗначений = "Строка";	
								XDTOРеквизитСправочника.Наименование = ТекРек.Поле;
							ИначеЕсли ТекРек.Поле = "Наименование" тогда
								XDTOРеквизитСправочника.ТипЗначений = "Строка";	
								XDTOРеквизитСправочника.Наименование = ТекРек.Поле;
							ИначеЕсли ТекРек.Поле = "ПометкаУдаления" тогда
								XDTOРеквизитСправочника.ТипЗначений = "Булево";	
								XDTOРеквизитСправочника.Наименование = ТекРек.Поле;
							ИначеЕсли ТекРек.Поле = "Владелец" тогда
								XDTOРеквизитСправочника.ТипЗначений = "Строка";	
								XDTOРеквизитСправочника.Наименование = ТекРек.Поле;
							ИначеЕсли ТекРек.Поле = "Родитель" тогда
								XDTOРеквизитСправочника.ТипЗначений = "Строка";	
								XDTOРеквизитСправочника.Наименование = ТекРек.Поле;
							Иначе  
								лРеквизит 		= Метаданные.Справочники[ТекСпр.Справочник].Реквизиты[ТекРек.Поле];
								лТипыРеквизита 	= лРеквизит.Тип.Типы();
								
								XDTOРеквизитСправочника.Наименование = лРеквизит.Синоним;
								Если лТипыРеквизита.Количество() > 0 тогда
										
									лТипРеквизита = лТипыРеквизита[0];
									
									Если лТипРеквизита = Тип("Число") тогда
										XDTOРеквизитСправочника.ТипЗначений = "Число";	
									ИначеЕсли лТипРеквизита = Тип("Дата") тогда
										XDTOРеквизитСправочника.ТипЗначений = "Дата";	
									ИначеЕсли лТипРеквизита = Тип("Булево") тогда
										XDTOРеквизитСправочника.ТипЗначений = "Булево";	
									Иначе
										XDTOРеквизитСправочника.ТипЗначений = "Строка";	
									КонецЕсли;  									
								Иначе
									XDTOРеквизитСправочника.ТипЗначений = "Строка";	
								КонецЕсли;
							КонецЕсли;	
							
							Если ТекРек.ВыгружатьКакСтрока тогда
								XDTOРеквизитСправочника.ТипЗначений = "Строка";		
							КонецЕсли;
							
							XDTOРеквизитыСправочника.Реквизит.Добавить(XDTOРеквизитСправочника);
						КонецЕсли;
						
					КонецЦикла;
					
					XDTOСправочник.Реквизиты	= XDTOРеквизитыСправочника;
					
					XDTOЭлементыСправочника		= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOЭлементыСправочникаТип); 
					
					Для каждого ТекЭлСпр из МассивСтрок Цикл 
						Если ТекЭлСпр.ПользовательскийСправочник = ТекСпр.Справочник тогда
							
								лЕстьЭлементыСправочника = Истина;
								Итератор = Итератор + 1;
								
								XDTOЭлементСправочника	= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOЭлементСправочникаТип); 
								
								XDTOЭлементСправочника.Ид 			= XMLСтрока(ТекЭлСпр.Объект.Ссылка);
								XDTOЭлементСправочника.НомерВерсии 	= XMLСтрока(ТекЭлСпр.Объект.ВерсияДанных);
								
								ЗначенияРеквизитов 		= ПараметрыОбмена.МояФабрикаXDTO.Создать(ТипpЗначенийРеквизитов);
								
								Для каждого ТекРек из лРеквезитыСпр Цикл
									
									Если ТекРек.Выгружаемо тогда
										
										лЗначРек 	= ТекЭлСпр.Объект[ТекРек.Поле];
										Если ЗначениеЗаполнено(лЗначРек) тогда
											
											лЗначВХМЛ 	= ?(ТекРек.ВыгружатьКакСтрока = Ложь, XMLСтрока(лЗначРек), Строка(лЗначРек));
											Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ДобавитьЗначениеРеквизитаXDTO(ПараметрыОбмена, ЗначенияРеквизитов, ТипpЗначенияРеквизита, ТекРек.Поле, лЗначВХМЛ);
										Иначе
											Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ДобавитьЗначениеРеквизитаXDTO(ПараметрыОбмена, ЗначенияРеквизитов, ТипpЗначенияРеквизита, ТекРек.Поле, "");
										КонецЕсли;
										
									КонецЕсли;
									
								КонецЦикла;
								
								XDTOЭлементСправочника.ЗначенияРеквизитов = ЗначенияРеквизитов; 
								XDTOЭлементыСправочника.ЭлементСправочника.Добавить(XDTOЭлементСправочника);	
						КонецЕсли;	
					КонецЦикла;
					
					Если лЕстьЭлементыСправочника тогда
						XDTOСправочник.ЭлементыСправочника = XDTOЭлементыСправочника;
						
						XDTOПользовательскиеСправочники.Справочник.Добавить(XDTOСправочник);
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;	
			
			XDTOКоммерческаяИнформация.ПользовательскиеСправочники = XDTOПользовательскиеСправочники; 
			
			ИмяКаталога = Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьПутьДляПлатформы(ПараметрыОбмена.ПлатформаWindows, ПараметрыОбмена.КаталогНаДиске + "\references\" +  Строка(Пакет)); 
			
			Успешно = ЗаписьИОтправкаXMLДанныхНаСайт(ПараметрыОбмена, XDTOКоммерческаяИнформация, ИмяКаталога, "references", МассивСтрок, "ВыгрузкаПользовательскихСправочников", Пакет);		
			
			УдалениеПакетовИРегистраций(Успешно, ПараметрыОбмена, Операция, Пакет, "ПользовательскиеСправочники", МассивСтрок);
			
			Если Успешно  Или НЕ ПараметрыОбмена.ВыгружатьНаСайт тогда
				Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Выгрузка пакета " + Строка(Пакет) + " пользовательскиих справочников завершена. Выгружено " + Строка(Итератор) + " элементов.", ПараметрыОбмена);
			Иначе
				Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Выгрузка пакета " + Строка(Пакет) + " пользовательскиих справочников НЕ завершена или завершена с ошибками. НЕ Выгружено " + Строка(Итератор) + " элементов.", ПараметрыОбмена);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры 



			///////////////////////////////////////////////////////////////////
			//			 			ВЫГРУЗКА КОНТРАГЕНТОВ                   //
			/////////////////////////////////////////////////////////////////

Функция ВыгрузитьБанкXDTO(ПараметрыОбмена, банк)
	
	XDTOБанкТип				= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена, "Банк");
	XDTOАдресТип			= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена, "Адрес");
	
	XDTOБанк				= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOБанкТип);
	
	Если Не ЗначениеЗаполнено(Банк) Тогда
		Возврат XDTOБанк;
	КонецЕсли;
	
	XDTOБанк.СчетКорреспондентский 	= Банк.КоррСчет;	
	XDTOБанк.Наименование 			= Банк.Наименование;	
	XDTOБанк.СчетКорреспондентский 	= Банк.КоррСчет;
	
	Если Не ПустаяСтрока(Банк.Адрес) Тогда
		
		XDTOАдрес				= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOАдресТип);
		XDTOАдрес.Представление = Банк.Адрес;
		XDTOБанк.Адрес			= XDTOАдрес;
		
	КонецЕсли;
	
	XDTOБанк.БИК 				= Банк.Код;	
	
	Возврат XDTOБанк;
	
КонецФункции
			
Процедура ВыгрузитьБанковскийСчетXDTO(ПараметрыОбмена, Владелец, ВладелецТип, БанковскийСчет)
	
	XDTOРасчетныеСчетаТип	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена, "РасчетныеСчета", Истина, ВладелецТип);
	XDTOРасчетныйСчетТип	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена, "РасчетныйСчет"); 
	
	XDTOРасчетныеСчета		= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOРасчетныеСчетаТип); 
	
		XDTOРасчетныйСчет		= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOРасчетныйСчетТип); 
		
		XDTOРасчетныйСчет.НомерСчета		= XMLСтрока(БанковскийСчет.НомерСчета);
		XDTOРасчетныйСчет.БанкКорреспондент	= ВыгрузитьбанкXDTO(ПараметрыОбмена, БанковскийСчет.БанкДляРасчетов);     
		XDTOРасчетныйСчет.Банк				= ВыгрузитьбанкXDTO(ПараметрыОбмена, БанковскийСчет.Банк);
	   	XDTOРасчетныеСчета.РасчетныйСчет.Добавить(XDTOРасчетныйСчет);
		
	Владелец.РасчетныеСчета = XDTOРасчетныеСчета;
	
Конецпроцедуры
			
Процедура ВыгрузитьКонтрагентов(ПараметрыОбмена,МассивДанных, Операция)
	
	лКоличествоСтрок = МассивДанных.Количество();
	КоличествоПакетов = ?(лКоличествоСтрок > 0, МассивДанных[лКоличествоСтрок - 1].Пакет, 0); 
	
	Если КоличествоПакетов > 0 тогда
		
		МенеджерВременныхТаблицКонтрагентов = Новый МенеджерВременныхТаблиц;
		
		ОбщийЗапрос = Новый Запрос;
		ОбщийЗапрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблицКонтрагентов;
		
		// намименование полей для контрагента должо быть такое же как и в запросе в функции СформироватьВременныеТаблицыПоДокументам(..). Т.к. в обоих слкчаях контрагенты выгружаются одинаково.
		ОбщийЗапрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Контрагенты.Ссылка КАК Контрагент,
		|	ВЫБОР
		|		КОГДА Контрагенты.Б_Идентификатор = """"
		|			ТОГДА Контрагенты.Ссылка
		|		ИНАЧЕ Контрагенты.Б_Идентификатор
		|	КОНЕЦ КАК Идентификатор
		|ПОМЕСТИТЬ ВремКонтрагенты
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Контрагент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МассивДанных.Объект,
		|	МассивДанных.Пакет
		|ПОМЕСТИТЬ ВремМассивДанных
		|ИЗ
		|	&МассивДанных КАК МассивДанных
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВремМассивДанных.Объект КАК Объект,
		|	ВремМассивДанных.Пакет КАК Пакет,
		|	ВремКонтрагенты.Идентификатор КАК ИдентификаторКонтрагента,
		|	ВремКонтрагенты.Контрагент.ВерсияДанных КАК ВерсияДанныхКонтрагента,
		|	ВремКонтрагенты.Контрагент.ПометкаУдаления КАК ПометкаУдаленияКонтрагента,
		|	ВремКонтрагенты.Контрагент.Код КАК КодКонтрагента,
		|	ВремКонтрагенты.Контрагент.Наименование КАК НаименованиеКонтрагента,
		|	ВремКонтрагенты.Контрагент.ИНН КАК ИННКонтрагента,
		|	ВремКонтрагенты.Контрагент.КодПоОКПО КАК КодПоОКПОКонтрагента,
		|	ВремКонтрагенты.Контрагент.Комментарий КАК КомментарийКонтрагента,
		|	ВремКонтрагенты.Контрагент.КПП КАК КППКонтрагента,
		|	ВремКонтрагенты.Контрагент.НаименованиеПолное КАК НаименованиеПолноеКонтрагента,
		|	ВремКонтрагенты.Контрагент.ОсновноеКонтактноеЛицо КАК ОсновноеКонтактноеЛицоКонтрагента,
		|	ВремКонтрагенты.Контрагент.ОсновнойБанковскийСчет КАК ОсновнойБанковскийСчетКонтрагента,
		|	ВремКонтрагенты.Контрагент.ЮрФизЛицо КАК ЮрФизЛицоКонтрагента,
		|	ВремМассивДанных.Объект КАК Контрагент,
		|	ВЫБОР
		|		КОГДА ВремКонтрагенты.Контрагент.ОсновнойБанковскийСчет ССЫЛКА Справочник.БанковскиеСчета
		|				И НЕ ВремКонтрагенты.Контрагент.ОсновнойБанковскийСчет = ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОсновнойБанковскийСчетКонтрагента,
		|	""Контрагенты"" КАК ТипКонтрагента
		|ПОМЕСТИТЬ МассивДанныхСПакетами
		|ИЗ
		|	ВремМассивДанных КАК ВремМассивДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВремКонтрагенты КАК ВремКонтрагенты
		|		ПО (ВремКонтрагенты.Контрагент = ВремМассивДанных.Объект)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Пакет,
		|	Объект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВремКонтрагенты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВремМассивДанных";
		ОбщийЗапрос.УстановитьПараметр("МассивДанных",МассивДанных);
		ОбщийЗапрос.Выполнить();
		
		ПространствоИмен 	= ПараметрыОбмена.ПространствоИмен; 
		ПараметрыОбмена.МояФабрикаXDTO 		= СоздатьФабрикуXDTO(ПараметрыОбмена.ФайлСхемы); 
		
	КонецЕсли;
	
	Для Пакет = 1 по КоличествоПакетов Цикл
		
		Итератор = 0;
		
		Запрос = Новый Запрос();
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблицКонтрагентов;
		Запрос.Текст = "ВЫБРАТЬ *
		|ИЗ
		|	МассивДанныхСПакетами КАК МассивДанныхСПакетами
		|ГДЕ
		|	МассивДанныхСПакетами.Пакет В(&Пакет)";
		Запрос.УстановитьПараметр("Пакет", Пакет);
		МассивСтрок = Запрос.Выполнить().Выгрузить();
		
		Если МассивСтрок.Количество() > 0 тогда
			
			Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Начало выгрузки пакета " + Строка(Пакет) + " контрагентов", ПараметрыОбмена);
			
			XDTOКоммерческаяИнформацияТип 	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена, "КоммерческаяИнформация");  
			XDTOКоммерческаяИнформация 		= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьXDTOКоммерческаяИнформация(ПараметрыОбмена, XDTOКоммерческаяИнформацияТип); 
			
			XDTOКонтрагентыТип	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена, "Контрагенты", Истина, XDTOКоммерческаяИнформацияТип);
			XDTOКонтрагентТип	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена, "Контрагент"); 
			
			XDTOКонтрагенты	= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOКонтрагентыТип); 
			
			
			Если (ПараметрыОбмена.ВыгружатьТолькоИзменения И НЕ ПараметрыОбмена.ВыполнятьПолнуюВыгрузкуПринудительно) ИЛИ (ПараметрыОбмена.КоличествоКонтрагентовВПакете <> 0) тогда
				XDTOКонтрагенты.СодержитТолькоИзменения = XMLСтрока(Истина);
			Иначе
				XDTOКонтрагенты.СодержитТолькоИзменения = XMLСтрока(Ложь);
			КонецЕсли;
			
			Для каждого ТекЭлСпр из МассивСтрок Цикл 
			
				Итератор = Итератор + 1;

				XDTOКонтрагент = ВыгрузитьКонтрагентаXDTO(ПараметрыОбмена, XDTOКонтрагентТип,  ТекЭлСпр);
					
				XDTOКонтрагенты.Контрагент.Добавить(XDTOКонтрагент);		
			КонецЦикла;
			
			XDTOКоммерческаяИнформация.Контрагенты = XDTOКонтрагенты; 
			
			ИмяКаталога = Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьПутьДляПлатформы(ПараметрыОбмена.ПлатформаWindows, ПараметрыОбмена.КаталогНаДиске + "\contragents\" + Строка(Пакет)); 
			Успешно = ЗаписьИОтправкаXMLДанныхНаСайт(ПараметрыОбмена, XDTOКоммерческаяИнформация, ИмяКаталога, "contragents", МассивСтрок, "ВыгрузкаКонтрагентов", Пакет);		
			
			УдалениеПакетовИРегистраций(Успешно, ПараметрыОбмена, Операция, Пакет, "Контрагенты", МассивСтрок);
			
			Если Успешно Или НЕ ПараметрыОбмена.ВыгружатьНаСайт тогда
				Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Выгрузка пакета " + Строка(Пакет) + " контрагентов завершена. Выгружено " + Строка(Итератор) + " элементов.", ПараметрыОбмена);
			Иначе
				Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Выгрузка пакета " + Строка(Пакет) + " контрагентов НЕ завершена или завершена с ошибками. НЕ Выгружено " + Строка(Итератор) + " элементов.", ПараметрыОбмена);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Если КоличествоПакетов > 0 тогда
		МенеджерВременныхТаблицКонтрагентов.Закрыть();;
	КонецЕсли;

КонецПроцедуры 

Функция ВыгрузитьКонтрагентаXDTO(ПараметрыОбмена, XDTOКонтрагентТип,  СтрокаВыборки)
	
	XDTOКонтактнаяИнформацияТип 			= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена, "КонтактнаяИнформация");
	XDTOКонтактТип 							= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена, "Контакт", Истина, XDTOКонтактнаяИнформацияТип);
	
	XDTOПредставителиТип 					= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена, "Представители", Истина, XDTOКонтрагентТип);
	XDTOПредставительТип 					= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена, "Представитель");
	
	XDTOКонтрагент	= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOКонтрагентТип); 
	
	XDTOКонтрагент.Ид 				= XMLСтрока(СтрокаВыборки.ИдентификаторКонтрагента);
	XDTOКонтрагент.НомерВерсии 		= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьВерсиюОбъекта(ПараметрыОбмена, СтрокаВыборки.ВерсияДанныхКонтрагента, "Контрагентов"); 
	XDTOКонтрагент.ПометкаУдаления 	= XMLСтрока(СтрокаВыборки.ПометкаУдаленияКонтрагента);
	XDTOКонтрагент.Наименование 	= СтрокаВыборки.НаименованиеКонтрагента;
	
	лПолнНаименование = ?(СтрДлина(СтрокаВыборки.НаименованиеПолноеКонтрагента) > 250, Лев(СтрокаВыборки.НаименованиеПолноеКонтрагента, 250), СтрокаВыборки.НаименованиеПолноеКонтрагента); 
	
	Если СтрокаВыборки.ЮрФизЛицоКонтрагента 		= Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		XDTOКонтрагент.ОфициальноеНаименование		= лПолнНаименование;
	Иначе
		XDTOКонтрагент.ПолноеНаименование			= лПолнНаименование;
	КонецЕсли;
	
	XDTOКонтрагент.Роль 	= "Покупатель";
	
	XDTOКонтрагент.ИНН		= СтрокаВыборки.ИННКонтрагента;
	XDTOКонтрагент.КПП		= СтрокаВыборки.КППКонтрагента;
	XDTOКонтрагент.КодПоОКПО= СтрокаВыборки.КодПоОКПОКонтрагента;
	
	Если СтрокаВыборки.ЕстьОсновнойБанковскийСчетКонтрагента Тогда
		
		ВыгрузитьБанковскийСчетXDTO(ПараметрыОбмена, XDTOКонтрагент, XDTOКонтрагентТип, СтрокаВыборки.ОсновнойБанковскийСчетКонтрагента);

	КонецЕсли;
	
	XDTOКонтактнаяИнформация = ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOКонтактнаяИнформацияТип);
	Выборка = РегистрыСведений.КонтактнаяИнформация.Выбрать(Новый Структура("Объект", СтрокаВыборки.Контрагент));
	
	Пока Выборка.Следующий() Цикл
		
		Если СтрокаВыборки.ТипКонтрагента = "Контрагенты" тогда
			Если Выборка.Вид 		= Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента тогда
				XDTOКонтрагент.АдресРегистрации	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьАдресXDTO(ПараметрыОбмена, Выборка);
			ИначеЕсли Выборка.Вид 	= Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента тогда
				XDTOКонтрагент.Адрес= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьАдресXDTO(ПараметрыОбмена, Выборка);
			ИначеЕсли Выборка.Вид 	= Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента  тогда
				XDTOКонтактнаяИнформация.Контакт.Добавить(Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьКонтактнуюИнформациюXDTO(ПараметрыОбмена, XDTOКонтактТип, "Телефон рабочий", Выборка.Представление));
			ИначеЕсли Выборка.Вид 	= Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтрагентаДляОбменаДокументами тогда
				
				Если СокрЛП(Выборка.Представление) <> "@Mail.ru" тогда	
					XDTOКонтактнаяИнформация.Контакт.Добавить(Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьКонтактнуюИнформациюXDTO(ПараметрыОбмена, XDTOКонтактТип, "Электронная почта", Выборка.Представление));
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			Если Выборка.Вид 		= Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации тогда
				XDTOКонтрагент.АдресРегистрации	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьАдресXDTO(ПараметрыОбмена, Выборка);
			ИначеЕсли Выборка.Вид 	= Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации тогда
				XDTOКонтрагент.Адрес= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьАдресXDTO(ПараметрыОбмена, Выборка);
			ИначеЕсли Выборка.Тип 	= Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты тогда
				XDTOКонтактнаяИнформация.Контакт.Добавить(Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьКонтактнуюИнформациюXDTO(ПараметрыОбмена, XDTOКонтактТип, "Почта", Выборка.Представление));
			ИначеЕсли Выборка.Тип 	= Перечисления.ТипыКонтактнойИнформации.Телефон тогда
				XDTOКонтактнаяИнформация.Контакт.Добавить(Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьКонтактнуюИнформациюXDTO(ПараметрыОбмена, XDTOКонтактТип, "Телефон рабочий", Выборка.Представление));
			ИначеЕсли Выборка.Вид 	= Справочники.ВидыКонтактнойИнформации.ФаксОрганизации тогда
				XDTOКонтактнаяИнформация.Контакт.Добавить(Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьКонтактнуюИнформациюXDTO(ПараметрыОбмена, XDTOКонтактТип, "Факс", Выборка.Представление));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;                
	
	Если XDTOКонтактнаяИнформация.Контакт.количество() > 0 тогда
		XDTOКонтрагент.Контакты = XDTOКонтактнаяИнформация;
	КонецЕсли;
	
	XDTOПредставители = ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOПредставителиТип);
	
	ВыборкаКонтактныхЛиц = Справочники.КонтактныеЛицаКонтрагентов.Выбрать(,СтрокаВыборки.Контрагент);
	Пока ВыборкаКонтактныхЛиц.Следующий() Цикл
		
		XDTOПредставитель 				= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOПредставительТип);
		XDTOПредставитель.Отношение 	= "Контактное лицо";
		XDTOПредставитель.Ид 			= ?(ЗначениеЗаполнено(ВыборкаКонтактныхЛиц.Б_Идентификатор), XMLСтрока(ВыборкаКонтактныхЛиц.Б_Идентификатор),XMLСтрока(ВыборкаКонтактныхЛиц.Ссылка));
		XDTOПредставитель.Наименование 	= ВыборкаКонтактныхЛиц.Наименование;
		
		XDTOПредставители.Представитель.Добавить(XDTOПредставитель);
		
	КонецЦикла;
	
	Если XDTOПредставители.Представитель.количество() > 0 тогда
		XDTOКонтрагент.Представители = XDTOПредставители;
	КонецЕсли;
	
	Возврат XDTOКонтрагент;
	
КонецФункции



			///////////////////////////////////////////////////////////////////
			//			 ВЫГРУЗКА ИНФОРМЦИИ О СКИДКАХ			            //
			/////////////////////////////////////////////////////////////////


Функция СформироватьВременныеТаблицыПоИнформацииОСкидкахПакета(ПараметрыОбмена, СписокСкидок, СписокВидовДисконтныхКарт, спкНоменклатуры, спкКонтрагентов)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Узел"	, ПараметрыОбмена.Ссылка);
	Запрос.УстановитьПараметр("ТекДата"	, ТекущаяДата());
	
	Запрос.УстановитьПараметр("СписокСкидок"				, СписокСкидок);
	Запрос.УстановитьПараметр("СписокВидовДисконтныхКарт"	, СписокВидовДисконтныхКарт);
	
	Запрос.УстановитьПараметр("СписокКонтрагентов"			, спкКонтрагентов);
	Запрос.УстановитьПараметр("СписокНоменклатуры"			, спкНоменклатуры);
	
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////
	//	                                                                                                ///
	//             ПАКЕТ ЗАПРОСОВ ДЛЯ ПОЛУЧЕНИЯ НОМЕНКЛАТУРЫ С ХАРАКТЕРИСТИКОЙ                         ///
	//                                                                                                ///
	////////////////////////////////////////////////////////////////////////////////////////////////////
	
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	УстановкаСкидокНоменклатуры.Ссылка КАК Идентификатор
	               |ПОМЕСТИТЬ ВремВсеСкидки
	               |ИЗ
	               |	Документ.УстановкаСкидокНоменклатуры КАК УстановкаСкидокНоменклатуры
	               |ГДЕ
	               |	УстановкаСкидокНоменклатуры.Ссылка В(&СписокСкидок)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Идентификатор
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВидыДисконтныхКарт.Ссылка КАК Идентификатор,
	               |	ВидыДисконтныхКарт.ВерсияДанных,
	               |	ВидыДисконтныхКарт.ПометкаУдаления,
	               |	ВидыДисконтныхКарт.Наименование
	               |ПОМЕСТИТЬ ВремВидыКартЛояльности
	               |ИЗ
	               |	Справочник.ВидыДисконтныхКарт КАК ВидыДисконтныхКарт
	               |ГДЕ
	               |	ВидыДисконтныхКарт.Ссылка В(&СписокВидовДисконтныхКарт)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Идентификатор
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВремВсеСкидки.Идентификатор КАК Идентификатор,
	               |	ВремВсеСкидки.Идентификатор.ВерсияДанных КАК ВерсияДанных,
	               |	ВремВсеСкидки.Идентификатор.ПометкаУдаления КАК ПометкаУдаления,
	               |	ВЫБОР
	               |		КОГДА ВремВсеСкидки.Идентификатор.ДатаНачала <= &ТекДата
	               |				И (ВремВсеСкидки.Идентификатор.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	               |					ИЛИ КОНЕЦПЕРИОДА(ВремВсеСкидки.Идентификатор.ДатаОкончания, ДЕНЬ) >= &ТекДата)
	               |				И НЕ ВремВсеСкидки.Идентификатор В
	               |						(ВЫБРАТЬ
	               |							ОтменаСкидокНоменклатурыДокументы.УстановкаСкидокНоменклатуры
	               |						ИЗ
	               |							Документ.ОтменаСкидокНоменклатуры.Документы КАК ОтменаСкидокНоменклатурыДокументы)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК Действует,
	               |	ВремВсеСкидки.Идентификатор.Ссылка КАК Скидка,
	               |	ВремВсеСкидки.Идентификатор.Дата КАК ДатаДокумента,
	               |	ВремВсеСкидки.Идентификатор.ДатаНачала КАК ДатаНачала,
	               |	ВремВсеСкидки.Идентификатор.ДатаОкончания КАК ДатаОкончания,
	               |	ВремВсеСкидки.Идентификатор.Валюта.Наименование КАК ВалютаКод,
	               |	ВремВсеСкидки.Идентификатор.ОбщееВремяНачала КАК ОбщееВремяНачала,
	               |	ВремВсеСкидки.Идентификатор.ОбщееВремяОкончания КАК ОбщееВремяОкончания,
	               |	ВремВсеСкидки.Идентификатор.ПоДнямНедели КАК ПоДнямНедели,
	               |	ВремВсеСкидки.Идентификатор.ДляВсейНоменклатуры КАК ДляВсейНоменклатуры,
	               |	ВремВсеСкидки.Идентификатор.ДляВсехПолучателей КАК ДляВсехПолучателей,
	               |	ВремВсеСкидки.Идентификатор.ВидСкидки КАК ВидСкидки,
	               |	ВремВсеСкидки.Идентификатор.ЗначениеУсловия КАК ЗначениеУсловия,
	               |	ВремВсеСкидки.Идентификатор.ПроцентСкидкиНаценки КАК ЗначениеСкидкиНаценки,
	               |	ВремВсеСкидки.Идентификатор.ТипСкидкиНаценки КАК ТипСкидкиНаценки,
	               |	ВремВсеСкидки.Идентификатор.Условие КАК Условие,
	               |	ВремВсеСкидки.Идентификатор.ОграничениеСкидкиНаценки КАК ОграничениеСкидкиНаценки,
	               |	ВремВсеСкидки.Идентификатор.Номер КАК Номер
	               |ПОМЕСТИТЬ ВремСкидкиСПризнакомНеактивности
	               |ИЗ
	               |	ВремВсеСкидки КАК ВремВсеСкидки
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Идентификатор
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	УстановкаСкидокНоменклатурыТовары.Ссылка КАК Скидка,
	               |	ВЫБОР
	               |		КОГДА УстановкаСкидокНоменклатурыТовары.Номенклатура.Б_Идентификатор <> """"
	               |			ТОГДА УстановкаСкидокНоменклатурыТовары.Номенклатура.Б_Идентификатор
	               |		ИНАЧЕ УстановкаСкидокНоменклатурыТовары.Номенклатура.Ссылка
	               |	КОНЕЦ КАК ИдентификаторНоменклатуры,
	               |	ВЫБОР
	               |		КОГДА УстановкаСкидокНоменклатурыТовары.ХарактеристикаНоменклатуры.Б_Идентификатор <> """"
	               |			ТОГДА УстановкаСкидокНоменклатурыТовары.ХарактеристикаНоменклатуры.Б_Идентификатор
	               |		ИНАЧЕ УстановкаСкидокНоменклатурыТовары.ХарактеристикаНоменклатуры.Ссылка
	               |	КОНЕЦ КАК ИдентификаторХарактеристики,
	               |	УстановкаСкидокНоменклатурыТовары.ПроцентСкидкиНаценки КАК ЗначениеСкидкиНаценки,
	               |	УстановкаСкидокНоменклатурыТовары.ОграничениеСкидкиНаценки
	               |ПОМЕСТИТЬ ВремТоварыСкидок
	               |ИЗ
	               |	Документ.УстановкаСкидокНоменклатуры.Товары КАК УстановкаСкидокНоменклатурыТовары
	               |ГДЕ
	               |	УстановкаСкидокНоменклатурыТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийУстановкаСкидокНоменклатуры.ПоНоменклатуре)
	               |	И УстановкаСкидокНоменклатурыТовары.Ссылка В
	               |			(ВЫБРАТЬ
	               |				ВремВсеСкидки.Идентификатор
	               |			ИЗ
	               |				ВремВсеСкидки)
	               |	И УстановкаСкидокНоменклатурыТовары.Номенклатура В(&СписокНоменклатуры)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	УстановкаСкидокНоменклатурыЦеновыеГруппы.Ссылка,
	               |	ВЫБОР
	               |		КОГДА Номенклатура.Б_Идентификатор <> """"
	               |			ТОГДА Номенклатура.Б_Идентификатор
	               |		ИНАЧЕ Номенклатура.Ссылка
	               |	КОНЕЦ,
	               |	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
	               |	УстановкаСкидокНоменклатурыЦеновыеГруппы.ПроцентСкидкиНаценки,
	               |	УстановкаСкидокНоменклатурыЦеновыеГруппы.ОграничениеСкидкиНаценки
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УстановкаСкидокНоменклатуры.ЦеновыеГруппы КАК УстановкаСкидокНоменклатурыЦеновыеГруппы
	               |		ПО Номенклатура.Ссылка = УстановкаСкидокНоменклатурыЦеновыеГруппы.ЦеноваяГруппа
	               |ГДЕ
	               |	УстановкаСкидокНоменклатурыЦеновыеГруппы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийУстановкаСкидокНоменклатуры.ПоЦеновымГруппам)
	               |	И УстановкаСкидокНоменклатурыЦеновыеГруппы.Ссылка В
	               |			(ВЫБРАТЬ
	               |				ВремВсеСкидки.Идентификатор
	               |			ИЗ
	               |				ВремВсеСкидки)
	               |	И Номенклатура.Ссылка В(&СписокНоменклатуры)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Скидка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	УстановкаСкидокНоменклатурыПолучателиСкидки.Ссылка КАК Скидка,
	               |	ВЫБОР
	               |		КОГДА УстановкаСкидокНоменклатурыПолучателиСкидки.Контрагент.Б_Идентификатор <> """"
	               |			ТОГДА УстановкаСкидокНоменклатурыПолучателиСкидки.Контрагент.Б_Идентификатор
	               |		ИНАЧЕ УстановкаСкидокНоменклатурыПолучателиСкидки.Контрагент.Ссылка
	               |	КОНЕЦ КАК ИдентификаторКонтрагента,
	               |	УстановкаСкидокНоменклатурыПолучателиСкидки.Контрагент
	               |ПОМЕСТИТЬ ВремКонтрагентыСкидок
	               |ИЗ
	               |	Документ.УстановкаСкидокНоменклатуры.ПолучателиСкидки КАК УстановкаСкидокНоменклатурыПолучателиСкидки
	               |ГДЕ
	               |	УстановкаСкидокНоменклатурыПолучателиСкидки.Ссылка В
	               |			(ВЫБРАТЬ
	               |				ВремВсеСкидки.Идентификатор
	               |			ИЗ
	               |				ВремВсеСкидки)
	               |	И УстановкаСкидокНоменклатурыПолучателиСкидки.Контрагент В(&СписокКонтрагентов)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Скидка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	УстановкаСкидокНоменклатурыВремяПоДнямНедели.Ссылка КАК Скидка,
	               |	УстановкаСкидокНоменклатурыВремяПоДнямНедели.Выбран,
	               |	УстановкаСкидокНоменклатурыВремяПоДнямНедели.ДеньНедели,
	               |	УстановкаСкидокНоменклатурыВремяПоДнямНедели.ВремяНачала,
	               |	УстановкаСкидокНоменклатурыВремяПоДнямНедели.ВремяОкончания
	               |ПОМЕСТИТЬ ВремВремяПоДнямНеделиСкидок
	               |ИЗ
	               |	Документ.УстановкаСкидокНоменклатуры.ВремяПоДнямНедели КАК УстановкаСкидокНоменклатурыВремяПоДнямНедели
	               |ГДЕ
	               |	УстановкаСкидокНоменклатурыВремяПоДнямНедели.Ссылка В
	               |			(ВЫБРАТЬ
	               |				ВремВсеСкидки.Идентификатор
	               |			ИЗ
	               |				ВремВсеСкидки)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Скидка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВремВсеСкидки";
	
	лМенеджерВременныхТаблиц 		= Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц 	= лМенеджерВременныхТаблиц; 
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();	
	
	Возврат лМенеджерВременныхТаблиц;
	
КонецФункции

Процедура ВыгрузитьИнформациюОСкидках(ПараметрыОбмена,МассивДанных, Операция)
				
	СписокВидовКарт		= Новый СписокЗначений;
	спкНоменклатуры		= Новый Массив;
	спкКонтрагентов		= Новый Массив;
	
	Успешно = Ложь;
	
	ПараметрыОбмена.МояФабрикаXDTO 	= СоздатьФабрикуXDTO(ПараметрыОбмена.ФайлСхемы); 
	
	XDTOКоммерческаяИнформацияТип 	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена,  "КоммерческаяИнформация");
	
	лКоличествоСтрок = МассивДанных.Количество();
	КоличествоПакетов = ?(лКоличествоСтрок > 0, МассивДанных[лКоличествоСтрок - 1].Пакет, -1); 
	
	Для Пакет = 0 по КоличествоПакетов Цикл
		
		Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Начало выгрузки пакета " + Строка(Пакет), ПараметрыОбмена);
		
		МассивСтрок = МассивДанных.НайтиСтроки(Новый структура("Пакет", Пакет));	
		
		РазбитаяСтруктураДанных = РазборМассиваДанныхПоТипамОбъектов(МассивСтрок);
			
		Если Пакет = 0 тогда
			
			СписокВидовКарт 	= РазбитаяСтруктураДанных.ВидыДК;
			спкНоменклатуры 	= ПолучитьМассивЭлементовПоОтборуКомпоновки("Справочник.Номенклатура"			, ПараметрыОбмена.ТаблицаОтбораСкидок[0]);
			спкКонтрагентов 	= ПолучитьМассивЭлементовПоОтборуКомпоновки("Справочник.Контрагенты"			, ПараметрыОбмена.ТаблицаОтбораСкидок[1]);
			
		КонецЕсли;
		
		Если (ПараметрыОбмена.ВыгружатьТолькоИзменения И НЕ ПараметрыОбмена.ВыполнятьПолнуюВыгрузкуПринудительно) ИЛИ (ПараметрыОбмена.КоличествоТоваровВПакете <> 0) тогда
			лСодержатТолькоИзменения = Истина;
		Иначе
			лСодержатТолькоИзменения = Ложь;
		КонецЕсли;
			
		СписокСкидок 		= РазбитаяСтруктураДанных.Скидки;
		
		лМенеджерВременныхТаблиц = СформироватьВременныеТаблицыПоИнформацииОСкидкахПакета(ПараметрыОбмена, СписокСкидок, СписокВидовКарт, спкНоменклатуры, спкКонтрагентов);
		
		ИмяКаталога = Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьПутьДляПлатформы(ПараметрыОбмена.ПлатформаWindows, ПараметрыОбмена.КаталогНаДиске + "\discount\" + Строка(Пакет)); 
		
		XDTOКоммерческаяИнформация 	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьXDTOКоммерческаяИнформация(ПараметрыОбмена, XDTOКоммерческаяИнформацияТип);

		Если ПараметрыОбмена.СинхронизацияВидовКартЛояльности И Пакет = 0 тогда
			ВыгрузитьВидыКартЛояльностиXDTO(ПараметрыОбмена, XDTOКоммерческаяИнформация, XDTOКоммерческаяИнформацияТип, лМенеджерВременныхТаблиц);
		КонецЕсли;
		
		Если ПараметрыОбмена.СинхронизацияСкидок тогда
			ВыгрузитьСкидкиXDTO(ПараметрыОбмена, XDTOКоммерческаяИнформация, XDTOКоммерческаяИнформацияТип, лМенеджерВременныхТаблиц);
		КонецЕсли;
		
		лМенеджерВременныхТаблиц.Закрыть();
		
		Успешно = ЗаписьИОтправкаXMLДанныхНаСайт(ПараметрыОбмена, XDTOКоммерческаяИнформация, ИмяКаталога, "discount", МассивСтрок, "ВыгрузкаСкидок", Пакет);		
			
		Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Выгрузки пакета " + Строка(Пакет) + " завершена.", ПараметрыОбмена);
		
	КонецЦикла;			
				
КонецПроцедуры 

Процедура ВыгрузитьВидыКартЛояльностиXDTO(ПараметрыОбмена, Владелец, ВладелецТип, МенеджерВременныхТаблиц)
	
	Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Выгрузка видов карт лояльности в XML.", ПараметрыОбмена);
	Итератор = 0;
	
	XDTOВидыДисконтныхКартТип	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена,  "ВидыДисконтныхКарт", Истина, ВладелецТип);	
	XDTOВидыДисконтныхКарт 	= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOВидыДисконтныхКартТип); 
	
	XDTOВидДисконтнойКартыТип = Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена,  "ВидДисконтнойКарты");	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ *
	|ИЗ
	|	ВремВидыКартЛояльности КАК ВремВидыКартЛояльности";
	ВыборкаВидов = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаВидов.Следующий() Цикл
		
		XDTOВидДисконтнойКарты		= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOВидДисконтнойКартыТип); 
		
		XDTOВидДисконтнойКарты.Ид				= XMLСтрока(ВыборкаВидов.Идентификатор);
		XDTOВидДисконтнойКарты.НомерВерсии		= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьВерсиюОбъекта(ПараметрыОбмена, ВыборкаВидов.ВерсияДанных, "Видов карт лояльности");
		XDTOВидДисконтнойКарты.ПометкаУдаления	= XMLСтрока(ВыборкаВидов.ПометкаУдаления);
		XDTOВидДисконтнойКарты.Наименование		= XMLСтрока(ВыборкаВидов.Наименование);

		XDTOВидыДисконтныхКарт.ВидДисконтнойКарты.Добавить(XDTOВидДисконтнойКарты);
		Итератор = Итератор + 1;
		
	КонецЦикла;
	
	Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Выгрузка видов карт лояльности в XML завершено. Выгружено " + Строка(Итератор) + " элементов.", ПараметрыОбмена);
	
	Запрос = Новый Запрос("УНИЧТОЖИТЬ ВремВидыКартЛояльности");
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	Владелец.ВидыДисконтныхКарт = XDTOВидыДисконтныхКарт;
	
КонецПроцедуры

Процедура ВыгрузитьСкидкиXDTO(ПараметрыОбмена, Владелец, ВладелецТип, МенеджерВременныхТаблиц)
	
	Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Выгрузка скидок в XML.", ПараметрыОбмена);
	Итератор = 0;
	
	XDTOСкидкиТип	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена,  "Скидки", Истина, ВладелецТип);	
	XDTOСкидки 	= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOСкидкиТип); 
	
	XDTOСкидкаТип = Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена,  "ИнформацияОСкидке");	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ *
	|ИЗ
	|	ВремСкидкиСПризнакомНеактивности КАК ВремСкидкиСПризнакомНеактивности";
	ВыборкаСкидок = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаСкидок.Следующий() Цикл
		
		XDTOСкидка		= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOСкидкаТип); 
		
		XDTOСкидка.Ид				= XMLСтрока(ВыборкаСкидок.Идентификатор);
		XDTOСкидка.НомерВерсии		= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьВерсиюОбъекта(ПараметрыОбмена, ВыборкаСкидок.ВерсияДанных, "Скидок");
		XDTOСкидка.ПометкаУдаления	= XMLСтрока(ВыборкаСкидок.ПометкаУдаления);
		XDTOСкидка.Наименование		= XMLСтрока(Строка(ВыборкаСкидок.Скидка));
		
		//XDTOСкидка.Приоритет		= XMLСтрока();
		
		XDTOСкидка.Активность		= XMLСтрока(ВыборкаСкидок.Действует);
		
		Если ЗначениеЗаполнено(ВыборкаСкидок.ДатаНачала) тогда
			XDTOСкидка.ДатаНачала		= XMLСтрока(ВыборкаСкидок.ДатаНачала);
		КонецЕсли;
		Если ЗначениеЗаполнено(ВыборкаСкидок.ДатаОкончания) тогда
			XDTOСкидка.ДатаЗавершения	= XMLСтрока(ВыборкаСкидок.ДатаОкончания);
		КонецЕсли;
		
		XDTOСкидка.ДатаСозданияСкидки	= XMLСтрока(ВыборкаСкидок.ДатаДокумента);
		XDTOСкидка.ГруппаСовместногоПрименения		= "По дате создания скидки";
		
		XDTOДополнительныеПараметрыТип	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена,  "ДополнительныеПараметры", Истина, XDTOСкидкаТип);	
		XDTOДополнительныеПараметры 	= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOДополнительныеПараметрыТип); 
			
		Если ЗначениеЗаполнено(ВыборкаСкидок.ВалютаКод) тогда
			ДобавитьПараметрУсловияСкидки(ПараметрыОбмена, XDTOДополнительныеПараметры, XDTOДополнительныеПараметрыТип, "Валюта", Лев(ВыборкаСкидок.ВалютаКод, 3 ));
		КонецЕсли;

		XDTOСкидка.Значение		= XMLСтрока(ВыборкаСкидок.ЗначениеСкидкиНаценки);
		XDTOСкидка.ТипСкидки	= "Скидка (наценка) процентом";
		
		Если XDTOДополнительныеПараметры.ПараметрУсловия.Количество() > 0 тогда
			XDTOСкидка.ДополнительныеПараметры = XDTOДополнительныеПараметры;
       	КонецЕсли;
		
		Если НЕ ВыборкаСкидок.ДляВсейНоменклатуры тогда
			ВыгрузитьУточненияЗначенийСкидок(ПараметрыОбмена, XDTOСкидка, XDTOСкидкаТип, МенеджерВременныхТаблиц, ВыборкаСкидок.Скидка);
		КонецЕсли;
		
		Если НЕ ВыборкаСкидок.ДляВсехПолучателей И ВыборкаСкидок.ВидСкидки <> Перечисления.ВидыСкидок.Оптовая тогда
			
			ВыгрузитьКлиентовДляСкидок(ПараметрыОбмена, XDTOДополнительныеПараметры, XDTOДополнительныеПараметрыТип, МенеджерВременныхТаблиц, ВыборкаСкидок.Скидка,"Ограничение по клиентам");
			
		КонецЕсли;
		
		Если ВыборкаСкидок.Условие <> Перечисления.УсловияСкидкиНаценки.БезУсловий ИЛИ ВыборкаСкидок.ПоДнямНедели тогда
			ВыгрузитьУсловияСкидки(ПараметрыОбмена, XDTOСкидка, XDTOСкидкаТип, МенеджерВременныхТаблиц, ВыборкаСкидок);
		КонецЕсли;
		
		XDTOСкидки.Скидка.Добавить(XDTOСкидка);
		Итератор = Итератор + 1;
		
	КонецЦикла;
	
	Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Выгрузка скидок в XML завершено. Выгружено " + Строка(Итератор) + " элементов.", ПараметрыОбмена);
	
	Владелец.Скидки = XDTOСкидки;
	
КонецПроцедуры


/////////
 
Процедура ВыгрузитьУточненияЗначенийСкидок(ПараметрыОбмена, Владелец, ВладелецТип, МенеджерВременныхТаблиц, Скидка)
	
	XDTOУточненияЗначенийСкидокТип	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена,  "УточненияЗначенийСкидок", Истина, ВладелецТип);	
	XDTOУточненияЗначенийСкидок 	= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOУточненияЗначенийСкидокТип); 
	
	XDTOУточнениеЗначенияСкидкиТип	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена,  "УточнениеЗначенияСкидки");	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ *
	|ИЗ
	|	ВремТоварыСкидок КАК ВремТоварыСкидок	
	| ГДЕ
	|ВремТоварыСкидок.Скидка = &Скидка";
	Запрос.УстановитьПараметр("Скидка", Скидка);
	
	ВыборкаЗначений = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЗначений.Следующий() Цикл
		
		XDTOУточнениеЗначенияСкидки 			= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOУточнениеЗначенияСкидкиТип); 
		
		XDTOУточнениеЗначенияСкидки.Товар 		= XMLСтрока(ВыборкаЗначений.ИдентификаторНоменклатуры);
		
		Если ЗначениеЗаполнено(ВыборкаЗначений.ИдентификаторХарактеристики) тогда
			XDTOУточнениеЗначенияСкидки.Предложение = XMLСтрока(ВыборкаЗначений.ИдентификаторНоменклатуры) + "#" + XMLСтрока(ВыборкаЗначений.ИдентификаторХарактеристики); 
		КонецЕсли;
				
		XDTOУточнениеЗначенияСкидки.Значение 	= XMLСтрока(ВыборкаЗначений.ЗначениеСкидкиНаценки);
		 
		XDTOУточненияЗначенийСкидок.УточнениеЗначенияСкидки.Добавить(XDTOУточнениеЗначенияСкидки);
		
	КонецЦикла;
	
	Если XDTOУточненияЗначенийСкидок.УточнениеЗначенияСкидки.Количество() > 0 тогда
		Владелец.УточненияЗначенийСкидок = XDTOУточненияЗначенийСкидок;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьПредложенийСегментаДляСкидок(ПараметрыОбмена, Владелец, ВладелецТип, МенеджерВременныхТаблиц, Сегмент, Наименование)
	
	XDTOПараметрУсловияТип	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена,  "ПараметрУсловия");	
	XDTOПараметрУсловия 	= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOПараметрУсловияТип); 
	
	XDTOПараметрУсловия.Наименование 	= Наименование;	
	
	XDTOПредложенияТип	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена,  "Предложения", Истина, XDTOПараметрУсловияТип);	
	XDTOПредложения 	= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOПредложенияТип); 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ТекстЗапроса = "ВЫБРАТЬ *
	|ИЗ
	|	ВремСегментыНоменклатуры КАК ВремСегментыНоменклатуры
	| ГДЕ
	|ВремСегментыНоменклатуры.Сегмент = &Сегмент";
	Запрос.УстановитьПараметр("Сегмент", Сегмент);
	
	Запрос.Текст = ТекстЗапроса;
	
	тзнТоваров = Запрос.Выполнить().Выгрузить();
	тзнТоваров.Свернуть("ИдентификаторНоменклатуры, ИдентификаторХарактеристики");
	
	Для каждого ТекСтрока из тзнТоваров Цикл
		
		Если ЗначениеЗаполнено(ТекСтрока.ИдентификаторХарактеристики) тогда
			лИд 	= XMLСтрока(ТекСтрока.ИдентификаторНоменклатуры) + "#" + XMLСтрока(ТекСтрока.ИдентификаторХарактеристики); 
		Иначе
			лИд 	= XMLСтрока(ТекСтрока.ИдентификаторНоменклатуры); 
		КонецЕсли;
		
		XDTOПредложения.Предложение.Добавить(лИд);
		
	КонецЦикла;
	
	Если XDTOПредложения.Предложение.количество() > 0 тогда
		XDTOПараметрУсловия.Предложения = XDTOПредложения;
	КонецЕсли;

	Владелец.ПараметрУсловия.Добавить(XDTOПараметрУсловия);	
	
КонецПроцедуры

Процедура ВыгрузитьУсловияСкидки(ПараметрыОбмена, Владелец, ВладелецТип, МенеджерВременныхТаблиц, СтрокаСкидки)
	
	XDTOУсловияТип	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена,  "Условия", Истина, ВладелецТип);	
	XDTOУсловия		= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOУсловияТип); 
	
	XDTOУсловиеТип	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена,  "Условие", Истина, XDTOУсловияТип);	
	
	Если СтрокаСкидки.Условие <> Перечисления.УсловияСкидкиНаценки.БезУсловий тогда
		
		XDTOДополнительныеПараметрыТип	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена,  "ДополнительныеПараметры", Истина, XDTOУсловиеТип);	
		XDTOДополнительныеПараметры 	= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOДополнительныеПараметрыТип); 
		
		XDTOУсловие 				= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOУсловиеТип); 
		XDTOУсловие.Наименование	= XMLСтрока(Строка(СтрокаСкидки.Скидка));
		
		Если СтрокаСкидки.Условие = Перечисления.УсловияСкидкиНаценки.ПоВидуДисконтныхКарт  тогда
			
			XDTOУсловие.ТипУсловия = "За наличие вида дисконтной карты";	
			
			ДобавитьПараметрУсловияСкидки(ПараметрыОбмена, XDTOДополнительныеПараметры, XDTOДополнительныеПараметрыТип, "Вид дисконтной карты", XMLСтрока(СтрокаСкидки.ЗначениеУсловия));
			
		ИначеЕсли СтрокаСкидки.Условие = Перечисления.УсловияСкидкиНаценки.ПоДисконтнойКарте  тогда
			
			XDTOУсловие.ТипУсловия = "За наличие дисконтной карты";	
			
			ДобавитьПараметрУсловияСкидки(ПараметрыОбмена, XDTOДополнительныеПараметры, XDTOДополнительныеПараметрыТип, "Дисконтная карта", XMLСтрока(СтрокаСкидки.ЗначениеУсловия));
			
		ИначеЕсли СтрокаСкидки.Условие = Перечисления.УсловияСкидкиНаценки.ПоСуммеДокумента  тогда
			
			XDTOУсловие.ТипУсловия = "За разовый объем продаж";	
			
			ДобавитьПараметрУсловияСкидки(ПараметрыОбмена, XDTOДополнительныеПараметры, XDTOДополнительныеПараметрыТип, "Мерило для оценки", "Сумма");
			ДобавитьПараметрУсловияСкидки(ПараметрыОбмена, XDTOДополнительныеПараметры, XDTOДополнительныеПараметрыТип, "Область ограничения", "В документе");
			ДобавитьПараметрУсловияСкидки(ПараметрыОбмена, XDTOДополнительныеПараметры, XDTOДополнительныеПараметрыТип, "Тип сравнения", "Не менее");
			ДобавитьПараметрУсловияСкидки(ПараметрыОбмена, XDTOДополнительныеПараметры, XDTOДополнительныеПараметрыТип, "Значение условия ограничения", XMLСтрока(СтрокаСкидки.ЗначениеУсловия));
			
			Если ЗначениеЗаполнено(СтрокаСкидки.ВалютаКод) тогда
				ДобавитьПараметрУсловияСкидки(ПараметрыОбмена, XDTOДополнительныеПараметры, XDTOДополнительныеПараметрыТип, "Валюта", Лев(СтрокаСкидки.ВалютаКод, 3));
			КонецЕсли;
			
		ИначеЕсли СтрокаСкидки.Условие = Перечисления.УсловияСкидкиНаценки.ПоКоличествуТовара  тогда
			
			XDTOУсловие.ТипУсловия = "За разовый объем продаж";	
			
			ДобавитьПараметрУсловияСкидки(ПараметрыОбмена, XDTOДополнительныеПараметры, XDTOДополнительныеПараметрыТип, "Мерило для оценки", "Количество");
			ДобавитьПараметрУсловияСкидки(ПараметрыОбмена, XDTOДополнительныеПараметры, XDTOДополнительныеПараметрыТип, "Область ограничения", "В строке");
			ДобавитьПараметрУсловияСкидки(ПараметрыОбмена, XDTOДополнительныеПараметры, XDTOДополнительныеПараметрыТип, "Тип сравнения", "Не менее");
			ДобавитьПараметрУсловияСкидки(ПараметрыОбмена, XDTOДополнительныеПараметры, XDTOДополнительныеПараметрыТип, "Значение условия ограничения", XMLСтрока(СтрокаСкидки.ЗначениеУсловия));
			
		КонецЕсли;	
		
		Если XDTOДополнительныеПараметры.ПараметрУсловия.Количество() > 0 тогда
			XDTOУсловие.ДополнительныеПараметры = XDTOДополнительныеПараметры;
		КонецЕсли;
		
		XDTOУсловия.Условие.Добавить(XDTOУсловие);
		
	КонецЕсли;
	
	
	Если СтрокаСкидки.ПоДнямНедели тогда
		
		XDTOДополнительныеПараметрыТип	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена,  "ДополнительныеПараметры", Истина, XDTOУсловиеТип);	
		XDTOДополнительныеПараметры 	= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOДополнительныеПараметрыТип); 
		
		XDTOУсловие 				= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOУсловиеТип); 
		XDTOУсловие.Наименование	= XMLСтрока(Строка(СтрокаСкидки.Скидка) + " по дням недели");
		
		XDTOУсловие.ТипУсловия = "За время продажи";	
		
		ВыгрузитьВремяПродажДляУсловийСкидок(ПараметрыОбмена, XDTOДополнительныеПараметры, XDTOДополнительныеПараметрыТип, МенеджерВременныхТаблиц, СтрокаСкидки.Скидка, "Ограничение по времени продаж");
		
		Если XDTOДополнительныеПараметры.ПараметрУсловия.Количество() > 0 тогда
			XDTOУсловие.ДополнительныеПараметры = XDTOДополнительныеПараметры;
		КонецЕсли;
		
		XDTOУсловия.Условие.Добавить(XDTOУсловие);
		
	КонецЕсли;
	
	Если XDTOУсловия.Условие.Количество() > 0 тогда
		Владелец.Условия = XDTOУсловия;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПараметрУсловияСкидки(ПараметрыОбмена, Владелец, ВладелецТип, НаименованиеУсловия, ЗначениеУсловия)

	XDTOПараметрУсловияТип	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена,  "ПараметрУсловия");	
	XDTOПараметрУсловия 	= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOПараметрУсловияТип); 
	
	XDTOПараметрУсловия.Наименование 	= НаименованиеУсловия;	
	XDTOПараметрУсловия.Значение		= ЗначениеУсловия;	
	
	Владелец.ПараметрУсловия.Добавить(XDTOПараметрУсловия);	
	
КонецПроцедуры

Процедура ВыгрузитьВремяПродажДляУсловийСкидок(ПараметрыОбмена, Владелец, ВладелецТип, МенеджерВременныхТаблиц, Скидка, Наименование)
	
	XDTOПараметрУсловияТип	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена,  "ПараметрУсловия");	
	XDTOПараметрУсловия 	= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOПараметрУсловияТип); 
	
	XDTOПараметрУсловия.Наименование 	= Наименование;	
	
	XDTOГрафикВыполненияТип	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена,  "ГрафикВыполнения", Истина, XDTOПараметрУсловияТип);	
	XDTOГрафикВыполнения 	= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOГрафикВыполненияТип); 
	
	XDTOГрафикТип	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена,  "График", Истина, XDTOГрафикВыполненияТип);	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ *
	|ИЗ
	|	ВремВремяПоДнямНеделиСкидок КАК ВремВремяПоДнямНеделиСкидок
	| ГДЕ
	|ВремВремяПоДнямНеделиСкидок.Скидка = &Скидка
	|И ВремВремяПоДнямНеделиСкидок.Выбран";
	Запрос.УстановитьПараметр("Скидка", Скидка);
	
	ВыборкаЗначений = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЗначений.Следующий() Цикл
		
		XDTOГрафик 	= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOГрафикТип); 
		
		лНомерДня = 1;
		
		Если ВыборкаЗначений.ДеньНедели = Перечисления.ДниНедели.Вторник тогда
			лНомерДня = 2;
		ИначеЕсли ВыборкаЗначений.ДеньНедели = Перечисления.ДниНедели.Среда тогда
			лНомерДня = 3;
		ИначеЕсли ВыборкаЗначений.ДеньНедели = Перечисления.ДниНедели.Четверг тогда
			лНомерДня = 4;
		ИначеЕсли ВыборкаЗначений.ДеньНедели = Перечисления.ДниНедели.Пятница тогда
			лНомерДня = 5;
		ИначеЕсли ВыборкаЗначений.ДеньНедели = Перечисления.ДниНедели.Суббота тогда
			лНомерДня = 6;
		ИначеЕсли ВыборкаЗначений.ДеньНедели = Перечисления.ДниНедели.Воскресенье тогда
			лНомерДня = 7;
		КонецЕсли;
		
		XDTOГрафик.НомерДня 		= лНомерДня;
		XDTOГрафик.ВремяНачала 		= XMLСтрока(ВыборкаЗначений.ВремяНачала);
		XDTOГрафик.ВремяЗавершения 	= XMLСтрока(ВыборкаЗначений.ВремяОкончания);
		
		XDTOГрафикВыполнения.График.Добавить(XDTOГрафик);
		
	КонецЦикла;
	
	Если XDTOГрафикВыполнения.График.Количество() > 0 тогда
		XDTOПараметрУсловия.ГрафикВыполнения = XDTOГрафикВыполнения;	
	КонецЕсли;

	Владелец.ПараметрУсловия.Добавить(XDTOПараметрУсловия);	
	
КонецПроцедуры

Процедура ВыгрузитьКлиентовДляСкидок(ПараметрыОбмена, Владелец, ВладелецТип, МенеджерВременныхТаблиц, Скидка, Наименование)
	
	XDTOПараметрУсловияТип	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена,  "ПараметрУсловия", Истина, ВладелецТип);	
	XDTOПараметрУсловия 	= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOПараметрУсловияТип); 
	
	XDTOПараметрУсловия.Наименование 	= Наименование;	
	
	XDTOКонтрагентыТип	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена,  "Контрагенты", Истина, XDTOПараметрУсловияТип);	
	XDTOКонтрагенты 	= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOКонтрагентыТип); 
	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ТекстЗапроса = "ВЫБРАТЬ *
	|ИЗ
	|	ВремКонтрагентыСкидок КАК ВремКонтрагентыСкидок
	| ГДЕ
	|ВремКонтрагентыСкидок.Скидка = &Скидка";
	Запрос.УстановитьПараметр("Скидка", Скидка);
	
	Запрос.Текст = ТекстЗапроса;
	
	тзнТоваров = Запрос.Выполнить().Выгрузить();
	тзнТоваров.Свернуть("ИдентификаторКонтрагента");
	
	Для каждого ТекСтрока из тзнТоваров Цикл
		
		XDTOКонтрагенты.Контрагент.Добавить(XMLСтрока(ТекСтрока.ИдентификаторКонтрагента));
		
	КонецЦикла;
	
	Если XDTOКонтрагенты.Контрагент.Количество() > 0 тогда
		XDTOПараметрУсловия.Контрагенты = XDTOКонтрагенты;	
	КонецЕсли;

	Владелец.ПараметрУсловия.Добавить(XDTOПараметрУсловия);	
	
КонецПроцедуры



			///////////////////////////////////////////////////////////////////
			//			 ВЫГРУЗКА ИНФОРМЦИИ О КАРТАХ ЛОЯЛЬНОСТИ	            //
			/////////////////////////////////////////////////////////////////

Функция СформироватьВременныеТаблицыПоКартамЛояльностиПакета(ПараметрыОбмена, СписокКартЛояльности, СписокВидовКарт)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Узел"	, ПараметрыОбмена.Ссылка);
	Запрос.УстановитьПараметр("ТекДата"	, ТекущаяДата());
	
	Запрос.УстановитьПараметр("СписокКартЛояльности", СписокКартЛояльности);
	Запрос.УстановитьПараметр("СписокВидовКарт"		, СписокВидовКарт);

	////////////////////////////////////////////////////////////////////////////////////////////////////////
	//	                                                                                                ///
	//             ПАКЕТ ЗАПРОСОВ ДЛЯ ПОЛУЧЕНИЯ НОМЕНКЛАТУРЫ С ХАРАКТЕРИСТИКОЙ                         ///
	//                                                                                                ///
	////////////////////////////////////////////////////////////////////////////////////////////////////
	
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	КартыЛояльности.ВладелецКарты КАК Контрагент,
	|	КартыЛояльности.КодКарты,
	|	КартыЛояльности.ВидДисконтнойКарты КАК ВидКарты,
	|	КартыЛояльности.Ссылка КАК Идентификатор,
	|	КартыЛояльности.Наименование,
	|	КартыЛояльности.ВерсияДанных,
	|	КартыЛояльности.ПометкаУдаления,
	|	КартыЛояльности.ВладелецКарты,
	|	ВЫБОР
	|		КОГДА КартыЛояльности.ВладелецКарты.Б_Идентификатор <> """"
	|			ТОГДА КартыЛояльности.ВладелецКарты.Б_Идентификатор
	|		ИНАЧЕ КартыЛояльности.ВладелецКарты
	|	КОНЕЦ КАК ИдентификаторКонтрагента,
	|	КартыЛояльности.ВладелецКарты.ВерсияДанных КАК ВерсияДанныхКонтрагента,
	|	КартыЛояльности.ВладелецКарты.ПометкаУдаления КАК ПометкаУдаленияКонтрагента,
	|	КартыЛояльности.ВладелецКарты.Код КАК КодКонтрагента,
	|	КартыЛояльности.ВладелецКарты.Наименование КАК НаименованиеКонтрагента,
	|	КартыЛояльности.ВладелецКарты.ИНН КАК ИННКонтрагента,
	|	КартыЛояльности.ВладелецКарты.КодПоОКПО КАК КодПоОКПОКонтрагента,
	|	КартыЛояльности.ВладелецКарты.Комментарий КАК КомментарийКонтрагента,
	|	КартыЛояльности.ВладелецКарты.КПП КАК КППКонтрагента,
	|	КартыЛояльности.ВладелецКарты.НаименованиеПолное КАК НаименованиеПолноеКонтрагента,
	|	КартыЛояльности.ВладелецКарты.ОсновноеКонтактноеЛицо КАК ОсновноеКонтактноеЛицоКонтрагента,
	|	КартыЛояльности.ВладелецКарты.ОсновнойБанковскийСчет КАК ОсновнойБанковскийСчетКонтрагента,
	|	КартыЛояльности.ВладелецКарты.ЮрФизЛицо КАК ЮрФизЛицоКонтрагента,
	|   ""Контрагенты"" КАК ТипКонтрагента,
	|	ВЫБОР
	|		КОГДА КартыЛояльности.ВладелецКарты.ОсновнойБанковскийСчет ССЫЛКА Справочник.БанковскиеСчета
	|				И НЕ КартыЛояльности.ВладелецКарты.ОсновнойБанковскийСчет = ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОсновнойБанковскийСчетКонтрагента
	|ПОМЕСТИТЬ ВремКартыЛояльности
	|ИЗ
	|	Справочник.ИнформационныеКарты КАК КартыЛояльности
	|ГДЕ
	|	КартыЛояльности.Ссылка В(&СписокКартЛояльности)
	|	И КартыЛояльности.ВладелецКарты ССЫЛКА Справочник.Контрагенты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВидыКартЛояльности.Ссылка КАК Идентификатор,
	|	ВидыКартЛояльности.ВерсияДанных,
	|	ВидыКартЛояльности.Наименование,
	|	ВидыКартЛояльности.ПометкаУдаления
	|ПОМЕСТИТЬ ВремВидыКартЛояльности
	|ИЗ
	|	Справочник.ВидыДисконтныхКарт КАК ВидыКартЛояльности
	|ГДЕ
	|	ВидыКартЛояльности.Ссылка В(&СписокВидовКарт)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор";	
	
	лМенеджерВременныхТаблиц 		= Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц 	= лМенеджерВременныхТаблиц; 
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();	
	
	Возврат лМенеджерВременныхТаблиц;
	
КонецФункции

Процедура ВыгрузитьИнформациюОКартахЛояльности(ПараметрыОбмена,МассивДанных, Операция)
				
	СписокВидовКарт		= Новый СписокЗначений;
	Успешно = Ложь;
	
	ПараметрыОбмена.МояФабрикаXDTO 	= СоздатьФабрикуXDTO(ПараметрыОбмена.ФайлСхемы); 
	
	XDTOКоммерческаяИнформацияТип 	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена,  "КоммерческаяИнформация");
	
	лКоличествоСтрок = МассивДанных.Количество();
	КоличествоПакетов = ?(лКоличествоСтрок > 0, МассивДанных[лКоличествоСтрок - 1].Пакет, -1); 
	
	Для Пакет = 0 по КоличествоПакетов Цикл
		
		Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Начало выгрузки пакета " + Строка(Пакет), ПараметрыОбмена);
		
		МассивСтрок = МассивДанных.НайтиСтроки(Новый структура("Пакет", Пакет));	
		
		РазбитаяСтруктураДанных = РазборМассиваДанныхПоТипамОбъектов(МассивСтрок);
			
		Если Пакет = 0 тогда
			СписокВидовКарт 	= РазбитаяСтруктураДанных.ВидыДК;	
		КонецЕсли;
		
		Если (ПараметрыОбмена.ВыгружатьТолькоИзменения И НЕ ПараметрыОбмена.ВыполнятьПолнуюВыгрузкуПринудительно) ИЛИ (ПараметрыОбмена.КоличествоТоваровВПакете <> 0) тогда
			лСодержатТолькоИзменения = Истина;
		Иначе
			лСодержатТолькоИзменения = Ложь;
		КонецЕсли;
			
		СписокКартЛояльности 		= РазбитаяСтруктураДанных.КартыЛояльности;
		
		лМенеджерВременныхТаблиц = СформироватьВременныеТаблицыПоКартамЛояльностиПакета(ПараметрыОбмена, СписокКартЛояльности, СписокВидовКарт);
		
		ИмяКаталога = ?(Пакет > 0, ПараметрыОбмена.КаталогНаДиске + "\" + Строка(Пакет), ПараметрыОбмена.КаталогНаДиске); 
		ИмяКаталога = Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьПутьДляПлатформы(ПараметрыОбмена.ПлатформаWindows, ПараметрыОбмена.КаталогНаДиске + "\discountCard\" + Строка(Пакет)); 
				
		XDTOКоммерческаяИнформация 	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьXDTOКоммерческаяИнформация(ПараметрыОбмена, XDTOКоммерческаяИнформацияТип);

		Если ПараметрыОбмена.СинхронизацияВидовКартЛояльности И Пакет = 0 тогда
			ВыгрузитьВидыКартЛояльностиXDTO(ПараметрыОбмена, XDTOКоммерческаяИнформация, XDTOКоммерческаяИнформацияТип, лМенеджерВременныхТаблиц);
		КонецЕсли;
		
		Если ПараметрыОбмена.СинхронизацияКартЛояльности тогда
			ВыгрузитьКартыЛояльностиXDTO(ПараметрыОбмена, XDTOКоммерческаяИнформация, XDTOКоммерческаяИнформацияТип, лМенеджерВременныхТаблиц);
		КонецЕсли;

		
		лМенеджерВременныхТаблиц.Закрыть();
		
		Успешно = ЗаписьИОтправкаXMLДанныхНаСайт(ПараметрыОбмена, XDTOКоммерческаяИнформация, ИмяКаталога, "discountCard", МассивСтрок, "ВыгрузкаКартЛояльности", Пакет);		
				
			
		Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Выгрузки пакета " + Строка(Пакет) + " завершена.", ПараметрыОбмена);
		
	КонецЦикла;			
				
КонецПроцедуры 

Процедура ВыгрузитьКартыЛояльностиXDTO(ПараметрыОбмена, Владелец, ВладелецТип, МенеджерВременныхТаблиц)
	
	Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Выгрузка карт лояльности в XML.", ПараметрыОбмена);
	Итератор = 0;
	
	XDTOДисконтныеКартыТип	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена,  "ДисконтныеКарты", Истина, ВладелецТип);	
	XDTOДисконтныеКарты 	= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOДисконтныеКартыТип); 
	
	XDTOДисконтнаяКартаТип 	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена,  "ДисконтнаяКарта");	
	
	XDTOКонтрагентТип		= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена, "Контрагент", Истина, XDTOДисконтнаяКартаТип); 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ *
	|ИЗ
	|	ВремКартыЛояльности КАК ВремКартыЛояльности";
	ВыборкаКарт = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаКарт.Следующий() Цикл
		
		
		XDTOДисконтнаяКарта					= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOДисконтнаяКартаТип); 
		
		XDTOДисконтнаяКарта.Ид					= XMLСтрока(ВыборкаКарт.Идентификатор) + "_" +XMLСтрока(ВыборкаКарт.Контрагент);
		XDTOДисконтнаяКарта.НомерВерсии			= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьВерсиюОбъекта(ПараметрыОбмена, ВыборкаКарт.ВерсияДанных, "Карт лояльности");
		XDTOДисконтнаяКарта.ПометкаУдаления		= XMLСтрока(ВыборкаКарт.ПометкаУдаления);
		XDTOДисконтнаяКарта.Наименование		= XMLСтрока(ВыборкаКарт.Наименование);
		XDTOДисконтнаяКарта.ВидДисконтнойКарты	= XMLСтрока(ВыборкаКарт.ВидКарты);
		XDTOДисконтнаяКарта.Штрихкод			= XMLСтрока(ВыборкаКарт.КодКарты);
		
		Если  ЗначениеЗаполнено(ВыборкаКарт.Контрагент) тогда
			XDTOДисконтнаяКарта.Контрагент			= ВыгрузитьКонтрагентаXDTO(ПараметрыОбмена, XDTOКонтрагентТип,  ВыборкаКарт);
		КонецЕсли;
		
		XDTOДисконтныеКарты.ДисконтнаяКарта.Добавить(XDTOДисконтнаяКарта);
		
		Итератор = Итератор + 1;
		
	КонецЦикла;
	
	Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Выгрузка карт лояльности в XML завершено. Выгружено " + Строка(Итератор) + " элементов.", ПараметрыОбмена);
	
	Если XDTOДисконтныеКарты.ДисконтнаяКарта.Количество() > 0 тогда
		Владелец.ДисконтныеКарты = XDTOДисконтныеКарты;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьМассивЭлементовПоОтборуКомпоновки(Объект, Отбор) Экспорт
	
	Результат = Новый Массив;
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = 	"ВЫБРАТЬ
	|	Объект.Ссылка КАК Объект
	|ИЗ
	|	" + Объект + " КАК Объект
	|";
	
	лУсловие = "";
	                             
	Если Отбор.ВидСравнения = ВидСравнения.Равно тогда
		лУсловие = "Объект.Ссылка = &П";
	ИначеЕсли Отбор.ВидСравнения = ВидСравнения.НеРавно тогда
		лУсловие = "Объект.Ссылка <> &П";
	ИначеЕсли Отбор.ВидСравнения = ВидСравнения.ВСписке тогда
		лУсловие = "Объект.Ссылка В (&П)";
	ИначеЕсли Отбор.ВидСравнения = ВидСравнения.НеВСписке тогда
		лУсловие = "НЕ Объект.Ссылка В (&П)";
	ИначеЕсли Отбор.ВидСравнения = ВидСравнения.ВСпискеПоИерархии ИЛИ Отбор.ВидСравнения = ВидСравнения.ВИерархии тогда
		лУсловие = "Объект.Ссылка В ИЕРАРХИИ (&П)";
	ИначеЕсли Отбор.ВидСравнения = ВидСравнения.НеВСпискеПоИерархии ИЛИ Отбор.ВидСравнения = ВидСравнения.НеВИерархии тогда
		лУсловие = "НЕ Объект.Ссылка В ИЕРАРХИИ (&П)";
	КонецЕсли;
	
	
	Если Отбор.Использование = Ложь ИЛИ лУсловие = "" тогда
		
		Запрос.Текст = ТекстЗапроса; 
		
	Иначе
		
		Запрос.Текст = ТекстЗапроса + "
		|ГДЕ 
		|" + лУсловие;
		Запрос.УстановитьПараметр("П", Отбор.Значение);	
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
	
	Возврат Результат; 
	
КонецФункции


 
			///////////////////////////////////////////////////////////////////
			//			 			ВЫГРУЗКА ДОКУМЕНТОВ                     //
			/////////////////////////////////////////////////////////////////

Функция СформироватьВременныеТаблицыПоДокументам(ПараметрыОбмена, МассивДанных)
	
	ОбщийЗапрос = Новый Запрос;
	ОбщийЗапрос.УстановитьПараметр("МассивДанных", МассивДанных);
	ОбщийЗапрос.УстановитьПараметр("НадоВыгружатьОтгрузки", ПараметрыОбмена.ВыгрузкаОтгрузок);
	
	МенеджерВременныхТаблицДокументов 	= Новый МенеджерВременныхТаблиц;
	ОбщийЗапрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблицДокументов;
	
	// наименование полей для контрагента должо быть такое же как и в запросе в процедуры ВыгрузитьКонтрагентовВXML(..). Т.к. в обоих случаях контрагенты выгружаются одинаково.
	ОбщийЗапрос.Текст = "ВЫБРАТЬ
	|	МассивДанных.Объект КАК Объект,
	|	МассивДанных.Пакет
	|ПОМЕСТИТЬ ВремМассивДанных
	|ИЗ
	|	&МассивДанных КАК МассивДанных
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.Б_Идентификатор = """"
	|			ТОГДА РеализацияТоваровУслуг.Ссылка
	|		ИНАЧЕ РеализацияТоваровУслуг.Б_Идентификатор
	|	КОНЕЦ КАК Идентификатор,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.Сделка.Б_Идентификатор = """"
	|			ТОГДА ВЫБОР
	|					КОГДА РеализацияТоваровУслуг.Сделка.НомерВходящегоДокументаЭлектронногоОбмена = """"
	|						ТОГДА РеализацияТоваровУслуг.Сделка.Ссылка
	|					ИНАЧЕ РеализацияТоваровУслуг.Сделка.НомерВходящегоДокументаЭлектронногоОбмена
	|				КОНЕЦ
	|		ИНАЧЕ РеализацияТоваровУслуг.Сделка.Б_Идентификатор
	|	КОНЕЦ КАК СделкаИдентификатор,
	|	РеализацияТоваровУслуг.Ссылка КАК Объект,
	|	РеализацияТоваровУслуг.ВерсияДанных,
	|	РеализацияТоваровУслуг.ПометкаУдаления,
	|	РеализацияТоваровУслуг.Номер,
	|	РеализацияТоваровУслуг.Дата,
	|	РеализацияТоваровУслуг.Б_Идентификатор КАК НомерССайта,
	|	РеализацияТоваровУслуг.Б_ДатаДокумента КАК ДатаССайта,
	|	РеализацияТоваровУслуг.Контрагент,
	|	РеализацияТоваровУслуг.ВалютаДокумента.Наименование КАК ВалютаКод,
	|	РеализацияТоваровУслуг.УчитыватьНДС,
	|	РеализацияТоваровУслуг.СуммаВключаетНДС,
	|	РеализацияТоваровУслуг.КурсВзаиморасчетов,
	|	РеализацияТоваровУслуг.СуммаДокумента,
	|	РеализацияТоваровУслуг.Комментарий,
	|	""Отгрузка"" КАК ТипДокумента,
	|	ВремМассивДанных.Пакет КАК Пакет,
	|	РеализацияТоваровУслуг.Проведен КАК Проведен,
	|	ЛОЖЬ КАК Отгружен,
	|	ЛОЖЬ КАК Оплачен,
	|	"""" КАК ДокументОплаты,
	|	"""" КАК ДокументОтгрузки,
	|	РеализацияТоваровУслуг.Контрагент.ВерсияДанных КАК ВерсияДанныхКонтрагента,
	|	РеализацияТоваровУслуг.Контрагент.ПометкаУдаления КАК ПометкаУдаленияКонтрагента,
	|	РеализацияТоваровУслуг.Контрагент.Наименование КАК НаименованиеКонтрагента,
	|	РеализацияТоваровУслуг.Контрагент.ИНН КАК ИННКонтрагента,
	|	РеализацияТоваровУслуг.Контрагент.КодПоОКПО КАК КодПоОКПОКонтрагента,
	|	РеализацияТоваровУслуг.Контрагент.Комментарий КАК КомментарийКонтрагента,
	|	РеализацияТоваровУслуг.Контрагент.КПП КАК КППКонтрагента,
	|	РеализацияТоваровУслуг.Контрагент.НаименованиеПолное КАК НаименованиеПолноеКонтрагента,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.Контрагент.Б_Идентификатор = """"
	|			ТОГДА РеализацияТоваровУслуг.Контрагент.Ссылка
	|		ИНАЧЕ РеализацияТоваровУслуг.Контрагент.Б_Идентификатор
	|	КОНЕЦ КАК ИдентификаторКонтрагента,
	|	РеализацияТоваровУслуг.Контрагент.ЮрФизЛицо КАК ЮрФизЛицоКонтрагента,
	|	РеализацияТоваровУслуг.Контрагент.ОсновнойБанковскийСчет КАК ОсновнойБанковскийСчетКонтрагента,
	|	РеализацияТоваровУслуг.Контрагент.Код КАК КодКонтрагента,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.Контрагент.ОсновнойБанковскийСчет ССЫЛКА Справочник.БанковскиеСчета
	|				И НЕ РеализацияТоваровУслуг.Контрагент.ОсновнойБанковскийСчет = ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОсновнойБанковскийСчетКонтрагента,
	|	""Контрагенты"" КАК ТипКонтрагента,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.Склад.Б_Идентификатор = """"
	|			ТОГДА РеализацияТоваровУслуг.Склад.Ссылка
	|		ИНАЧЕ РеализацияТоваровУслуг.Склад.Б_Идентификатор
	|	КОНЕЦ КАК ИдентификаторСклад,
	|	РеализацияТоваровУслуг.Склад.Наименование КАК НаименованиеСклад,
	|	РеализацияТоваровУслуг.АдресДоставки
	|ПОМЕСТИТЬ ВремДокументы
	|ИЗ
	|	ВремМассивДанных КАК ВремМассивДанных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ПО ВремМассивДанных.Объект = РеализацияТоваровУслуг.Сделка
	|			И (&НадоВыгружатьОтгрузки)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.ЗаказСсылка.Б_Идентификатор = """"
	|			ТОГДА ВЫБОР
	|					КОГДА ВложенныйЗапрос.ЗаказСсылка.НомерВходящегоДокументаЭлектронногоОбмена = """"
	|						ТОГДА ВложенныйЗапрос.ЗаказСсылка.Ссылка
	|					ИНАЧЕ ВложенныйЗапрос.ЗаказСсылка.НомерВходящегоДокументаЭлектронногоОбмена
	|				КОНЕЦ
	|		ИНАЧЕ ВложенныйЗапрос.ЗаказСсылка.Б_Идентификатор
	|	КОНЕЦ,
	|	"""",
	|	ВложенныйЗапрос.ЗаказСсылка.Ссылка,
	|	ВложенныйЗапрос.ЗаказСсылка.ВерсияДанных,
	|	ВложенныйЗапрос.ЗаказСсылка.ПометкаУдаления,
	|	ВложенныйЗапрос.ЗаказСсылка.Номер,
	|	ВложенныйЗапрос.ЗаказСсылка.Дата,
	|	ВложенныйЗапрос.ЗаказСсылка.Б_Идентификатор,
	|	ВложенныйЗапрос.ЗаказСсылка.Б_ДатаДокумента,
	|	ВложенныйЗапрос.ЗаказСсылка.Контрагент,
	|	ВложенныйЗапрос.ЗаказСсылка.ВалютаДокумента.Наименование,
	|	ВложенныйЗапрос.ЗаказСсылка.УчитыватьНДС,
	|	ВложенныйЗапрос.ЗаказСсылка.СуммаВключаетНДС,
	|	ВложенныйЗапрос.ЗаказСсылка.КурсВзаиморасчетов,
	|	ВложенныйЗапрос.ЗаказСсылка.СуммаДокумента,
	|	ВложенныйЗапрос.ЗаказСсылка.Комментарий,
	|	""Заказ"",
	|	ВремМассивДанных.Пакет,
	|	ВложенныйЗапрос.ЗаказСсылка.Проведен,
	|	ВложенныйЗапрос.Отгружен,
	|	ВложенныйЗапрос.Оплачен,
	|	ВложенныйЗапрос.ДокументОплаты,
	|	ВложенныйЗапрос.ДокументОтгрузки,
	|	ВложенныйЗапрос.ЗаказСсылка.Контрагент.ВерсияДанных,
	|	ВложенныйЗапрос.ЗаказСсылка.Контрагент.ПометкаУдаления,
	|	ВложенныйЗапрос.ЗаказСсылка.Контрагент.Наименование,
	|	ВложенныйЗапрос.ЗаказСсылка.Контрагент.ИНН,
	|	ВложенныйЗапрос.ЗаказСсылка.Контрагент.КодПоОКПО,
	|	ВложенныйЗапрос.ЗаказСсылка.Контрагент.Комментарий,
	|	ВложенныйЗапрос.ЗаказСсылка.Контрагент.КПП,
	|	ВложенныйЗапрос.ЗаказСсылка.Контрагент.НаименованиеПолное,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.ЗаказСсылка.Контрагент.Б_Идентификатор = """"
	|			ТОГДА ВложенныйЗапрос.ЗаказСсылка.Контрагент.Ссылка
	|		ИНАЧЕ ВложенныйЗапрос.ЗаказСсылка.Контрагент.Б_Идентификатор
	|	КОНЕЦ,
	|	ВложенныйЗапрос.ЗаказСсылка.Контрагент.ЮрФизЛицо,
	|	ВложенныйЗапрос.ЗаказСсылка.Контрагент.ОсновнойБанковскийСчет,
	|	ВложенныйЗапрос.ЗаказСсылка.Контрагент.Код,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.ЗаказСсылка.Контрагент.ОсновнойБанковскийСчет ССЫЛКА Справочник.БанковскиеСчета
	|				И НЕ ВложенныйЗапрос.ЗаказСсылка.Контрагент.ОсновнойБанковскийСчет = ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	""Контрагенты"",
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.ЗаказСсылка.СкладГруппа.Б_Идентификатор = """"
	|			ТОГДА ВложенныйЗапрос.ЗаказСсылка.СкладГруппа.Ссылка
	|		ИНАЧЕ ВложенныйЗапрос.ЗаказСсылка.СкладГруппа.Б_Идентификатор
	|	КОНЕЦ,
	|	ВложенныйЗапрос.ЗаказСсылка.СкладГруппа.Наименование,
	|	ВложенныйЗапрос.ЗаказСсылка.АдресДоставки
	|ИЗ
	|	ВремМассивДанных КАК ВремМассивДанных
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Заказы.ЗаказСсылка КАК ЗаказСсылка,
	|			Заказы.Отгружен КАК Отгружен,
	|			Заказы.Оплачен КАК Оплачен,
	|			МАКСИМУМ(Заказы.ДокументОплаты) КАК ДокументОплаты,
	|			МАКСИМУМ(Заказы.ДокументОтгрузки) КАК ДокументОтгрузки
	|		ИЗ
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				НашиЗаказы.Ссылка КАК ЗаказСсылка,
	|				ВЫБОР
	|					КОГДА НЕ НашиЗаказы.Проведен
	|							ИЛИ ЗаказыПокупателей.Регистратор ЕСТЬ NULL 
	|						ТОГДА ЛОЖЬ
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ЕСТЬNULL(ЗаказыПокупателейОстатки.СуммаВзаиморасчетовОстаток, 0) <= 0
	|								ТОГДА ИСТИНА
	|							ИНАЧЕ ЛОЖЬ
	|						КОНЕЦ
	|				КОНЕЦ КАК Отгружен,
	|				ВЫБОР
	|					КОГДА НЕ НашиЗаказы.Проведен
	|							ИЛИ РасчетыСКонтрагентами.Регистратор ЕСТЬ NULL 
	|						ТОГДА ЛОЖЬ
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ЕСТЬNULL(РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток, 0) <= 0
	|								ТОГДА ИСТИНА
	|							ИНАЧЕ ЛОЖЬ
	|						КОНЕЦ
	|				КОНЕЦ КАК Оплачен,
	|				РасчетыСКонтрагентами.Регистратор КАК ДокументОплаты,
	|				ЗаказыПокупателей.Регистратор КАК ДокументОтгрузки
	|			ИЗ
	|				(ВЫБРАТЬ
	|					ЗаказПокупателя.Ссылка КАК Ссылка,
	|					ЗаказПокупателя.Проведен КАК Проведен
	|				ИЗ
	|					ВремМассивДанных КАК ВремМассивДанных
	|						ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|						ПО ВремМассивДанных.Объект = ЗаказПокупателя.Ссылка) КАК НашиЗаказы
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(, ) КАК ЗаказыПокупателейОстатки
	|					ПО НашиЗаказы.Ссылка = ЗаказыПокупателейОстатки.ЗаказПокупателя
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКонтрагентами.Остатки(, ) КАК РасчетыСКонтрагентамиОстатки
	|					ПО НашиЗаказы.Ссылка = РасчетыСКонтрагентамиОстатки.Сделка
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей КАК ЗаказыПокупателей
	|					ПО НашиЗаказы.Ссылка = ЗаказыПокупателей.ЗаказПокупателя
	|						И (ЗаказыПокупателей.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг)
	|						И (ЗаказыПокупателей.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.расход))
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКонтрагентами КАК РасчетыСКонтрагентами
	|					ПО НашиЗаказы.Ссылка = РасчетыСКонтрагентами.Сделка
	|						И (РасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.АккредитивПолученный
	|							ИЛИ РасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.ОплатаОтПокупателяПлатежнойКартой
	|							ИЛИ РасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.ПлатежноеПоручениеВходящее
	|							ИЛИ РасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.ПриходныйКассовыйОрдер)
	|						И (РасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.расход))) КАК Заказы
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Заказы.ЗаказСсылка,
	|			Заказы.Отгружен,
	|			Заказы.Оплачен) КАК ВложенныйЗапрос
	|		ПО ВремМассивДанных.Объект = ВложенныйЗапрос.ЗаказСсылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Пакет,
	|	Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Ссылка КАК Документ,
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Товары.ЕдиницаИзмеренияМест КАК ЕдиницаИзмеренияМест,
	|	Товары.Количество * Товары.Коэффициент КАК Количество,
	|	Товары.КоличествоМест КАК КоличествоМест,
	|	Товары.Коэффициент КАК Коэффициент,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	Товары.Сумма КАК Сумма,
	|	Товары.СуммаНДС КАК СуммаНДС,
	|	Товары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	Товары.Цена / ВЫБОР
	|		КОГДА Товары.Коэффициент = 0
	|			ТОГДА 1
	|		ИНАЧЕ Товары.Коэффициент
	|	КОНЕЦ КАК Цена,
	|	Товары.ПроцентАвтоматическихСкидок КАК ПроцентАвтоматическихСкидок,
	|	Товары.УсловиеАвтоматическойСкидки КАК УсловиеАвтоматическойСкидки,
	|	Товары.ЗначениеУсловияАвтоматическойСкидки КАК ЗначениеУсловияАвтоматическойСкидки,
	|	Товары.КлючСтроки КАК КлючСтроки,
	|	Товары.СерияНоменклатуры КАК СерияНоменклатуры,
	|	ВЫБОР
	|		КОГДА Товары.Номенклатура.Б_Идентификатор = """"
	|			ТОГДА Товары.Номенклатура.Ссылка
	|		ИНАЧЕ Товары.Номенклатура.Б_Идентификатор
	|	КОНЕЦ КАК ИдентификаторНоменклатуры,
	|	ВЫБОР
	|		КОГДА Товары.ХарактеристикаНоменклатуры.Б_Идентификатор = """"
	|			ТОГДА Товары.ХарактеристикаНоменклатуры.Ссылка
	|		ИНАЧЕ Товары.ХарактеристикаНоменклатуры.Б_Идентификатор
	|	КОНЕЦ КАК ИдентификаторХарактеристики,
	|	ВЫБОР
	|		КОГДА Товары.Номенклатура.Наименование ЕСТЬ NULL 
	|			ТОГДА ""Товар не найден""
	|		ИНАЧЕ Товары.Номенклатура.Наименование
	|	КОНЕЦ КАК НоменклатураНаименование,
	|	ВЫБОР
	|		КОГДА Товары.Номенклатура.БазоваяЕдиницаИзмерения.Б_Идентификатор = """"
	|			ТОГДА Товары.Номенклатура.БазоваяЕдиницаИзмерения.Код
	|		ИНАЧЕ Товары.Номенклатура.БазоваяЕдиницаИзмерения.Б_Идентификатор
	|	КОНЕЦ КАК ИдентификаторЕдиницыИзмерения,
	|	ВЫБОР
	|		КОГДА Товары.ХарактеристикаНоменклатуры.Наименование ЕСТЬ NULL 
	|			ТОГДА ""Характеристика не найдена""
	|		ИНАЧЕ Товары.ХарактеристикаНоменклатуры.Наименование
	|	КОНЕЦ КАК ХарактеристикаНаименование,
	|	Товары.Номенклатура.БазоваяЕдиницаИзмерения.НаименованиеПолное КАК НаименованиеПолноеЕдиницыИзмерения,
	|	Товары.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК КодЕдиницыИзмерения,
	|	Товары.Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК НаименованиеЕдиницыИзмерения,
	|	Товары.Номенклатура.ВидНоменклатуры.ТипНоменклатуры КАК НоменклатураТипНоменклатуры,
	|	Товары.Номенклатура.СтавкаНДС,
	|	Товары.Номенклатура.ВидНоменклатуры.Наименование КАК НоменклатураВидНоменклатуры
	|ПОМЕСТИТЬ ВремТабТоваров
	|ИЗ
	|	Документ.ЗаказПокупателя.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка В
	|			(ВЫБРАТЬ
	|				ВремДокументы.Объект
	|			ИЗ
	|				ВремДокументы
	|			ГДЕ
	|				ВремДокументы.ТипДокумента = ""Заказ"")
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.Ссылка,
	|	Товары.НомерСтроки,
	|	Товары.ЕдиницаИзмерения,
	|	Товары.ЕдиницаИзмеренияМест,
	|	Товары.Количество * Товары.Коэффициент,
	|	Товары.КоличествоМест,
	|	Товары.Коэффициент,
	|	Товары.Номенклатура,
	|	Товары.ПроцентСкидкиНаценки,
	|	Товары.СтавкаНДС,
	|	Товары.Сумма,
	|	Товары.СуммаНДС,
	|	Товары.ХарактеристикаНоменклатуры,
	|	Товары.Цена / ВЫБОР
	|		КОГДА Товары.Коэффициент = 0
	|			ТОГДА 1
	|		ИНАЧЕ Товары.Коэффициент
	|	КОНЕЦ,
	|	Товары.ПроцентАвтоматическихСкидок,
	|	Товары.УсловиеАвтоматическойСкидки,
	|	Товары.ЗначениеУсловияАвтоматическойСкидки,
	|	Товары.КлючСтроки,
	|	Товары.СерияНоменклатуры,
	|	ВЫБОР
	|		КОГДА Товары.Номенклатура.Б_Идентификатор = """"
	|			ТОГДА Товары.Номенклатура.Ссылка
	|		ИНАЧЕ Товары.Номенклатура.Б_Идентификатор
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Товары.ХарактеристикаНоменклатуры.Б_Идентификатор = """"
	|			ТОГДА Товары.ХарактеристикаНоменклатуры.Ссылка
	|		ИНАЧЕ Товары.ХарактеристикаНоменклатуры.Б_Идентификатор
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Товары.Номенклатура.Наименование ЕСТЬ NULL 
	|			ТОГДА ""Товар не найден""
	|		ИНАЧЕ Товары.Номенклатура.Наименование
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Товары.Номенклатура.БазоваяЕдиницаИзмерения.Б_Идентификатор = """"
	|			ТОГДА Товары.Номенклатура.БазоваяЕдиницаИзмерения.Код
	|		ИНАЧЕ Товары.Номенклатура.БазоваяЕдиницаИзмерения.Б_Идентификатор
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Товары.ХарактеристикаНоменклатуры.Наименование ЕСТЬ NULL 
	|			ТОГДА ""Характеристика не найдена""
	|		ИНАЧЕ Товары.ХарактеристикаНоменклатуры.Наименование
	|	КОНЕЦ,
	|	Товары.Номенклатура.БазоваяЕдиницаИзмерения.НаименованиеПолное,
	|	Товары.Номенклатура.БазоваяЕдиницаИзмерения.Код,
	|	Товары.Номенклатура.БазоваяЕдиницаИзмерения.Наименование,
	|	Товары.Номенклатура.ВидНоменклатуры.ТипНоменклатуры,
	|	Товары.Номенклатура.СтавкаНДС,
	|	Товары.Номенклатура.ВидНоменклатуры.Наименование
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка В
	|			(ВЫБРАТЬ
	|				ВремДокументы.Объект
	|			ИЗ
	|				ВремДокументы
	|			ГДЕ
	|				ВремДокументы.ТипДокумента = ""Отгрузка"")
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Услуги.Ссылка КАК Документ,
	|	Услуги.НомерСтроки КАК НомерСтроки,
	|	Услуги.Содержание КАК Содержание,
	|	Услуги.Количество КАК Количество,
	|	Услуги.Цена КАК Цена,
	|	Услуги.Сумма КАК Сумма,
	|	Услуги.СтавкаНДС КАК СтавкаНДС,
	|	Услуги.СуммаНДС КАК СуммаНДС,
	|	Услуги.Номенклатура КАК Номенклатура,
	|	Услуги.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|	Услуги.ПроцентАвтоматическихСкидок КАК ПроцентАвтоматическихСкидок,
	|	Услуги.УсловиеАвтоматическойСкидки КАК УсловиеАвтоматическойСкидки,
	|	Услуги.ЗначениеУсловияАвтоматическойСкидки КАК ЗначениеУсловияАвтоматическойСкидки,
	|	ВЫБОР
	|		КОГДА Услуги.Номенклатура.Б_Идентификатор = """"
	|			ТОГДА Услуги.Номенклатура.Ссылка
	|		ИНАЧЕ Услуги.Номенклатура.Б_Идентификатор
	|	КОНЕЦ КАК ИдентификаторНоменклатуры,
	|	ВЫБОР
	|		КОГДА Услуги.Номенклатура.Наименование ЕСТЬ NULL 
	|			ТОГДА ""Товар не найден""
	|		ИНАЧЕ Услуги.Номенклатура.Наименование
	|	КОНЕЦ КАК НоменклатураНаименование,
	|	ВЫБОР
	|		КОГДА Услуги.Номенклатура.БазоваяЕдиницаИзмерения.Б_Идентификатор = """"
	|			ТОГДА Услуги.Номенклатура.БазоваяЕдиницаИзмерения.Код
	|		ИНАЧЕ Услуги.Номенклатура.БазоваяЕдиницаИзмерения.Б_Идентификатор
	|	КОНЕЦ КАК ИдентификаторЕдиницыИзмерения,
	|	Услуги.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК КодЕдиницыИзмерения,
	|	Услуги.Номенклатура.БазоваяЕдиницаИзмерения.НаименованиеПолное КАК НаименованиеПолноеЕдиницыИзмерения,
	|	Услуги.Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК НаименованиеЕдиницыИзмерения,
	|	Услуги.Номенклатура.ВидНоменклатуры.ТипНоменклатуры КАК НоменклатураТипНоменклатуры,
	|	Услуги.Номенклатура.СтавкаНДС,
	|	Услуги.Номенклатура.ВидНоменклатуры.Наименование КАК НоменклатураВидНоменклатуры
	|ПОМЕСТИТЬ ВремТабУслуг
	|ИЗ
	|	Документ.ЗаказПокупателя.Услуги КАК Услуги
	|ГДЕ
	|	Услуги.Ссылка В
	|			(ВЫБРАТЬ
	|				ВремДокументы.Объект
	|			ИЗ
	|				ВремДокументы
	|			ГДЕ
	|				ВремДокументы.ТипДокумента = ""Заказ"")
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Услуги.Ссылка,
	|	Услуги.НомерСтроки,
	|	Услуги.Содержание,
	|	Услуги.Количество,
	|	Услуги.Цена,
	|	Услуги.Сумма,
	|	Услуги.СтавкаНДС,
	|	Услуги.СуммаНДС,
	|	Услуги.Номенклатура,
	|	Услуги.ПроцентСкидкиНаценки,
	|	Услуги.ПроцентАвтоматическихСкидок,
	|	Услуги.УсловиеАвтоматическойСкидки,
	|	Услуги.ЗначениеУсловияАвтоматическойСкидки,
	|	ВЫБОР
	|		КОГДА Услуги.Номенклатура.Б_Идентификатор = """"
	|			ТОГДА Услуги.Номенклатура.Ссылка
	|		ИНАЧЕ Услуги.Номенклатура.Б_Идентификатор
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Услуги.Номенклатура.Наименование ЕСТЬ NULL 
	|			ТОГДА ""Товар не найден""
	|		ИНАЧЕ Услуги.Номенклатура.Наименование
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Услуги.Номенклатура.БазоваяЕдиницаИзмерения.Б_Идентификатор = """"
	|			ТОГДА Услуги.Номенклатура.БазоваяЕдиницаИзмерения.Код
	|		ИНАЧЕ Услуги.Номенклатура.БазоваяЕдиницаИзмерения.Б_Идентификатор
	|	КОНЕЦ,
	|	Услуги.Номенклатура.БазоваяЕдиницаИзмерения.Код,
	|	Услуги.Номенклатура.БазоваяЕдиницаИзмерения.НаименованиеПолное,
	|	Услуги.Номенклатура.БазоваяЕдиницаИзмерения.Наименование,
	|	Услуги.Номенклатура.ВидНоменклатуры.ТипНоменклатуры,
	|	Услуги.Номенклатура.СтавкаНДС,
	|	Услуги.Номенклатура.ВидНоменклатуры.Наименование
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК Услуги
	|ГДЕ
	|	Услуги.Ссылка В
	|			(ВЫБРАТЬ
	|				ВремДокументы.Объект
	|			ИЗ
	|				ВремДокументы
	|			ГДЕ
	|				ВремДокументы.ТипДокумента = ""Отгрузка"")
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремМассивДанных";
	
	ОбщийЗапрос.Выполнить();	
	
	Возврат МенеджерВременныхТаблицДокументов;
	
КонецФункции

Функция ПолучитьСуммуНДС(Док)
	
	СуммаНДС = 0;
	
	Если НЕ Док.Товары = НеОпределено Тогда
		Для Каждого СтрокаТЧ Из Док.Товары Цикл
			СуммаНДС = СуммаНДС + СтрокаТЧ.СуммаНДС;
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ Док.Услуги = НеОпределено Тогда
		Для Каждого СтрокаТЧ Из Док.Услуги Цикл
			СуммаНДС = СуммаНДС + СтрокаТЧ.СуммаНДС;
		КонецЦикла;
	КонецЕсли;

	Возврат СуммаНДС;
	
КонецФункции

Процедура ВыгрузитьДокументы(ПараметрыОбмена,МассивДанных, Операция)

	лКоличествоСтрок = МассивДанных.Количество();
	КоличествоПакетов = ?(лКоличествоСтрок > 0, МассивДанных[лКоличествоСтрок - 1].Пакет, 0); 
	
	Если КоличествоПакетов > 0 тогда
		
		лМенеджерВременныхТаблиц = СформироватьВременныеТаблицыПоДокументам(ПараметрыОбмена, МассивДанных);
			
		ПространствоИмен 	= ПараметрыОбмена.ПространствоИмен; 
		ПараметрыОбмена.МояФабрикаXDTO 		= СоздатьФабрикуXDTO(ПараметрыОбмена.ФайлСхемы); 
		
		XDTOКоммерческаяИнформацияТип 	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена, "КоммерческаяИнформация");  
		
		XDTOДокументТип		= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена, "Документ");
		
	КонецЕсли;
	
	Для Пакет = 1 по КоличествоПакетов Цикл
		
		Запрос = Новый Запрос();
		Запрос.МенеджерВременныхТаблиц = лМенеджерВременныхТаблиц;
		Запрос.Текст = "ВЫБРАТЬ *
		|ИЗ
		|	ВремДокументы КАК ВремДокументы
		|ГДЕ
		|	ВремДокументы.Пакет В(&Пакет)";
		Запрос.УстановитьПараметр("Пакет", Пакет);
		МассивСтрок = Запрос.Выполнить().Выгрузить();
		
		Если МассивСтрок.Количество() > 0 тогда
			
			Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Начало выгрузки пакета " + Строка(Пакет) + " заказов", ПараметрыОбмена);
			
			КоличествоЗаказов = 0;
			КоличествоОтгрузок = 0;
			
			XDTOКоммерческаяИнформация 		= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьXDTOКоммерческаяИнформация(ПараметрыОбмена, XDTOКоммерческаяИнформацияТип); 
			
			Для каждого ТекДокумент из МассивСтрок Цикл
				
				ЗапросПоТоварам = Новый Запрос();
				ЗапросПоТоварам.МенеджерВременныхТаблиц = лМенеджерВременныхТаблиц;
				ЗапросПоТоварам.Текст = "ВЫБРАТЬ *
				|ИЗ
				|	ВремТабТоваров КАК ВремТабТоваров
				|ГДЕ
				|	ВремТабТоваров.Документ =&Документ";
				ЗапросПоТоварам.УстановитьПараметр("Документ", ТекДокумент.Объект);
				МассивТоваров = ЗапросПоТоварам.Выполнить().Выгрузить();
				
				ЗапросПоУслугам = Новый Запрос();
				ЗапросПоУслугам.МенеджерВременныхТаблиц = лМенеджерВременныхТаблиц;
				ЗапросПоУслугам.Текст = "ВЫБРАТЬ *
				|ИЗ
				|	ВремТабУслуг КАК ВремТабУслуг
				|ГДЕ
				|	ВремТабУслуг.Документ =&Документ";
				ЗапросПоУслугам.УстановитьПараметр("Документ", ТекДокумент.Объект);
				МассивУслуг = ЗапросПоУслугам.Выполнить().Выгрузить();
				
				XDTOДокумент	= ВыгрузитьДокументXDTO(ПараметрыОбмена, ТекДокумент, МассивТоваров, МассивУслуг, КоличествоЗаказов, КоличествоОтгрузок);
						
				XDTOКоммерческаяИнформация.Документ.Добавить(XDTOДокумент);
				
			КонецЦикла;
			
			ИмяКаталога = Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьПутьДляПлатформы(ПараметрыОбмена.ПлатформаWindows, ПараметрыОбмена.КаталогНаДиске + "\documents\" + Строка(Пакет)); 
			
			Успешно = ЗаписьИОтправкаXMLДанныхНаСайт(ПараметрыОбмена, XDTOКоммерческаяИнформация, ИмяКаталога, "Documents", МассивСтрок, "ВыгрузкаДокументов", Пакет);		
			
			УдалениеПакетовИРегистраций(Успешно, ПараметрыОбмена, Операция, Пакет, "Заказы", МассивСтрок);
			
			Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Выгрузка пакета " + Строка(Пакет) + " заказов завершено. Выгружено " + Строка(КоличествоЗаказов) + " заказов, " + Строка(КоличествоОтгрузок) + " отгрузок", ПараметрыОбмена);

		КонецЕсли;
	КонецЦикла;
	
	Если КоличествоПакетов > 0 тогда
		лМенеджерВременныхТаблиц.Закрыть();
	КонецЕсли;
	
КонецПроцедуры 

Функция ВыгрузитьДокументXDTO(ПараметрыОбмена, Документ, МассивТоваров, МассивУслуг, КоличествоЗаказов, КоличествоОтгрузок)
	
	XDTOДокументТип		= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена, "Документ");
	XDTOНалогиТип 		= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена, "Налоги"		, Истина, XDTOДокументТип);	
	XDTOНалогТип   		= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена, "Налог"			, Истина, XDTOНалогиТип);
	
	XDTOКонтрагентыТип	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена, "Контрагенты"	, Истина, XDTOДокументТип);  	
	XDTOКонтрагентТип	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена, "Контрагент"	, Истина, XDTOКонтрагентыТип); 
	
	XDTOТоварыТип		= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена, "Товары", Истина, XDTOДокументТип);
	
	XDTOСкладыТип		= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена, "Склады"	, Истина, XDTOДокументТип);
	XDTOСкладТип		= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена, "Склад"		, Истина, XDTOСкладыТип);
	
	XDTOЗначенияРеквизитовТип 	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена, "ЗначенияРеквизитов", Истина, XDTOДокументТип);
	XDTOЗначениеРеквизитаТип 	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена, "ЗначениеРеквизита");
	
	XDTOДокумент		= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOДокументТип);
	
	XDTOДокумент.Ид 			= XMLСтрока(Документ.Идентификатор);
	XDTOДокумент.Номер1С 		= Документ.Номер;
	XDTOДокумент.Дата1С 		= XMLСтрока(Формат(Документ.Дата,"ДФ=yyyy-MM-dd"));
	
	//Если ЗначениеЗаполнено(Документ.НомерССайта) тогда
		XDTOДокумент.Номер 			= Документ.НомерССайта;
	//КонецЕсли;
	
	//Если ЗначениеЗаполнено(Документ.ДатаССайта) тогда
		лДатаВремяЭлДокумента  		= ?(ЗначениеЗаполнено(Документ.ДатаССайта), Документ.ДатаССайта, ТекущаяДата());
		XDTOДокумент.Дата 			= XMLСтрока(Формат(лДатаВремяЭлДокумента,"ДФ=yyyy-MM-dd"));
		XDTOДокумент.Время			= XMLСтрока(Формат(лДатаВремяЭлДокумента,"ДФ=ЧЧ:мм:сс"));
	//КонецЕсли;
	
	XDTOДокумент.ПометкаУдаления= XMLСтрока(Документ.ПометкаУдаления);
	XDTOДокумент.НомерВерсии 	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьВерсиюОбъекта(ПараметрыОбмена, Документ.ВерсияДанных, "Документов"); 
	XDTOДокумент.Комментарий 	= Документ.Комментарий;
	
	Если Документ.ТипДокумента  = "Заказ" тогда
		
		XDTOДокумент.ХозОперация= "Заказ товара";
		
		КоличествоЗаказов 		= КоличествоЗаказов + 1;
		
	Иначе
		
		XDTOДокумент.ХозОперация= "Отпуск товара";	
		
		КоличествоОтгрузок 		= КоличествоОтгрузок + 1;
		
		XDTOДокумент.Основание	= XMLСтрока(Документ.СделкаИдентификатор);
	КонецЕсли;
	
	XDTOДокумент.Роль 			= "Продавец";
	
	Если ЗначениеЗаполнено(Документ.ВалютаКод) тогда
		XDTOДокумент.Валюта			= Лев(Документ.ВалютаКод, 3);
	Иначе
		Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Не найдена валюта для документа: " + Строка(Документ.Объект) + ".Валюта документа будет не выгружена", ПараметрыОбмена);
	КонецЕсли;
	
	XDTOДокумент.Курс			= Документ.КурсВзаиморасчетов;
	XDTOДокумент.Сумма			= Документ.СуммаДокумента;
	
	Если Документ.УчитыватьНДС Тогда
		
		XDTOНалоги	= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOНалогиТип);
		XDTOНалог	= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOНалогТип);
		XDTOНалог.Наименование = ПараметрыОбмена.НаименованиеНалога;
		XDTOНалог.УчтеноВСумме = XMLСтрока(Документ.СуммаВключаетНДС);
		XDTOНалог.Сумма        = ПолучитьСуммуНДС(Документ.Объект);
		
		XDTOНалоги.Налог.Добавить(XDTOНалог);
		XDTOДокумент.Налоги = XDTOНалоги; 
		
	КонецЕсли;
	
	Если Документ.ИдентификаторКонтрагента <> Null тогда
		XDTOКонтрагенты	= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOКонтрагентыТип);
		XDTOКонтрагенты.Контрагент.Добавить(ВыгрузитьКонтрагентаXDTO(ПараметрыОбмена, XDTOКонтрагентТип,  Документ));
		
		XDTOДокумент.Контрагенты 	= XDTOКонтрагенты;
	Иначе
		Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Не найден контрагент в документе: " + Строка(Документ.Объект), ПараметрыОбмена);
	КонецЕсли;
	
	Если Документ.ИдентификаторСклад <> Null тогда
		XDTOСклады	= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOСкладыТип);
		
			XDTOСклад				= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOСкладТип);
			XDTOСклад.Ид 			= XMLСтрока(Документ.ИдентификаторСклад); 
			XDTOСклад.Наименование 	= Документ.НаименованиеСклад; 
			
		XDTOСклады.Склад.Добавить(XDTOСклад);
		XDTOДокумент.Склады 		= XDTOСклады;	
	КонецЕсли;
	
	XDTOЗначенияРеквизитов 		= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOЗначенияРеквизитовТип); 
			
		Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ДобавитьЗначениеРеквизитаXDTO(ПараметрыОбмена, XDTOЗначенияРеквизитов, XDTOЗначениеРеквизитаТип, "Проведен", XMLСтрока(Документ.Проведен));
		
		Если ЗначениеЗаполнено(Документ.АдресДоставки) тогда
			Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ДобавитьЗначениеРеквизитаXDTO(ПараметрыОбмена, XDTOЗначенияРеквизитов, XDTOЗначениеРеквизитаТип, "Адрес доставки"	, Документ.АдресДоставки);
		КонецЕсли;
		
		Если Документ.Оплачен Тогда
			Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ДобавитьЗначениеРеквизитаXDTO(ПараметрыОбмена, XDTOЗначенияРеквизитов, XDTOЗначениеРеквизитаТип, "Номер оплаты по 1С", Документ.ДокументОплаты.Номер);
			Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ДобавитьЗначениеРеквизитаXDTO(ПараметрыОбмена, XDTOЗначенияРеквизитов, XDTOЗначениеРеквизитаТип, "Дата оплаты по 1С"	, XMLСтрока(Документ.ДокументОплаты.Дата));
		КонецЕсли;
		
		Если Документ.Отгружен Тогда
			Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ДобавитьЗначениеРеквизитаXDTO(ПараметрыОбмена, XDTOЗначенияРеквизитов, XDTOЗначениеРеквизитаТип, "Номер отгрузки по 1С"	, Документ.ДокументОтгрузки.Номер);
			Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ДобавитьЗначениеРеквизитаXDTO(ПараметрыОбмена, XDTOЗначенияРеквизитов, XDTOЗначениеРеквизитаТип, "Дата отгрузки по 1С"	, XMLСтрока(Документ.ДокументОтгрузки.Дата));
		КонецЕсли;
		
	XDTOДокумент.ЗначенияРеквизитов = XDTOЗначенияРеквизитов;
	
	ЕстьТовары 	= МассивТоваров.Количество() 	> 0;
	ЕстьУслуги 	= МассивУслуг.Количество() 		> 0;
	
	Если ЕстьТовары или ЕстьУслуги тогда
		
		XDTOТовары		= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOТоварыТип);
	
		Если ЕстьТовары тогда
			ЗаполнениеТабличнойЧастиДокумента(ПараметрыОбмена, XDTOТовары, XDTOТоварыТип, Документ, МассивТоваров, Истина)
		КонецЕсли;
			
		Если ЕстьУслуги тогда
			ЗаполнениеТабличнойЧастиДокумента(ПараметрыОбмена, XDTOТовары, XDTOТоварыТип, Документ, МассивУслуг, Ложь)
		КонецЕсли;
		
       XDTOДокумент.Товары = XDTOТовары;
	КонецЕсли;
	
	Возврат XDTOДокумент;
	
КонецФункции

Процедура ЗаполнениеТабличнойЧастиДокумента(ПараметрыОбмена, Владелец, ВладелецТип, Документ, МассивНоменклатуры, ВыгрузкаТоваров)
	
	XDTOТоварТип		= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена, "Товар"		, Истина, ВладелецТип);
	XDTOНалогиТип 		= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена, "Налоги"	, Истина, XDTOТоварТип);	
	XDTOНалогТип   		= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена, "Налог"		, Истина, XDTOНалогиТип);
	
	XDTOСтавкиНалоговТип= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена, "СтавкиНалогов"	, Истина, XDTOТоварТип);	
	XDTOСтавкаНалогаТип = Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена, "СтавкаНалога"	, Истина, XDTOСтавкиНалоговТип);
	
	XDTOСкидкиТип 		= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена, "Скидки"	, Истина, XDTOТоварТип);	
	XDTOСкидкаТип   	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена, "Скидка"	, Истина, XDTOСкидкиТип);
	
	XDTOЕдиницаИзмеренияТип	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена, "ЕдиницаИзмерения");
	
	XDTOЗначенияРеквизитовТип 	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена, "ЗначенияРеквизитов", Истина, XDTOТоварТип);
	XDTOЗначениеРеквизитаТип 	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена, "ЗначениеРеквизита");
	
	Для каждого ТекНоменклатура из МассивНоменклатуры Цикл 	
		
		XDTOТовар	= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOТоварТип);
		Если ВыгрузкаТоваров тогда
			
			Если ЗначениеЗаполнено(ТекНоменклатура.ХарактеристикаНоменклатуры) И ВыгрузкаТоваров тогда
				лИд = XMLСтрока(ТекНоменклатура.ИдентификаторНоменклатуры) + "#" + XMLСтрока(ТекНоменклатура.ИдентификаторХарактеристики); 
				лНаименование   	= ТекНоменклатура.НоменклатураНаименование + " (" + ТекНоменклатура.ХарактеристикаНаименование + ")";
			Иначе
				лИд = XMLСтрока(ТекНоменклатура.ИдентификаторНоменклатуры); 
				лНаименование   	= ТекНоменклатура.НоменклатураНаименование;
			КонецЕсли;
		Иначе
			лИд = XMLСтрока(ТекНоменклатура.ИдентификаторНоменклатуры); 
			лНаименование   	= ТекНоменклатура.НоменклатураНаименование;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(лНаименование) тогда
			Продолжить;
		КонецЕсли;
		
		XDTOТовар.Ид 			= лИд;
		XDTOТовар.Наименование 	= лНаименование;
		
		лТипНоменклатуры = "Товар";
		Если ТекНоменклатура.НоменклатураТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга тогда
			лТипНоменклатуры = "Услуга";
		ИначеЕсли ТекНоменклатура.НоменклатураТипНоменклатуры = Перечисления.ТипыНоменклатуры.Набор тогда
			лТипНоменклатуры = "Набор";
		ИначеЕсли ТекНоменклатура.НоменклатураТипНоменклатуры = Перечисления.ТипыНоменклатуры.Комплект тогда
			лТипНоменклатуры = "Комплект";
		КонецЕсли;
		
		XDTOЗначенияРеквизитов 		= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOЗначенияРеквизитовТип); 
			
		Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ДобавитьЗначениеРеквизитаXDTO(ПараметрыОбмена, XDTOЗначенияРеквизитов, XDTOЗначениеРеквизитаТип, "ВидНоменклатуры", ТекНоменклатура.НоменклатураВидНоменклатуры);
		Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ДобавитьЗначениеРеквизитаXDTO(ПараметрыОбмена, XDTOЗначенияРеквизитов, XDTOЗначениеРеквизитаТип, "ТипНоменклатуры", лТипНоменклатуры);
		
		XDTOТовар.ЗначенияРеквизитов = XDTOЗначенияРеквизитов;
		
		Если ЗначениеЗаполнено(ТекНоменклатура.НоменклатураСтавкаНДС) Тогда
			
			XDTOСтавкиНалогов	= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOСтавкиНалоговТип);
			
				XDTOСтавкаНалога	= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOСтавкаНалогаТип);
				
				XDTOСтавкаНалога.Наименование 	= ПараметрыОбмена.НаименованиеНалога;
				XDTOСтавкаНалога.Ставка 		= ПолучитьПоСтавкеНДСЗначениеДляВыгрузки(ТекНоменклатура.СтавкаНДС);
			
			XDTOСтавкиНалогов.СтавкаНалога.Добавить(XDTOСтавкаНалога);
			
			XDTOТовар.СтавкиНалогов = XDTOСтавкиНалогов;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекНоменклатура.СтавкаНДС) Тогда
			
			XDTOНалоги	= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOНалогиТип);
			
				XDTOНалог	= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOНалогТип);
				
				XDTOНалог.Наименование 	= ПараметрыОбмена.НаименованиеНалога;
				XDTOНалог.УчтеноВСумме 	= Документ.СуммаВключаетНДС;
				XDTOНалог.Сумма 		= ТекНоменклатура.СуммаНДС;
				XDTOНалог.Ставка 		= ПолучитьПоСтавкеНДСЗначениеДляВыгрузки(ТекНоменклатура.СтавкаНДС);
			
			XDTOНалоги.Налог.Добавить(XDTOНалог);
			
			XDTOТовар.Налоги = XDTOНалоги;
			
		КонецЕсли;
		
		XDTOТовар.Цена			= Формат(ТекНоменклатура.Цена		, ПараметрыОбмена.ФорматСуммы);   
		XDTOТовар.Количество	= Формат(ТекНоменклатура.Количество	, ПараметрыОбмена.ФорматКоличества);
		XDTOТовар.Сумма			= Формат(ТекНоменклатура.Сумма		, ПараметрыОбмена.ФорматСуммы);
		
		XDTOТовар.Коэффициент 	= "1";
		
		Если ЗначениеЗаполнено(ТекНоменклатура.ИдентификаторЕдиницыИзмерения) Тогда
			XDTOЕдиницаИзмерения	= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOЕдиницаИзмеренияТип);
				XDTOЕдиницаИзмерения.Ид 				= XMLСтрока(ТекНоменклатура.ИдентификаторЕдиницыИзмерения);
				XDTOЕдиницаИзмерения.Код				= Лев(ТекНоменклатура.КодЕдиницыИзмерения,3);
				XDTOЕдиницаИзмерения.НаименованиеКраткое= Лев(ТекНоменклатура.НаименованиеЕдиницыИзмерения, 3);
				XDTOЕдиницаИзмерения.НаименованиеПолное	= ТекНоменклатура.НаименованиеПолноеЕдиницыИзмерения;
			XDTOТовар.Единица 		= XDTOЕдиницаИзмерения;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекНоменклатура.СтавкаНДС) Тогда
			
			XDTOНалоги	= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOНалогиТип);
			
				XDTOНалог	= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOНалогТип);
				
				XDTOНалог.Наименование 	= ПараметрыОбмена.НаименованиеНалога;
				XDTOНалог.УчтеноВСумме 	= Документ.СуммаВключаетНДС;
				XDTOНалог.Сумма 		= ТекНоменклатура.СуммаНДС;
				XDTOНалог.Ставка 		= ПолучитьПоСтавкеНДСЗначениеДляВыгрузки(ТекНоменклатура.СтавкаНДС);
			
			XDTOНалоги.Налог.Добавить(XDTOНалог);
			
			XDTOТовар.Налоги = XDTOНалоги;
			
		КонецЕсли;
	
		Если ТекНоменклатура.ПроцентСкидкиНаценки <> 0 Тогда
			
			СуммаСкидки = ТекНоменклатура.Количество * ТекНоменклатура.Цена * ТекНоменклатура.ПроцентСкидкиНаценки / 100;
			
			XDTOСкидки	= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOСкидкиТип);
				
				XDTOСкидка	= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOСкидкаТип);
				
				XDTOСкидка.Наименование = "Скидка";
				
				XDTOСкидка.Сумма 		= Формат(СуммаСкидки, ПараметрыОбмена.ФорматСуммы);	
				XDTOСкидка.Процент 		= ТекНоменклатура.ПроцентСкидкиНаценки;
				XDTOСкидка.УчтеноВСумме = XMLСтрока(истина);
				
			XDTOСкидки.Скидка.Добавить(XDTOСкидка);
			
			XDTOТовар.Скидки = XDTOСкидки;
			
		КонецЕсли;
	
		Владелец.Товар.Добавить(XDTOТовар);	
		
	КонецЦикла;	
	
КонецПроцедуры 



            ///////////////////////////////////////////////////////////////////
			//			    ВЫГРУЗКА ИНФОРМАЦИИ ПО ТОВАРАМ                  //
			/////////////////////////////////////////////////////////////////

Процедура ВыгрузитьИнформациюОТоварах(ПараметрыОбмена, МассивДанных, Операция, СтрокаТаблицыКаталогов, НомерСтроки)
	
	//получаем таблицу свойств анологично выгрузке свойств в XML, поэтому указываем операцию "Свойства"
	ТаблицаСвойствБезДопНастроек 	= ПолучитьТаблицуПоИспользуемымСвойствамТоваров(ПараметрыОбмена, "Свойства", СтрокаТаблицыКаталогов);
	
	мСвойства = ТаблицаСвойствБезДопНастроек.ВыгрузитьКолонку("Объект");			
				
	Успешно = Ложь;
	
	ПараметрыОбмена.МояФабрикаXDTO 	= СоздатьФабрикуXDTO(ПараметрыОбмена.ФайлСхемы); 
	
	XDTOКоммерческаяИнформацияТип 	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена,  "КоммерческаяИнформация");
	XDTOКаталогТип 					= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена,  "Каталог");
	XDTOКлассификаторТип 			= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена,  "Классификатор");
	XDTOПакетПредложенийТип 		= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена,  "ПакетПредложений");
	
	Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Выгрузка пакетов каталога: " + СтрокаТаблицыКаталогов.Каталог, ПараметрыОбмена, Истина);
	
	МассивДанных = ПолучитьДанныеИзРегистраПакетов(ПараметрыОбмена, СтрокаТаблицыКаталогов.ИдКаталога); 
	
	лКоличествоСтрок = МассивДанных.Количество();
	КоличествоПакетов = ?(лКоличествоСтрок > 0, МассивДанных[лКоличествоСтрок - 1].Пакет, -1); 
	
	Для Пакет = 1 по КоличествоПакетов Цикл
		
		Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Начало выгрузки пакета " + Строка(Пакет) + " каталога: " + СтрокаТаблицыКаталогов.Каталог, ПараметрыОбмена);
		
		МассивСтрок = МассивДанных.НайтиСтроки(Новый структура("Пакет", Пакет));	
		
		Если массивСтрок.Количество() > 0 тогда
					
			МассивКартинок 	= новый Массив;
			МассивФайлов   	= новый Массив;
			УспешноВсе		= Истина;		
			
			РазбитаяСтруктураДанных 	= РазборМассиваДанныхПоТипамОбъектов(МассивСтрок);
			
			СписокТоваров 				= РазбитаяСтруктураДанных.Номенклатура;
			
			лМенеджерВременныхТаблиц 	= СформироватьВременныеТаблицыПоИнформацииОТоварахПакета(ПараметрыОбмена, СтрокаТаблицыКаталогов.ИдКаталога, СписокТоваров, мСвойства);
			
			XDTOКаталог 				= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOКаталогТип); 
			XDTOКаталог.Ид				= СтрокаТаблицыКаталогов.ИдКаталога;
			XDTOКаталог.ИдКлассификатора= СтрокаТаблицыКаталогов.ИдКаталога;
			XDTOКаталог.Наименование	= СтрокаТаблицыКаталогов.Каталог;
			XDTOКаталог.Описание 		= СтрокаТаблицыКаталогов.Каталог;
			XDTOКаталог.СодержитТолькоИзменения = XMLСтрока(Истина);
			
			Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Выгрузка данных о товарах.", ПараметрыОбмена);
			
			ИмяКаталога = Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьПутьДляПлатформы(ПараметрыОбмена.ПлатформаWindows, ПараметрыОбмена.КаталогНаДиске + "\goods\" + Строка(Пакет)); 
			
			//выгрузка товаров
			Если ПараметрыОбмена.ВыгружатьТовары тогда
				
				XDTOКоммерческаяИнформация 	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьXDTOКоммерческаяИнформация(ПараметрыОбмена, XDTOКоммерческаяИнформацияТип);
				
				ВыгрузитьТоварыXDTO(ПараметрыОбмена, ИмяКаталога, XDTOКаталог, XDTOКаталогТип, лМенеджерВременныхТаблиц, СтрокаТаблицыКаталогов, МассивКартинок, МассивФайлов);
				XDTOКоммерческаяИнформация.Каталог = XDTOКаталог;

				Успешно = ЗаписьИОтправкаXMLДанныхНаСайт(ПараметрыОбмена, XDTOКоммерческаяИнформация, ИмяКаталога, "import" + ?(НомерСтроки > 0 ,Строка(НомерСтроки), ""), МассивСтрок, "ВыгрузкаТоваров", Пакет);		
				УспешноВсе = ?(УспешноВсе = Истина, Успешно, УспешноВсе);	
				
			КонецЕсли;
				
			//выгрузка предложений
			Если ПараметрыОбмена.ВыгружатьПредложения тогда
				XDTOКоммерческаяИнформация 	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьXDTOКоммерческаяИнформация(ПараметрыОбмена, XDTOКоммерческаяИнформацияТип);
					
				XDTOПакетПредложений						= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOПакетПредложенийТип);  
				XDTOПакетПредложений.Ид						= СтрокаТаблицыКаталогов.ИдКаталога + "#";
				XDTOПакетПредложений.Наименование			= "Пакет предложений (" + СтрокаТаблицыКаталогов.Каталог + ")";
				XDTOПакетПредложений.ИдКаталога				= СтрокаТаблицыКаталогов.ИдКаталога;
				XDTOПакетПредложений.ИдКлассификатора		= СтрокаТаблицыКаталогов.ИдКаталога;
				XDTOПакетПредложений.СодержитТолькоИзменения= XMLСтрока(Истина);
					
				ВыгрузитьПредложенияXDTO(ПараметрыОбмена, ИмяКаталога, XDTOПакетПредложений, XDTOПакетПредложенийТип, лМенеджерВременныхТаблиц, МассивКартинок, МассивФайлов);
				
				XDTOКоммерческаяИнформация.ПакетПредложений = XDTOПакетПредложений;
					
				Успешно = ЗаписьИОтправкаXMLДанныхНаСайт(ПараметрыОбмена, XDTOКоммерческаяИнформация, ИмяКаталога, "offers" + ?(НомерСтроки > 0 ,Строка(НомерСтроки), ""), МассивСтрок, "ВыгрузкаТоваров", Пакет);		
				УспешноВсе = ?(УспешноВсе = Истина, Успешно, УспешноВсе);	
				
			КонецЕсли;
				
			//выгрузка цен
			Если ПараметрыОбмена.ВыгружатьЦены тогда  
					
				XDTOКоммерческаяИнформация 					= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьXDTOКоммерческаяИнформация(ПараметрыОбмена, XDTOКоммерческаяИнформацияТип);
					
				XDTOПакетПредложений						= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOПакетПредложенийТип);  
				XDTOПакетПредложений.Ид						= СтрокаТаблицыКаталогов.ИдКаталога + "#";
				XDTOПакетПредложений.Наименование			= "Пакет предложений (" + СтрокаТаблицыКаталогов.Каталог + ")";
				XDTOПакетПредложений.ИдКаталога				= СтрокаТаблицыКаталогов.ИдКаталога;
				XDTOПакетПредложений.ИдКлассификатора		= СтрокаТаблицыКаталогов.ИдКаталога;
				XDTOПакетПредложений.СодержитТолькоИзменения= XMLСтрока(Истина);
					
				XDTOПредложенияТип 	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена,  "Предложения", Истина, XDTOПакетПредложенийТип);
					
				XDTOПредложения 	= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOПредложенияТип); 
					
				ВыгрузитьПрайсы(ПараметрыОбмена, XDTOПредложения, XDTOПредложенияТип, лМенеджерВременныхТаблиц);
				XDTOПакетПредложений.Предложения = XDTOПредложения;
					
				XDTOКоммерческаяИнформация.ПакетПредложений = XDTOПакетПредложений;
					
				Успешно = ЗаписьИОтправкаXMLДанныхНаСайт(ПараметрыОбмена, XDTOКоммерческаяИнформация, ИмяКаталога, "prices" + ?(НомерСтроки > 0 ,Строка(НомерСтроки), ""), МассивСтрок, "ВыгрузкаТоваров", Пакет);		
				УспешноВсе = ?(УспешноВсе = Истина, Успешно, УспешноВсе);	
				
			КонецЕсли;
				
			//выгрузка остатков
			Если ПараметрыОбмена.ВыгружатьОстатки тогда  
					
				XDTOКоммерческаяИнформация 					= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьXDTOКоммерческаяИнформация(ПараметрыОбмена, XDTOКоммерческаяИнформацияТип);
					
				XDTOПакетПредложений						= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOПакетПредложенийТип);  
				XDTOПакетПредложений.Ид						= СтрокаТаблицыКаталогов.ИдКаталога + "#";
				XDTOПакетПредложений.Наименование			= "Пакет предложений (" + СтрокаТаблицыКаталогов.Каталог + ")";
				XDTOПакетПредложений.ИдКаталога				= СтрокаТаблицыКаталогов.ИдКаталога;
				XDTOПакетПредложений.ИдКлассификатора		= СтрокаТаблицыКаталогов.ИдКаталога;
				XDTOПакетПредложений.СодержитТолькоИзменения= XMLСтрока(Истина);
					
				XDTOПредложенияТип 	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена,  "Предложения", Истина, XDTOПакетПредложенийТип);
					
				XDTOПредложения 	= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOПредложенияТип); 
					
				ВыгрузитьОстаткиXDTO(ПараметрыОбмена, XDTOПредложения, XDTOПредложенияТип, лМенеджерВременныхТаблиц);
				XDTOПакетПредложений.Предложения = XDTOПредложения;
					
				XDTOКоммерческаяИнформация.ПакетПредложений = XDTOПакетПредложений;
					
				Успешно = ЗаписьИОтправкаXMLДанныхНаСайт(ПараметрыОбмена, XDTOКоммерческаяИнформация, ИмяКаталога, "rests" + ?(НомерСтроки > 0 ,Строка(НомерСтроки), ""), МассивСтрок, "ВыгрузкаТоваров", Пакет);		
				УспешноВсе = ?(УспешноВсе = Истина, Успешно, УспешноВсе);	
				
			КонецЕсли;
			
			УдалениеПакетовИРегистраций(УспешноВсе, ПараметрыОбмена, Операция, Пакет, СтрокаТаблицыКаталогов.ИдКаталога, МассивСтрок, МассивКартинок, МассивФайлов);
			
			лМенеджерВременныхТаблиц.Закрыть();
			
		КонецЕсли;
		
		Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Завершение выгрузки пакета " + Строка(Пакет) + " каталога: " + СтрокаТаблицыКаталогов.Каталог, ПараметрыОбмена, Истина);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьТаблицуПоИспользуемымСвойствамТоваров(ПараметрыОбмена, Операция, СтрокаТаблицыКаталогов)
	
	мТаблицаКаталогов 		 = ПараметрыОбмена.СохраненнаяТаблицаКаталогов.Получить();
	мТаблицаОтборовКаталогов = ПараметрыОбмена.СохраненнаяТаблицаОтборовКаталогов.Получить();
	
	
	ПостроительЗапроса = Новый ПостроительОтчета;
	НайденнаяСтрокаСОтбором = мТаблицаОтборовКаталогов.Найти(СтрокаТаблицыКаталогов.ИдКаталога);
	
	ПланыОбмена.Б_ОбменССайтом.НастроитьПостроительСвойствДляТоваров(ПостроительЗапроса, ПараметрыОбмена);
	ПланыОбмена.Б_ОбменССайтом.ЗаполнитьОтборПостроителяСвойств(ПостроительЗапроса, ПараметрыОбмена);
	
	Если НайденнаяСтрокаСОтбором <> Неопределено тогда  
		
		Если НайденнаяСтрокаСОтбором.ОтборПостроителяОтчета <> Неопределено Тогда 
			Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ЗаполнитьОтборПоТаблицеЗначений(ПостроительЗапроса.Отбор, НайденнаяСтрокаСОтбором.ОтборПостроителяОтчета, Операция);
		КонецЕсли;
		
	КонецЕсли;	
	
	ЗапросПостроителя = ПостроительЗапроса.ПолучитьЗапрос();
	ТаблицаСвойств = ЗапросПостроителя.Выполнить().Выгрузить(); 
	
	Возврат ТаблицаСвойств;	
	
КонецФункции

Функция СформироватьВременныеТаблицыПоИнформацииОТоварахПакета(ПараметрыОбмена, ИдентификаторКаталога, СписокТоваров, СписокСвойств) Экспорт
	
	Запрос = Новый Запрос;
	
	КлассифицироватьПоЦеновымГруппам 			= ПараметрыОбмена.КлассифицироватьПоЦеновымГруппам;
	
	ТекДата = ТекущаяДата();
	Запрос.УстановитьПараметр("ТекДата", КонецДня(ТекДата));
	
	Если НЕ ПараметрыОбмена.УчетнаяПолитика = НеОпределено Тогда
		ПериодНакопленияСкидок = ОбработкаТабличныхЧастей.ПолучитьПериодРасчетаНакопительныхСкидок(ТекДата, ПараметрыОбмена.УчетнаяПолитика);
	Иначе
		ПериодНакопленияСкидок = Новый Структура("ДатаНач,ДатаКон", '00010101000000', КонецДня(ТекДата));
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаНач", ПериодНакопленияСкидок.ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", ПериодНакопленияСкидок.ДатаКон);
	
	МассивУсловийСкидок = Новый Массив;
	МассивУсловийСкидок.Добавить(Перечисления.УсловияСкидкиНаценки.БезУсловий);
	МассивУсловийСкидок.Добавить(Перечисления.УсловияСкидкиНаценки.ПоВидуДисконтныхКарт);
	МассивУсловийСкидок.Добавить(Перечисления.УсловияСкидкиНаценки.ПоДисконтнойКарте);
	МассивУсловийСкидок.Добавить(Перечисления.УсловияСкидкиНаценки.ПоКоличествуТовара);
	МассивУсловийСкидок.Добавить(Перечисления.УсловияСкидкиНаценки.ПоСуммеДокумента);
	
	Запрос.УстановитьПараметр("МассивУсловийСкидок", МассивУсловийСкидок);
	
	Запрос.УстановитьПараметр("КлассифицироватьПоЦеновымГруппам"	, КлассифицироватьПоЦеновымГруппам);
	Запрос.УстановитьПараметр("ВыгружатьВсеХарактеристики"			, Истина);
	Запрос.УстановитьПараметр("ВыгружатьТолькоСЦеной"				, ПараметрыОбмена.ВыгружатьПредложенияТолькоСЦеной);
	Запрос.УстановитьПараметр("ВыгружатьНоменклатуруКакПредложение"	, ПараметрыОбмена.ВыгружатьНоменклатуруКакПредложение);
	Запрос.УстановитьПараметр("ВыгружатьПредложенияТолькоСОстатками", ПараметрыОбмена.ВыгружатьХарактеристикиТолькоСОстатками);
	Запрос.УстановитьПараметр("ВыгружатьНаборы"						, ПараметрыОбмена.ВыгружатьНаборы);
	
	Запрос.УстановитьПараметр("СписокРасширенийКартинок"			, ПараметрыОбмена.РасширенияКартинок);
	
	Запрос.УстановитьПараметр("Узел", ПараметрыОбмена.Ссылка);
	
	Запрос.УстановитьПараметр("СписокТоваров"	, СписокТоваров);
	Запрос.УстановитьПараметр("СписокСвойств"	, СписокСвойств);
	
	НайданнаяСтрока = ПараметрыОбмена.КэшДанных.Найти(ИдентификаторКаталога, "ИдКаталога");
	Если НайданнаяСтрока <> Неопределено тогда
	
		Запрос.УстановитьПараметр("СписокСкладов"	, НайданнаяСтрока.ОбщийСписокСкладов);
		Запрос.УстановитьПараметр("СписокТиповЦен"	, НайданнаяСтрока.ОбщийСписокТиповЦен);
		Запрос.УстановитьПараметр("СписокЕдиниц" 	, НайданнаяСтрока.ОбщийСписокЕдиницИзмерений);
			
	Иначе
		
		Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Произошла ошибка в модуле. Информация по складам и остаткам может быть некорректной.", ПараметрыОбмена, Истина);
		
		Запрос.УстановитьПараметр("СписокСкладов"	, "");
		Запрос.УстановитьПараметр("СписокТиповЦен", "");
		Запрос.УстановитьПараметр("СписокЕдиниц" 	, "");
	КонецЕсли;
	
	
	
	Запрос.УстановитьПараметр("ВыгружатьВсеКартинки", 	ПараметрыОбмена.ПринудительнаяПолноеОбновлениеДанныхТовара ИЛИ ПараметрыОбмена.ВыполнятьПолнуюВыгрузкуПринудительно);
	
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////
	//	                                                                                                ///
	//             ПАКЕТ ЗАПРОСОВ ДЛЯ ПОЛУЧЕНИЯ НОМЕНКЛАТУРЫ С ХАРАКТЕРИСТИКОЙ                         ///
	//                                                                                                ///
	////////////////////////////////////////////////////////////////////////////////////////////////////
	
	ТекстЗапроса =   "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Номенклатура.Ссылка КАК Номенклатура
	|ПОМЕСТИТЬ ВремНоменклатураОтбор
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	(НЕ &КлассифицироватьПоЦеновымГруппам
	|			ИЛИ &КлассифицироватьПоЦеновымГруппам
	|				И НЕ Номенклатура.ЦеноваяГруппа = ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка))
	|	И Номенклатура.Ссылка В(&СписокТоваров)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТипыЦенНоменклатуры.Ссылка КАК ТипЦены,
	|	ТипыЦенНоменклатуры.ВерсияДанных,
	|	ТипыЦенНоменклатуры.ПометкаУдаления,
	|	ТипыЦенНоменклатуры.Наименование,
	|	ТипыЦенНоменклатуры.Рассчитывается,
	|	ТипыЦенНоменклатуры.ПроцентСкидкиНаценки,
	|	ТипыЦенНоменклатуры.ЦенаВключаетНДС,
	|	ТипыЦенНоменклатуры.СпособРасчетаЦены,
	|	ТипыЦенНоменклатуры.ВалютаЦены,
	|	ТипыЦенНоменклатуры.ВалютаЦены.Наименование КАК ВалютаЦеныКод,
	|	ТипыЦенНоменклатуры.БазовыйТипЦен,
	|	ВЫБОР
	|		КОГДА ТипыЦенНоменклатуры.Б_Идентификатор = """"
	|			ТОГДА ТипыЦенНоменклатуры.Ссылка
	|		ИНАЧЕ ТипыЦенНоменклатуры.Б_Идентификатор
	|	КОНЕЦ КАК Идентификатор
	|ПОМЕСТИТЬ ВремТипыЦен
	|ИЗ
	|	Справочник.ТипыЦенНоменклатуры КАК ТипыЦенНоменклатуры
	|ГДЕ
	|	ТипыЦенНоменклатуры.Ссылка В(&СписокТиповЦен)
	|{ГДЕ
	|	ТипыЦенНоменклатуры.Ссылка.* КАК ТипЦен}
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТипЦены
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТипыЦенНоменклатуры.Ссылка КАК ТипЦены,
	|	ТипыЦенНоменклатуры.ВалютаЦены КАК ВалютаЦены,
	|	ТипыЦенНоменклатуры.Рассчитывается КАК Рассчитывается,
	|	ТипыЦенНоменклатуры.БазовыйТипЦен КАК БазовыйТипЦен,
	|	ТипыЦенНоменклатуры.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|	ТипыЦенНоменклатуры.СпособРасчетаЦены КАК СпособРасчетаЦены
	|ПОМЕСТИТЬ ВремВсеТипыЦен
	|ИЗ
	|	Справочник.ТипыЦенНоменклатуры КАК ТипыЦенНоменклатуры
	|ГДЕ
	|	(ТипыЦенНоменклатуры.Ссылка В
	|				(ВЫБРАТЬ
	|					ВремТипыЦен.ТипЦены
	|				ИЗ
	|					ВремТипыЦен)
	|			ИЛИ НЕ ТипыЦенНоменклатуры.Рассчитывается)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТипЦены
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК БазоваяЦена,
	|	ЦеныНоменклатурыСрезПоследних.Валюта КАК ВалютаБазовойЦены,
	|	ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения КАК ЕдиницаИзмеренияБазовойЦены,
	|	ВЫБОР
	|		КОГДА ПроцентыСкидкиНаценкиДинамическихЦенСрезПоследних.ПроцентСкидкиНаценки ЕСТЬ NULL 
	|			ТОГДА ВремВсеТипыЦен.ПроцентСкидкиНаценки
	|		ИНАЧЕ ПроцентыСкидкиНаценкиДинамическихЦенСрезПоследних.ПроцентСкидкиНаценки
	|	КОНЕЦ КАК ПроцентСкидкиНаценки,
	|	ВремВсеТипыЦен.ТипЦены КАК ТипЦен,
	|	ВремВсеТипыЦен.СпособРасчетаЦены КАК СпособРасчетаЦены,
	|	ВремВсеТипыЦен.ВалютаЦены КАК ВалютаТипЦены
	|ПОМЕСТИТЬ ВремБазовыеЦены
	|ИЗ
	|	ВремВсеТипыЦен КАК ВремВсеТипыЦен
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&ТекДата,
	|				Номенклатура В
	|						(ВЫБРАТЬ
	|							ВремНоменклатураОтбор.Номенклатура
	|						ИЗ
	|							ВремНоменклатураОтбор)
	|					И ТипЦен В
	|						(ВЫБРАТЬ
	|							ВремВсеТипыЦен.ТипЦены
	|						ИЗ
	|							ВремВсеТипыЦен)) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО (ВремВсеТипыЦен.Рассчитывается)
	|			И (ЦеныНоменклатурыСрезПоследних.ТипЦен = ВремВсеТипыЦен.БазовыйТипЦен)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&ТекДата,
	|				Номенклатура В
	|						(ВЫБРАТЬ
	|							ВремНоменклатураОтбор.Номенклатура
	|						ИЗ
	|							ВремНоменклатураОтбор)
	|					И ТипЦен В
	|						(ВЫБРАТЬ
	|							ВремВсеТипыЦен.ТипЦены
	|						ИЗ
	|							ВремВсеТипыЦен)) КАК ПроцентыСкидкиНаценкиДинамическихЦенСрезПоследних
	|		ПО (ПроцентыСкидкиНаценкиДинамическихЦенСрезПоследних.ТипЦен = ВремВсеТипыЦен.ТипЦены)
	|			И (ПроцентыСкидкиНаценкиДинамическихЦенСрезПоследних.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура)
	|			И (ПроцентыСкидкиНаценкиДинамическихЦенСрезПоследних.ХарактеристикаНоменклатуры = ЦеныНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры)
	|			И (ПроцентыСкидкиНаценкиДинамическихЦенСрезПоследних.Валюта = ВремВсеТипыЦен.ВалютаЦены)
	|			И (ПроцентыСкидкиНаценкиДинамическихЦенСрезПоследних.ЕдиницаИзмерения = ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения)
	|			И (ПроцентыСкидкиНаценкиДинамическихЦенСрезПоследних.СпособРасчетаЦены = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаЦены.ПоПроцентнойНаценкеНаБазовыйТип))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	БазоваяЦена,
	|	ТипЦен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремВсеТипыЦен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БазовыеЦены.ТипЦен КАК ТипЦен,
	|	БазовыеЦены.ВалютаТипЦены КАК ВалютаТипаЦен,
	|	БазовыеЦены.Номенклатура КАК Номенклатура,
	|	БазовыеЦены.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	БазовыеЦены.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|	БазовыеЦены.СпособРасчетаЦены КАК СпособРасчетаЦены,
	|	БазовыеЦены.БазоваяЦена КАК БазоваяЦена,
	|	БазовыеЦены.ВалютаБазовойЦены КАК ВалютаБазовойЦены,
	|	БазовыеЦены.ЕдиницаИзмеренияБазовойЦены КАК ЕдиницаИзмеренияБазовойЦены,
	|	МИНИМУМ(ДиапазоныЦенДляНаценкиСрезПоследних.ВерхняяГраница) КАК ВерхняяГраница
	|ПОМЕСТИТЬ ВремДинамическиеЦены
	|ИЗ
	|	ВремБазовыеЦены КАК БазовыеЦены
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДиапазоныЦенДляНаценки.СрезПоследних(&ТекДата, ) КАК ДиапазоныЦенДляНаценкиСрезПоследних
	|		ПО БазовыеЦены.БазоваяЦена < ДиапазоныЦенДляНаценкиСрезПоследних.ВерхняяГраница
	|			И БазовыеЦены.ТипЦен = ДиапазоныЦенДляНаценкиСрезПоследних.ТипЦен
	|
	|СГРУППИРОВАТЬ ПО
	|	БазовыеЦены.ХарактеристикаНоменклатуры,
	|	БазовыеЦены.СпособРасчетаЦены,
	|	БазовыеЦены.ТипЦен,
	|	БазовыеЦены.ВалютаТипЦены,
	|	БазовыеЦены.Номенклатура,
	|	БазовыеЦены.ВалютаБазовойЦены,
	|	БазовыеЦены.ЕдиницаИзмеренияБазовойЦены,
	|	БазовыеЦены.ПроцентСкидкиНаценки,
	|	БазовыеЦены.БазоваяЦена
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТипЦен,
	|	БазоваяЦена,
	|	ВерхняяГраница,
	|	ВалютаБазовойЦены,
	|	ВалютаТипаЦен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремБазовыеЦены
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДинамическиеЦены.Номенклатура КАК Номенклатура,
	|	ДинамическиеЦены.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ДинамическиеЦены.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|	ДинамическиеЦены.СпособРасчетаЦены КАК СпособРасчетаЦены,
	|	ДинамическиеЦены.ТипЦен КАК ТипЦен,
	|	ДинамическиеЦены.ВалютаТипаЦен КАК ВалютаТипаЦен,
	|	ЕСТЬNULL(КурсыВалютыЦены.Курс, 0) КАК КурсВалютыЦены,
	|	ЕСТЬNULL(КурсыВалютыЦены.Кратность, 0) КАК КратностьКурсаВалютыЦены,
	|	ДинамическиеЦены.БазоваяЦена КАК БазоваяЦена,
	|	ДинамическиеЦены.ВалютаБазовойЦены КАК ВалютаБазовойЦены,
	|	ЕСТЬNULL(КурсыВалютыБазовойЦены.Курс, 0) КАК КурсВалютыБазовойЦены,
	|	ЕСТЬNULL(КурсыВалютыБазовойЦены.Кратность, 0) КАК КратностьКурсаВалютыБазовойЦены,
	|	ДинамическиеЦены.ЕдиницаИзмеренияБазовойЦены КАК ЕдиницаИзмеренияБазовойЦены,
	|	ЕСТЬNULL(ДиапазоныЦенДляНаценкиСрезПоследних.Цена, 0) КАК ЦенаПоДиапазону,
	|	ДиапазоныЦенДляНаценкиСрезПоследних.Валюта КАК ВалютаЦеныПоДиапазону,
	|	ВЫБОР
	|		КОГДА ДинамическиеЦены.ВалютаТипаЦен = ДинамическиеЦены.ВалютаБазовойЦены
	|			ТОГДА 1
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЕСТЬNULL(КурсыВалютыЦены.Курс, 0) = 1
	|					ТОГДА ВЫБОР
	|							КОГДА ЕСТЬNULL(КурсыВалютыБазовойЦены.Кратность, 0) = 0
	|								ТОГДА 0
	|							ИНАЧЕ ЕСТЬNULL(КурсыВалютыБазовойЦены.Курс, 0) / ЕСТЬNULL(КурсыВалютыБазовойЦены.Кратность, 0)
	|						КОНЕЦ
	|				КОГДА ЕСТЬNULL(КурсыВалютыЦены.Курс, 0) <> 1
	|						И ЕСТЬNULL(КурсыВалютыБазовойЦены.Курс, 0) = 1
	|					ТОГДА ВЫБОР
	|							КОГДА ЕСТЬNULL(КурсыВалютыЦены.Курс, 0) = 0
	|								ТОГДА 0
	|							ИНАЧЕ ЕСТЬNULL(КурсыВалютыЦены.Кратность, 0) / ЕСТЬNULL(КурсыВалютыЦены.Курс, 0)
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ЕСТЬNULL(КурсыВалютыЦены.Курс, 0) * ЕСТЬNULL(КурсыВалютыБазовойЦены.Кратность, 0) = 0
	|							ТОГДА 0
	|						ИНАЧЕ ЕСТЬNULL(КурсыВалютыБазовойЦены.Курс, 0) * ЕСТЬNULL(КурсыВалютыЦены.Кратность, 0) / ЕСТЬNULL(КурсыВалютыЦены.Курс, 0) * ЕСТЬNULL(КурсыВалютыБазовойЦены.Кратность, 0)
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК КоэффициентПересчетаБазовойЦены
	|ПОМЕСТИТЬ ВремРасчетныеЦены
	|ИЗ
	|	ВремДинамическиеЦены КАК ДинамическиеЦены
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДиапазоныЦенДляНаценки.СрезПоследних(&ТекДата, ) КАК ДиапазоныЦенДляНаценкиСрезПоследних
	|		ПО ДинамическиеЦены.БазоваяЦена < ДиапазоныЦенДляНаценкиСрезПоследних.ВерхняяГраница
	|			И ДинамическиеЦены.ТипЦен = ДиапазоныЦенДляНаценкиСрезПоследних.ТипЦен
	|			И ДинамическиеЦены.ВерхняяГраница = ДиапазоныЦенДляНаценкиСрезПоследних.ВерхняяГраница
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ТекДата, ) КАК КурсыВалютыЦены
	|		ПО ДинамическиеЦены.ВалютаТипаЦен = КурсыВалютыЦены.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ТекДата, ) КАК КурсыВалютыБазовойЦены
	|		ПО ДинамическиеЦены.ВалютаБазовойЦены = КурсыВалютыБазовойЦены.Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремДинамическиеЦены
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры,
	|	ЦеныНоменклатурыСрезПоследних.ТипЦен,
	|	ЦеныНоменклатурыСрезПоследних.Валюта,
	|	ЦеныНоменклатурыСрезПоследних.Цена,
	|	ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения,
	|	ЦеныНоменклатурыСрезПоследних.ТипЦеныИдентификатор
	|ПОМЕСТИТЬ ВремЦеныНоменклатурыСрезПоследних
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетныеЦены.Номенклатура КАК Номенклатура,
	|		РасчетныеЦены.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		РасчетныеЦены.ТипЦен КАК ТипЦен,
	|		ВЫБОР
	|			КОГДА РасчетныеЦены.СпособРасчетаЦены = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаЦены.ПоПроцентнойНаценкеНаБазовыйТип)
	|				ТОГДА РасчетныеЦены.ВалютаТипаЦен
	|			ИНАЧЕ РасчетныеЦены.ВалютаЦеныПоДиапазону
	|		КОНЕЦ КАК Валюта,
	|		ВЫБОР
	|			КОГДА РасчетныеЦены.СпособРасчетаЦены = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаЦены.ПоПроцентнойНаценкеНаБазовыйТип)
	|				ТОГДА РасчетныеЦены.БазоваяЦена * РасчетныеЦены.КоэффициентПересчетаБазовойЦены * (1 + РасчетныеЦены.ПроцентСкидкиНаценки / 100)
	|			ИНАЧЕ РасчетныеЦены.ЦенаПоДиапазону
	|		КОНЕЦ КАК Цена,
	|		РасчетныеЦены.ЕдиницаИзмеренияБазовойЦены КАК ЕдиницаИзмерения,
	|		NULL КАК ТипЦеныИдентификатор
	|	ИЗ
	|		ВремРасчетныеЦены КАК РасчетныеЦены
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЦеныНоменклатурыСрезПоследних.Номенклатура,
	|		ЦеныНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры,
	|		ЦеныНоменклатурыСрезПоследних.ТипЦен,
	|		ЦеныНоменклатурыСрезПоследних.Валюта,
	|		ЦеныНоменклатурыСрезПоследних.Цена,
	|		ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения,
	|		ВЫБОР
	|			КОГДА ЦеныНоменклатурыСрезПоследних.ТипЦен.Б_Идентификатор = """"
	|				ТОГДА ЦеныНоменклатурыСрезПоследних.ТипЦен.Ссылка
	|			ИНАЧЕ ЦеныНоменклатурыСрезПоследних.ТипЦен.Б_Идентификатор
	|		КОНЕЦ
	|	ИЗ
	|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&ТекДата,
	|				НЕ ТипЦен.Рассчитывается
	|					И Номенклатура В
	|						(ВЫБРАТЬ
	|							ВремНоменклатураОтбор.Номенклатура
	|						ИЗ
	|							ВремНоменклатураОтбор)
	|					И ТипЦен В
	|						(ВЫБРАТЬ
	|							ВремТипыЦен.ТипЦены
	|						ИЗ
	|							ВремТипыЦен) {(ТипЦен).*}) КАК ЦеныНоменклатурыСрезПоследних) КАК ЦеныНоменклатурыСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремРасчетныеЦены
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЦеныНоменклатурыСрезПоследних.ТипЦен КАК ТипЦены,
	|	ЦеныНоменклатурыСрезПоследних.Валюта КАК ВалютаЦеныСсылка,
	|	ЦеныНоменклатурыСрезПоследних.Валюта.Наименование КАК ВалютаКод,
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
	|	ВЫБОР
	|		КОГДА ЦеныНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ЦеныНоменклатурыСрезПоследних.Цена
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЦенаБезХарактеристики,
	|	ЦеныНоменклатурыСрезПоследних.ТипЦен.ПорядокОкругления КАК ПорядокОкругления,
	|	ЦеныНоменклатурыСрезПоследних.ТипЦен.ОкруглятьВБольшуюСторону КАК ОкруглятьВБольшуюСторону,
	|	ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения КАК ЕдиницаИзмеренияЦены,
	|	ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент КАК Коэффициент,
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры КАК Характеристика
	|ПОМЕСТИТЬ ВремЦены
	|ИЗ
	|	ВремЦеныНоменклатурыСрезПоследних КАК ЦеныНоменклатурыСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремЦеныНоменклатурыСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КомплектующиеНоменклатуры.Комплектующая КАК Комплектующая
	|ПОМЕСТИТЬ ВремКомплектующиеНоменклатурыОтбор
	|ИЗ
	|	ВремНоменклатураОтбор КАК ВремНоменклатураОтбор
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КомплектующиеНоменклатуры КАК КомплектующиеНоменклатуры
	|		ПО ВремНоменклатураОтбор.Номенклатура = КомплектующиеНоменклатуры.Номенклатура
	|ГДЕ
	|	&ВыгружатьНаборы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Комплектующая
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВремНоменклатураОтбор.Номенклатура КАК Номенклатура,
	|	ЛОЖЬ КАК Комплектующая
	|ПОМЕСТИТЬ ВремНоменклатураОтбораИкомплектов
	|ИЗ
	|	ВремНоменклатураОтбор КАК ВремНоменклатураОтбор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВремКомплектующиеНоменклатурыОтбор.Комплектующая,
	|	ИСТИНА
	|ИЗ
	|	ВремКомплектующиеНоменклатурыОтбор КАК ВремКомплектующиеНоменклатурыОтбор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремНоменклатураОтбор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремКомплектующиеНоменклатурыОтбор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВремНоменклатураОтбораИкомплектов.Номенклатура КАК Объект,
	|	ВремНоменклатураОтбораИкомплектов.Номенклатура КАК Номенклатура,
	|	ВремНоменклатураОтбораИкомплектов.Номенклатура.Б_Идентификатор,
	|	ВЫБОР
	|		КОГДА ВремНоменклатураОтбораИкомплектов.Номенклатура.Б_Идентификатор = """"
	|			ТОГДА ВремНоменклатураОтбораИкомплектов.Номенклатура.Ссылка
	|		ИНАЧЕ ВремНоменклатураОтбораИкомплектов.Номенклатура.Б_Идентификатор
	|	КОНЕЦ КАК Идентификатор,
	|	ВремНоменклатураОтбораИкомплектов.Номенклатура.ВерсияДанных КАК ВерсияДанных,
	|	ВремНоменклатураОтбораИкомплектов.Номенклатура.ПометкаУдаления КАК ПометкаУдаления,
	|	ВремНоменклатураОтбораИкомплектов.Номенклатура.Код КАК Код,
	|	ВремНоменклатураОтбораИкомплектов.Номенклатура.Артикул КАК Артикул,
	|	ВремНоменклатураОтбораИкомплектов.Номенклатура.Наименование КАК Наименование,
	|	ВремНоменклатураОтбораИкомплектов.Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
	|	ВремНоменклатураОтбораИкомплектов.Номенклатура.ВестиУчетПоХарактеристикам КАК ВестиУчетПоХарактеристикам,
	|	ВремНоменклатураОтбораИкомплектов.Номенклатура.ЕдиницаХраненияОстатков.Вес КАК Вес,
	|	ВремНоменклатураОтбораИкомплектов.Номенклатура.СтранаПроисхождения.Наименование КАК СтранаПроисхождения,
	|	ВремНоменклатураОтбораИкомплектов.Номенклатура.ОсновнойПоставщик.Наименование КАК ОсновнойПоставщик,
	|	ВремНоменклатураОтбораИкомплектов.Номенклатура.ВидНоменклатуры.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ВремНоменклатураОтбораИкомплектов.Номенклатура.ДополнительноеОписаниеНоменклатурыВФорматеHTML КАК ДополнительноеОписаниеНоменклатурыВФорматеHTML,
	|	ВремНоменклатураОтбораИкомплектов.Номенклатура.Комментарий КАК Комментарий,
	|	ВремНоменклатураОтбораИкомплектов.Номенклатура.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	ВремНоменклатураОтбораИкомплектов.Номенклатура.Родитель КАК Родитель,
	|	ВЫБОР
	|		КОГДА ВремНоменклатураОтбораИкомплектов.Номенклатура.Родитель.Б_Идентификатор = """"
	|			ТОГДА ВремНоменклатураОтбораИкомплектов.Номенклатура.Родитель.Ссылка
	|		ИНАЧЕ ВремНоменклатураОтбораИкомплектов.Номенклатура.Родитель.Б_Идентификатор
	|	КОНЕЦ КАК ИдентификаторРодителя,
	|	ВремНоменклатураОтбораИкомплектов.Номенклатура.НомерГТД.Код КАК НомерГТД,
	|	ВремНоменклатураОтбораИкомплектов.Номенклатура.СтавкаНДС КАК СтавкаНДС,
	|	ВремНоменклатураОтбораИкомплектов.Номенклатура.ОсновноеИзображение КАК ОсновноеИзображение,
	|	ВремНоменклатураОтбораИкомплектов.Номенклатура.БазоваяЕдиницаИзмерения КАК БазоваяЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ВремНоменклатураОтбораИкомплектов.Номенклатура.БазоваяЕдиницаИзмерения.Б_Идентификатор = """"
	|			ТОГДА ВремНоменклатураОтбораИкомплектов.Номенклатура.БазоваяЕдиницаИзмерения.Код
	|		ИНАЧЕ ВремНоменклатураОтбораИкомплектов.Номенклатура.БазоваяЕдиницаИзмерения.Б_Идентификатор
	|	КОНЕЦ КАК ИдентификаторБазовойЕдиницы,
	|	ВремНоменклатураОтбораИкомплектов.Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры,
	|	ВЫБОР
	|		КОГДА ВремНоменклатураОтбораИкомплектов.Номенклатура.ВидНоменклатуры.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.товар)
	|			ТОГДА ВЫБОР
	|					КОГДА ВремНоменклатураОтбораИкомплектов.Номенклатура В
	|							(ВЫБРАТЬ
	|								КомплектующиеНоменклатуры.Номенклатура
	|							ИЗ
	|								РегистрСведений.КомплектующиеНоменклатуры КАК КомплектующиеНоменклатуры)
	|						ТОГДА 2
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВремНоменклатураОтбораИкомплектов.Номенклатура.ВидНоменклатуры.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Набор)
	|						ИЛИ ВремНоменклатураОтбораИкомплектов.Номенклатура.ВидНоменклатуры.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Комплект)
	|					ТОГДА 3
	|				ИНАЧЕ 4
	|			КОНЕЦ
	|	КОНЕЦ КАК ПриоритетСортировки,
	|	ВремНоменклатураОтбораИкомплектов.Комплектующая КАК ЭтоКомплектующая
	|ПОМЕСТИТЬ ВремНоменклатура
	|ИЗ
	|	ВремНоменклатураОтбораИкомплектов КАК ВремНоменклатураОтбораИкомплектов
	|ГДЕ
	|	(НЕ &КлассифицироватьПоЦеновымГруппам
	|			ИЛИ &КлассифицироватьПоЦеновымГруппам
	|				И НЕ ВремНоменклатураОтбораИкомплектов.Номенклатура.ЦеноваяГруппа = ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ВестиУчетПоХарактеристикам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВремНоменклатура.Номенклатура КАК Номенклатура,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика
	|ПОМЕСТИТЬ ВремНоменклатураСХарактеристикамиВся
	|ИЗ
	|	ВремНоменклатура КАК ВремНоменклатура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВремНоменклатура.Номенклатура,
	|	ХарактеристикиНоменклатуры.Ссылка
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВремНоменклатура КАК ВремНоменклатура
	|		ПО ХарактеристикиНоменклатуры.Владелец.Ссылка = ВремНоменклатура.Номенклатура
	|			И (ВремНоменклатура.ВестиУчетПоХарактеристикам)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремНоменклатураОтбораИкомплектов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Склады.Ссылка КАК Склад,
	|	ВЫБОР
	|		КОГДА Склады.Б_Идентификатор = """"
	|			ТОГДА Склады.Ссылка
	|		ИНАЧЕ Склады.Б_Идентификатор
	|	КОНЕЦ КАК Идентификатор
	|ПОМЕСТИТЬ ВремСклады
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	НЕ Склады.ЭтоГруппа
	|	И Склады.Ссылка В(&СписокСкладов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Остатки.Номенклатура,
	|	Остатки.ХарактеристикаНоменклатуры,
	|	Остатки.КоличествоОстаток,
	|	Остатки.Склад
	|ПОМЕСТИТЬ ВремТоварыНаСкладахОстаткиПоСкладам
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(
	|			,
	|			Номенклатура В
	|					(ВЫБРАТЬ
	|						ВремНоменклатура.Номенклатура
	|					ИЗ
	|						ВремНоменклатура)
	|				И Склад В
	|					(ВЫБРАТЬ
	|						ВремСклады.Склад
	|					ИЗ
	|						ВремСклады)) КАК Остатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Остатки.Номенклатура,
	|	Остатки.ХарактеристикаНоменклатуры,
	|	Остатки.Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Остатки.Номенклатура,
	|	Остатки.ХарактеристикаНоменклатуры,
	|	Остатки.КоличествоОстаток,
	|	Остатки.Склад
	|ПОМЕСТИТЬ ВремТоварыВРозницеОстаткиПоСкладам
	|ИЗ
	|	РегистрНакопления.ТоварыВРознице.Остатки(
	|			,
	|			Номенклатура В
	|					(ВЫБРАТЬ
	|						ВремНоменклатура.Номенклатура
	|					ИЗ
	|						ВремНоменклатура)
	|				И Склад В
	|					(ВЫБРАТЬ
	|						ВремСклады.Склад
	|					ИЗ
	|						ВремСклады)) КАК Остатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Остатки.Номенклатура,
	|	Остатки.ХарактеристикаНоменклатуры,
	|	Остатки.Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Остатки.Номенклатура,
	|	Остатки.ХарактеристикаНоменклатуры,
	|	Остатки.КоличествоОстаток,
	|	Остатки.Склад
	|ПОМЕСТИТЬ ВремТоварыВНТТОстаткиПоСкладам
	|ИЗ
	|	РегистрНакопления.ТоварыВНТТ.Остатки(
	|			,
	|			Номенклатура В
	|					(ВЫБРАТЬ
	|						ВремНоменклатура.Номенклатура
	|					ИЗ
	|						ВремНоменклатура)
	|				И Склад В
	|					(ВЫБРАТЬ
	|						ВремСклады.Склад
	|					ИЗ
	|						ВремСклады)) КАК Остатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Остатки.Номенклатура,
	|	Остатки.ХарактеристикаНоменклатуры,
	|	Остатки.Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Остатки.Номенклатура,
	|	Остатки.ХарактеристикаНоменклатуры,
	|	Остатки.КоличествоОстаток,
	|	Остатки.Склад
	|ПОМЕСТИТЬ ВремТоварыВРезервеНаСкладахОстаткиПоСкладам
	|ИЗ
	|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(
	|			,
	|			Номенклатура В
	|					(ВЫБРАТЬ
	|						ВремНоменклатура.Номенклатура
	|					ИЗ
	|						ВремНоменклатура)
	|				И Склад В
	|					(ВЫБРАТЬ
	|						ВремСклады.Склад
	|					ИЗ
	|						ВремСклады)) КАК Остатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Остатки.Номенклатура,
	|	Остатки.ХарактеристикаНоменклатуры,
	|	Остатки.Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Остатки.Номенклатура,
	|	Остатки.ХарактеристикаНоменклатуры,
	|	Остатки.КоличествоОстаток,
	|	Остатки.Склад
	|ПОМЕСТИТЬ ВремТоварыКПередачеСоСкладовОстаткиПоСкладам
	|ИЗ
	|	РегистрНакопления.ТоварыКПередачеСоСкладов.Остатки(
	|			,
	|			Номенклатура В
	|					(ВЫБРАТЬ
	|						ВремНоменклатура.Номенклатура
	|					ИЗ
	|						ВремНоменклатура)
	|				И Склад В
	|					(ВЫБРАТЬ
	|						ВремСклады.Склад
	|					ИЗ
	|						ВремСклады)) КАК Остатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Остатки.Номенклатура,
	|	Остатки.ХарактеристикаНоменклатуры,
	|	Остатки.Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НоменклатураСХарактеристиками.Номенклатура КАК Номенклатура,
	|	НоменклатураСХарактеристиками.Характеристика КАК Характеристика,
	|	ЕСТЬNULL(ТоварыОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ТоварыВРезервеНаСкладахОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ТоварыКПередачеСоСкладовОстатки.КоличествоОстаток, 0) КАК Остаток
	|ПОМЕСТИТЬ ВремОстатки
	|ИЗ
	|	ВремНоменклатураСХарактеристикамиВся КАК НоменклатураСХарактеристиками
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВремТоварыНаСкладахОстаткиПоСкладам КАК ТоварыОстатки
	|		ПО НоменклатураСХарактеристиками.Номенклатура = ТоварыОстатки.Номенклатура
	|			И НоменклатураСХарактеристиками.Характеристика = ТоварыОстатки.ХарактеристикаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВремТоварыВРезервеНаСкладахОстаткиПоСкладам КАК ТоварыВРезервеНаСкладахОстатки
	|		ПО НоменклатураСХарактеристиками.Номенклатура = ТоварыВРезервеНаСкладахОстатки.Номенклатура
	|			И НоменклатураСХарактеристиками.Характеристика = ТоварыВРезервеНаСкладахОстатки.ХарактеристикаНоменклатуры
	|			И (ТоварыОстатки.Склад = ТоварыВРезервеНаСкладахОстатки.Склад)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВремТоварыКПередачеСоСкладовОстаткиПоСкладам КАК ТоварыКПередачеСоСкладовОстатки
	|		ПО НоменклатураСХарактеристиками.Номенклатура = ТоварыКПередачеСоСкладовОстатки.Номенклатура
	|			И НоменклатураСХарактеристиками.Характеристика = ТоварыКПередачеСоСкладовОстатки.ХарактеристикаНоменклатуры
	|			И (ТоварыОстатки.Склад = ТоварыКПередачеСоСкладовОстатки.Склад)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НоменклатураСХарактеристиками.Номенклатура,
	|	НоменклатураСХарактеристиками.Характеристика,
	|	ЕСТЬNULL(ТоварыОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ТоварыВРезервеНаСкладахОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ТоварыКПередачеСоСкладовОстатки.КоличествоОстаток, 0)
	|ИЗ
	|	ВремНоменклатураСХарактеристикамиВся КАК НоменклатураСХарактеристиками
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВремТоварыВРозницеОстаткиПоСкладам КАК ТоварыОстатки
	|		ПО НоменклатураСХарактеристиками.Номенклатура = ТоварыОстатки.Номенклатура
	|			И НоменклатураСХарактеристиками.Характеристика = ТоварыОстатки.ХарактеристикаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВремТоварыВРезервеНаСкладахОстаткиПоСкладам КАК ТоварыВРезервеНаСкладахОстатки
	|		ПО НоменклатураСХарактеристиками.Номенклатура = ТоварыВРезервеНаСкладахОстатки.Номенклатура
	|			И НоменклатураСХарактеристиками.Характеристика = ТоварыВРезервеНаСкладахОстатки.ХарактеристикаНоменклатуры
	|			И (ТоварыОстатки.Склад = ТоварыВРезервеНаСкладахОстатки.Склад)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВремТоварыКПередачеСоСкладовОстаткиПоСкладам КАК ТоварыКПередачеСоСкладовОстатки
	|		ПО НоменклатураСХарактеристиками.Номенклатура = ТоварыКПередачеСоСкладовОстатки.Номенклатура
	|			И НоменклатураСХарактеристиками.Характеристика = ТоварыКПередачеСоСкладовОстатки.ХарактеристикаНоменклатуры
	|			И (ТоварыОстатки.Склад = ТоварыКПередачеСоСкладовОстатки.Склад)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НоменклатураСХарактеристиками.Номенклатура,
	|	НоменклатураСХарактеристиками.Характеристика,
	|	ЕСТЬNULL(ТоварыОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ТоварыВРезервеНаСкладахОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ТоварыКПередачеСоСкладовОстатки.КоличествоОстаток, 0)
	|ИЗ
	|	ВремНоменклатураСХарактеристикамиВся КАК НоменклатураСХарактеристиками
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВремТоварыВНТТОстаткиПоСкладам КАК ТоварыОстатки
	|		ПО НоменклатураСХарактеристиками.Номенклатура = ТоварыОстатки.Номенклатура
	|			И НоменклатураСХарактеристиками.Характеристика = ТоварыОстатки.ХарактеристикаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВремТоварыВРезервеНаСкладахОстаткиПоСкладам КАК ТоварыВРезервеНаСкладахОстатки
	|		ПО НоменклатураСХарактеристиками.Номенклатура = ТоварыВРезервеНаСкладахОстатки.Номенклатура
	|			И НоменклатураСХарактеристиками.Характеристика = ТоварыВРезервеНаСкладахОстатки.ХарактеристикаНоменклатуры
	|			И (ТоварыОстатки.Склад = ТоварыВРезервеНаСкладахОстатки.Склад)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВремТоварыКПередачеСоСкладовОстаткиПоСкладам КАК ТоварыКПередачеСоСкладовОстатки
	|		ПО НоменклатураСХарактеристиками.Номенклатура = ТоварыКПередачеСоСкладовОстатки.Номенклатура
	|			И НоменклатураСХарактеристиками.Характеристика = ТоварыКПередачеСоСкладовОстатки.ХарактеристикаНоменклатуры
	|			И (ТоварыОстатки.Склад = ТоварыКПередачеСоСкладовОстатки.Склад)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремТоварыНаСкладахОстаткиПоСкладам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремТоварыВРозницеОстаткиПоСкладам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремТоварыВНТТОстаткиПоСкладам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремТоварыВРезервеНаСкладахОстаткиПоСкладам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремТоварыКПередачеСоСкладовОстаткиПоСкладам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВремНоменклатура.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ВремНоменклатура.Идентификатор = """"
	|			ТОГДА ВремНоменклатура.Номенклатура
	|		ИНАЧЕ ВремНоменклатура.Идентификатор
	|	КОНЕЦ КАК НоменклатураИдентификатор,
	|	ВремНоменклатура.ВерсияДанных КАК НоменклатураВерсияДанных,
	|	ВремНоменклатура.ПометкаУдаления КАК НоменклатураПометкаУдаления,
	|	ВремНоменклатура.Наименование,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
	|	"""" КАК ХарактеристикаИдентификатор,
	|	"""" КАК ХарактеристикаВерсияДанных,
	|	"""" КАК ХарактеристикаПометкаУдаления,
	|	"""" КАК ХарактеристикаНаименование,
	|	ВремНоменклатура.ВестиУчетПоХарактеристикам,
	|	ВремНоменклатура.Номенклатура.Набор
	|		ИЛИ ВремНоменклатура.Номенклатура.Комплект КАК КомплектНабор,
	|	ВремНоменклатура.ПриоритетСортировки
	|ПОМЕСТИТЬ ВремНоменклатураСХарактеристиками
	|ИЗ
	|	ВремНоменклатура КАК ВремНоменклатура
	|ГДЕ
	|	(ВремНоменклатура.Номенклатура.ВестиУчетПоХарактеристикам
	|				И &ВыгружатьНоменклатуруКакПредложение
	|			ИЛИ НЕ ВремНоменклатура.Номенклатура.ВестиУчетПоХарактеристикам)
	|	И ВЫБОР
	|			КОГДА &ВыгружатьТолькоСЦеной
	|					И НЕ ВремНоменклатура.ЭтоКомплектующая
	|				ТОГДА (ВремНоменклатура.Номенклатура, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) В
	|						(ВЫБРАТЬ
	|							ВремЦены.Номенклатура,
	|							ВремЦены.Характеристика
	|						ИЗ
	|							ВремЦены КАК ВремЦены)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВремНоменклатура.Номенклатура,
	|	ВЫБОР
	|		КОГДА ВремНоменклатура.Идентификатор = """"
	|			ТОГДА ВремНоменклатура.Номенклатура
	|		ИНАЧЕ ВремНоменклатура.Идентификатор
	|	КОНЕЦ,
	|	ВремНоменклатура.ВерсияДанных,
	|	ВремНоменклатура.ПометкаУдаления,
	|	ВремНоменклатура.Наименование,
	|	ХарактеристикиНоменклатуры.Ссылка,
	|	ВЫБОР
	|		КОГДА ХарактеристикиНоменклатуры.Б_Идентификатор = """"
	|			ТОГДА ХарактеристикиНоменклатуры.Ссылка
	|		ИНАЧЕ ХарактеристикиНоменклатуры.Б_Идентификатор
	|	КОНЕЦ,
	|	ХарактеристикиНоменклатуры.ВерсияДанных,
	|	ХарактеристикиНоменклатуры.ПометкаУдаления,
	|	ХарактеристикиНоменклатуры.Наименование,
	|	ИСТИНА,
	|	ВремНоменклатура.Номенклатура.Набор
	|		ИЛИ ВремНоменклатура.Номенклатура.Комплект,
	|	ВремНоменклатура.ПриоритетСортировки
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВремНоменклатура КАК ВремНоменклатура
	|		ПО ХарактеристикиНоменклатуры.Владелец.Ссылка = ВремНоменклатура.Номенклатура
	|			И (ВремНоменклатура.ВестиУчетПоХарактеристикам)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ВыгружатьТолькоСЦеной
	|					И НЕ ВремНоменклатура.ЭтоКомплектующая
	|				ТОГДА ХарактеристикиНоменклатуры.Ссылка В
	|						(ВЫБРАТЬ
	|							ВремЦены.Характеристика
	|						ИЗ
	|							ВремЦены КАК ВремЦены)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА НЕ &ВыгружатьПредложенияТолькоСОстатками ИЛИ ВремНоменклатура.ЭтоКомплектующая
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ (ВремНоменклатура.Номенклатура, ХарактеристикиНоменклатуры.Ссылка) В
	|					(ВЫБРАТЬ
	|						ВремОстатки.Номенклатура,
	|						ВремОстатки.Характеристика
	|					ИЗ
	|						ВремОстатки КАК ВремОстатки)
	|		КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремНоменклатураСХарактеристикамиВся
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремЦены";
	
	Если ПараметрыОбмена.ВыгружатьНаборы тогда
		
		ТекстЗапроса = ТекстЗапроса + "	
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КомплектующиеНоменклатуры.Количество * КомплектующиеНоменклатуры.ЕдиницаИзмерения.Коэффициент КАК Количество,
		|	ВремНоменклатураСХарактеристиками.Номенклатура КАК Номенклатура,
		|	ВремНоменклатураСХарактеристиками.НоменклатураИдентификатор,
		|	ВремНоменклатураСХарактеристиками.Характеристика КАК Характеристика,
		|	ВремНоменклатураСХарактеристиками.ХарактеристикаИдентификатор,
		|	КомплектующиеНоменклатуры.Комплектующая,
		|	ВЫБОР
		|		КОГДА КомплектующиеНоменклатуры.Комплектующая.Б_Идентификатор = """"
		|			ТОГДА КомплектующиеНоменклатуры.Комплектующая
		|		ИНАЧЕ КомплектующиеНоменклатуры.Комплектующая.Б_Идентификатор
		|	КОНЕЦ КАК ИдентификаторКомплектующей,
		|	КомплектующиеНоменклатуры.ХарактеристикаКомплектующей,
		|	ВЫБОР
		|		КОГДА КомплектующиеНоменклатуры.ХарактеристикаКомплектующей.Б_Идентификатор = """"
		|			ТОГДА КомплектующиеНоменклатуры.ХарактеристикаКомплектующей
		|		ИНАЧЕ КомплектующиеНоменклатуры.ХарактеристикаКомплектующей.Б_Идентификатор
		|	КОНЕЦ КАК ИдентификаторХарактеристикиКомплектующей,
		|	КомплектующиеНоменклатуры.Комплектующая.Наименование,
		|	КомплектующиеНоменклатуры.ХарактеристикаКомплектующей.Наименование
		|ПОМЕСТИТЬ ВремКомплектующиеНоменклатуры
		|ИЗ
		|	ВремНоменклатураСХарактеристиками КАК ВремНоменклатураСХарактеристиками
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КомплектующиеНоменклатуры КАК КомплектующиеНоменклатуры
		|		ПО ВремНоменклатураСХарактеристиками.Номенклатура = КомплектующиеНоменклатуры.Номенклатура
		|			И ВремНоменклатураСХарактеристиками.Характеристика = КомплектующиеНоменклатуры.ХарактеристикаНоменклатуры
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика";
	КонецЕсли;
	
	ЗапросПоСвойствам = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СвойстваОбъектов.Ссылка КАК СвойствоНоменклатуры,
	|	ВЫБОР
	|		КОГДА СвойстваОбъектов.Б_Идентификатор = """"
	|			ТОГДА СвойстваОбъектов.Ссылка
	|		ИНАЧЕ СвойстваОбъектов.Б_Идентификатор
	|	КОНЕЦ КАК Идентификатор,
	|	СвойстваОбъектов.ВерсияДанных КАК ВерсияДанных,
	|	СвойстваОбъектов.Наименование КАК СвойствоНаименование,
	|	СвойстваОбъектов.НазначениеСвойства КАК НазначениеСвойства,
	|	СвойстваОбъектов.ПометкаУдаления,
	|	ВЫБОР
	|		КОГДА СвойстваОбъектов.НазначениеСвойства = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоНоменклатуры
	|ПОМЕСТИТЬ ВремВсеСвойства
	|ИЗ
	|	ПланВидовХарактеристик.СвойстваОбъектов КАК СвойстваОбъектов
	|ГДЕ
	|	СвойстваОбъектов.Ссылка В(&СписокСвойств)
	|{ГДЕ
	|	СвойстваОбъектов.Ссылка.* КАК СвойствоНоменклатуры}
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СвойствоНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВремНоменклатура.Номенклатура КАК Номенклатура,
	|	ВложенныйЗапрос.СвойствоНоменклатуры КАК Свойство,
	|	ВложенныйЗапрос.ИдентификаторСвойства
	|ПОМЕСТИТЬ ВремНазначенныеСвойстваТовара
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		НазначенияСвойствОбъектов.Объект КАК Объект,
	|		ВремВсеСвойства.СвойствоНоменклатуры КАК СвойствоНоменклатуры,
	|		ВремВсеСвойства.Идентификатор КАК ИдентификаторСвойства
	|	ИЗ
	|		ВремВсеСвойства КАК ВремВсеСвойства
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НазначенияСвойствОбъектов КАК НазначенияСвойствОбъектов
	|			ПО (НазначенияСвойствОбъектов.Объект ЕСТЬ NULL 
	|					ИЛИ ВремВсеСвойства.СвойствоНоменклатуры = НазначенияСвойствОбъектов.Свойство)
	|	ГДЕ
	|		ВремВсеСвойства.ЭтоНоменклатуры = ИСТИНА) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВремНоменклатура КАК ВремНоменклатура
	|		ПО (ВложенныйЗапрос.Объект ЕСТЬ NULL 
	|				ИЛИ ВложенныйЗапрос.Объект = ВремНоменклатура.Номенклатура
	|				ИЛИ ВложенныйЗапрос.Объект = ВремНоменклатура.Номенклатура.Родитель
	|				ИЛИ ВложенныйЗапрос.Объект = ВремНоменклатура.Номенклатура.Родитель.Родитель
	|				ИЛИ ВложенныйЗапрос.Объект = ВремНоменклатура.Номенклатура.Родитель.Родитель.Родитель
	|				ИЛИ ВложенныйЗапрос.Объект = ВремНоменклатура.Номенклатура.Родитель.Родитель.Родитель.Родитель
	|				ИЛИ ВложенныйЗапрос.Объект = ВремНоменклатура.Номенклатура.Родитель.Родитель.Родитель.Родитель.Родитель
	|				ИЛИ ВложенныйЗапрос.Объект = ВремНоменклатура.Номенклатура.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель
	|				ИЛИ ВложенныйЗапрос.Объект = ВремНоменклатура.Номенклатура.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель
	|				ИЛИ ВложенныйЗапрос.Объект = ВремНоменклатура.Номенклатура.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель
	|				ИЛИ ВложенныйЗапрос.Объект = ВремНоменклатура.Номенклатура.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Свойство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВремНазначенныеСвойстваТовара.Номенклатура КАК Номенклатура,
	|	ВремНазначенныеСвойстваТовара.ИдентификаторСвойства,
	|	ЗначенияСвойствОбъектов.Значение,
	|	ВЫБОР
	|		КОГДА ЗначенияСвойствОбъектов.Значение.Б_Идентификатор = """"
	|				ИЛИ ЗначенияСвойствОбъектов.Значение.Б_Идентификатор ЕСТЬ NULL 
	|			ТОГДА ЗначенияСвойствОбъектов.Значение
	|		ИНАЧЕ ЗначенияСвойствОбъектов.Значение.Б_Идентификатор
	|	КОНЕЦ КАК ИдентификаторЗначения
	|ПОМЕСТИТЬ ВремЗначенияСвойствТовара
	|ИЗ
	|	ВремНазначенныеСвойстваТовара КАК ВремНазначенныеСвойстваТовара
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО ВремНазначенныеСвойстваТовара.Номенклатура = ЗначенияСвойствОбъектов.Объект
	|			И ВремНазначенныеСвойстваТовара.Свойство = ЗначенияСвойствОбъектов.Свойство
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВремНоменклатураСХарактеристиками.Номенклатура КАК Номенклатура,
	|	ВремНоменклатураСХарактеристиками.Характеристика КАК Характеристика,
	|	ВложенныйЗапрос.Значение КАК Значение,
	|	ВложенныйЗапрос.ИдентификаторСвойства,
	|	ВложенныйЗапрос.Свойство.Наименование КАК СвойствоНаименование,
	|	ВложенныйЗапрос.Свойство,
	|	ВложенныйЗапрос.ИдентификаторЗначения,
	|	ВложенныйЗапрос.БулевоЗначение
	|ПОМЕСТИТЬ ВремЗначенияСвойствХарактеристик
	|ИЗ
	|	ВремНоменклатураСХарактеристиками КАК ВремНоменклатураСХарактеристиками
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ЗначенияСвойствОбъектов.Объект КАК Объект,
	|			ЗначенияСвойствОбъектов.Свойство КАК Свойство,
	|			ЗначенияСвойствОбъектов.Значение КАК Значение,
	|			ВремВсеСвойства.Идентификатор КАК ИдентификаторСвойства,
	|			ВЫБОР
	|				КОГДА ЗначенияСвойствОбъектов.Значение.Б_Идентификатор = """"
	|						ИЛИ ЗначенияСвойствОбъектов.Значение.Б_Идентификатор ЕСТЬ NULL 
	|					ТОГДА ЗначенияСвойствОбъектов.Значение
	|				ИНАЧЕ ЗначенияСвойствОбъектов.Значение.Б_Идентификатор
	|			КОНЕЦ КАК ИдентификаторЗначения,
	|			ВЫБОР
	|				КОГДА ТИПЗНАЧЕНИЯ(ЗначенияСвойствОбъектов.Значение) = ТИП(БУЛЕВО)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ КАК БулевоЗначение
	|		ИЗ
	|			РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|				ЛЕВОЕ СОЕДИНЕНИЕ ВремВсеСвойства КАК ВремВсеСвойства
	|				ПО ЗначенияСвойствОбъектов.Свойство = ВремВсеСвойства.СвойствоНоменклатуры) КАК ВложенныйЗапрос
	|		ПО ВремНоменклатураСХарактеристиками.Характеристика = ВложенныйЗапрос.Объект
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремНазначенныеСвойстваТовара";
	
	
	ЗапросПоКартинкам =   "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВремНоменклатура.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(ХранилищеДополнительнойИнформации.Ссылка, ЗНАЧЕНИЕ(Справочник.ХранилищеДополнительнойИнформации.ПустаяСсылка)) КАК ХранилищеСсылка
	|ПОМЕСТИТЬ ВремФайлыНоменклатуры
	|ИЗ
	|	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВремНоменклатура КАК ВремНоменклатура
	|		ПО (ВремНоменклатура.Номенклатура = ХранилищеДополнительнойИнформации.Объект)
	|ГДЕ
	|	НЕ ХранилищеДополнительнойИнформации.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Изображения.ХранилищеСсылка,
	|	ВЫБОР
	|		КОГДА ХранилищеДополнительнойИнформации.Ссылка ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК НадоВыгружать,
	|	Изображения.Номенклатура КАК Номенклатура,
	|	ХранилищеДополнительнойИнформации.Наименование
	|ПОМЕСТИТЬ ВремКартинки
	|ИЗ
	|	ВремФайлыНоменклатуры КАК Изображения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
	|		ПО Изображения.ХранилищеСсылка = ХранилищеДополнительнойИнформации.Ссылка
	|			И (ВЫБОР
	|				КОГДА &ВыгружатьВсеКартинки
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ХранилищеДополнительнойИнформации.Ссылка В
	|						(ВЫБРАТЬ
	|							ХранилищеДополнительнойИнформацииИзменения.Ссылка
	|						ИЗ
	|							Справочник.ХранилищеДополнительнойИнформации.Изменения КАК ХранилищеДополнительнойИнформацииИзменения
	|						ГДЕ
	|							ХранилищеДополнительнойИнформацииИзменения.Узел = &Узел)
	|			КОНЕЦ)
	|ГДЕ
	|	Изображения.ХранилищеСсылка.ВидДанных = ЗНАЧЕНИЕ(Перечисление.ВидыДополнительнойИнформацииОбъектов.Изображение)
	|	И НЕ Изображения.ХранилищеСсылка = ЗНАЧЕНИЕ(Справочник.ХранилищеДополнительнойИнформации.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Изображения.ХранилищеСсылка,
	|	Изображения.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ХранилищеДополнительнойИнформации.Ссылка ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК НадоВыгружать,
	|	ХранилищеДополнительнойИнформации.Наименование
	|ПОМЕСТИТЬ ВремФайлы
	|ИЗ
	|	ВремФайлыНоменклатуры КАК Изображения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
	|		ПО Изображения.ХранилищеСсылка = ХранилищеДополнительнойИнформации.Ссылка
	|			И (ВЫБОР
	|				КОГДА &ВыгружатьВсеКартинки
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ХранилищеДополнительнойИнформации.Ссылка В
	|						(ВЫБРАТЬ
	|							ХранилищеДополнительнойИнформацииИзменения.Ссылка
	|						ИЗ
	|							Справочник.ХранилищеДополнительнойИнформации.Изменения КАК ХранилищеДополнительнойИнформацииИзменения
	|						ГДЕ
	|							ХранилищеДополнительнойИнформацииИзменения.Узел = &Узел)
	|			КОНЕЦ)
	|ГДЕ
	|	Изображения.ХранилищеСсылка.ВидДанных = ЗНАЧЕНИЕ(Перечисление.ВидыДополнительнойИнформацииОбъектов.Файл)
	|	И НЕ Изображения.ХранилищеСсылка = ЗНАЧЕНИЕ(Справочник.ХранилищеДополнительнойИнформации.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремФайлыНоменклатуры";
	
	ЗапросПоКартинкамИФайламПредложений ="ВЫБРАТЬ
	|	Б_ХарактеристикиНоменклатурыПрисоединенныеФайлы.Ссылка КАК Файл,
	|	ВремНоменклатураСХарактеристиками.Номенклатура,
	|	ВремНоменклатураСХарактеристиками.Характеристика,
	|	Б_ХарактеристикиНоменклатурыПрисоединенныеФайлы.Расширение,
	|	Б_ХарактеристикиНоменклатурыПрисоединенныеФайлы.Описание,
	|	Б_ХарактеристикиНоменклатурыПрисоединенныеФайлы.Наименование,
	|	Б_ХарактеристикиНоменклатурыПрисоединенныеФайлы.Основная КАК Основная,
	|	Б_ХарактеристикиНоменклатурыПрисоединенныеФайлы.ДатаСоздания
	|ПОМЕСТИТЬ ВремХарактеристикаНоменклатурыСВсемиПрисоединеннымиФайлами
	|ИЗ
	|	ВремНоменклатураСХарактеристиками КАК ВремНоменклатураСХарактеристиками
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Б_ХарактеристикиНоменклатурыПрисоединенныеФайлы КАК Б_ХарактеристикиНоменклатурыПрисоединенныеФайлы
	|		ПО ВремНоменклатураСХарактеристиками.Характеристика = Б_ХарактеристикиНоменклатурыПрисоединенныеФайлы.Владелец
	|			И (НЕ Б_ХарактеристикиНоменклатурыПрисоединенныеФайлы.ПометкаУдаления)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Файл
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВремХарактеристикаНоменклатурыСВсемиПрисоединеннымиФайлами.Файл
	|ПОМЕСТИТЬ ВремХарактеристикаНоменклатурыСНужнымиПрисоединеннымиФайлами
	|ИЗ
	|	ВремХарактеристикаНоменклатурыСВсемиПрисоединеннымиФайлами КАК ВремХарактеристикаНоменклатурыСВсемиПрисоединеннымиФайлами
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ВыгружатьВсеКартинки
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ВремХарактеристикаНоменклатурыСВсемиПрисоединеннымиФайлами.Файл В
	|					(ВЫБРАТЬ
	|						Б_ХарактеристикиНоменклатурыПрисоединенныеФайлыИзменения.Ссылка
	|					ИЗ
	|						Справочник.Б_ХарактеристикиНоменклатурыПрисоединенныеФайлы.Изменения КАК Б_ХарактеристикиНоменклатурыПрисоединенныеФайлыИзменения
	|					ГДЕ
	|						Б_ХарактеристикиНоменклатурыПрисоединенныеФайлыИзменения.Узел = &Узел)
	|		КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВремХарактеристикаНоменклатурыСВсемиПрисоединеннымиФайлами.Файл
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВремХарактеристикаНоменклатурыСНужнымиПрисоединеннымиФайлами.Файл КАК Файл,
	|	Б_ПрисоединенныеФайлыХарактеристикНоменклатуры.ХранимыйФайл КАК ХранимыйФайл
	|ПОМЕСТИТЬ ВремНужныеФайлыХарактеристикНоменклатуры
	|ИЗ
	|	ВремХарактеристикаНоменклатурыСНужнымиПрисоединеннымиФайлами КАК ВремХарактеристикаНоменклатурыСНужнымиПрисоединеннымиФайлами
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Б_ПрисоединенныеФайлыХарактеристикНоменклатуры КАК Б_ПрисоединенныеФайлыХарактеристикНоменклатуры
	|		ПО ВремХарактеристикаНоменклатурыСНужнымиПрисоединеннымиФайлами.Файл = Б_ПрисоединенныеФайлыХарактеристикНоменклатуры.ПрисоединенныйФайл
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Файл
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремХарактеристикаНоменклатурыСНужнымиПрисоединеннымиФайлами
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВремХарактеристикаНоменклатурыСВсемиПрисоединеннымиФайлами.Номенклатура КАК Номенклатура,
	|	ВремХарактеристикаНоменклатурыСВсемиПрисоединеннымиФайлами.Файл,
	|	ВремХарактеристикаНоменклатурыСВсемиПрисоединеннымиФайлами.Наименование,
	|	ВремХарактеристикаНоменклатурыСВсемиПрисоединеннымиФайлами.Описание,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыХраненияФайлов.ВИнформационнойБазе) КАК ТипХраненияФайла,
	|	ВремХарактеристикаНоменклатурыСВсемиПрисоединеннымиФайлами.Расширение,
	|	ВремХарактеристикаНоменклатурыСВсемиПрисоединеннымиФайлами.Основная,
	|	ВремНужныеФайлыХарактеристикНоменклатуры.ХранимыйФайл,
	|	ВремХарактеристикаНоменклатурыСВсемиПрисоединеннымиФайлами.ДатаСоздания,
	|	ВЫБОР
	|		КОГДА ВремНужныеФайлыХарактеристикНоменклатуры.ХранимыйФайл ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК НадоВыгружать,
	|	ВЫБОР
	|		КОГДА ВремХарактеристикаНоменклатурыСВсемиПрисоединеннымиФайлами.Расширение В (&СписокРасширенийКартинок)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоКартинка,
	|	ВремХарактеристикаНоменклатурыСВсемиПрисоединеннымиФайлами.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ВремФайлыХарактеристикНоменклатуры
	|ИЗ
	|	ВремХарактеристикаНоменклатурыСВсемиПрисоединеннымиФайлами КАК ВремХарактеристикаНоменклатурыСВсемиПрисоединеннымиФайлами
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВремНужныеФайлыХарактеристикНоменклатуры КАК ВремНужныеФайлыХарактеристикНоменклатуры
	|		ПО ВремХарактеристикаНоменклатурыСВсемиПрисоединеннымиФайлами.Файл = ВремНужныеФайлыХарактеристикНоменклатуры.Файл
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремХарактеристикаНоменклатурыСВсемиПрисоединеннымиФайлами
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремНужныеФайлыХарактеристикНоменклатуры";
	
	ЗапросПоШтрихКодам = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВремНоменклатураСХарактеристиками.Номенклатура КАК Номенклатура,
	|	ВремНоменклатураСХарактеристиками.Характеристика КАК Характеристика,
	|	Штрихкоды.Штрихкод
	|ПОМЕСТИТЬ ВремШтрихКоды
	|ИЗ
	|	ВремНоменклатураСХарактеристиками КАК ВремНоменклатураСХарактеристиками
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
	|		ПО ВремНоменклатураСХарактеристиками.Номенклатура = Штрихкоды.Владелец
	|			И ВремНоменклатураСХарактеристиками.Характеристика = Штрихкоды.ХарактеристикаНоменклатуры
	|			И ВремНоменклатураСХарактеристиками.Номенклатура.ЕдиницаХраненияОстатков = Штрихкоды.ЕдиницаИзмерения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика";
	
	ЗапросПоПланируемойДатеПоступления = "ВЫБРАТЬ
	|	ЗаказыПоставщикамОстатки.Номенклатура КАК Номенклатура,
	|	ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.ДатаПоступления КАК ДатаПоступления,
	|	ЗаказыПоставщикамОстатки.КоличествоОстаток КАК Количество
	|ПОМЕСТИТЬ ВремПланируемыеДатыПоступления
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.Остатки КАК ЗаказыПоставщикамОстатки
	|ГДЕ
	|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.ДатаПоступления >= &ТекДата
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика";
	
	
	ЗапросПоЦенам =  "ВЫБРАТЬ
	|	ТипыЦенНоменклатуры.Ссылка КАК ТипЦены,
	|	ТипыЦенНоменклатуры.ВалютаЦены КАК ВалютаЦены,
	|	ТипыЦенНоменклатуры.Рассчитывается КАК Рассчитывается,
	|	ТипыЦенНоменклатуры.БазовыйТипЦен КАК БазовыйТипЦен,
	|	ТипыЦенНоменклатуры.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|	ВЫБОР
	|		КОГДА ТипыЦенНоменклатуры.Б_Идентификатор = """"
	|			ТОГДА ТипыЦенНоменклатуры.Ссылка
	|		ИНАЧЕ ТипыЦенНоменклатуры.Б_Идентификатор
	|	КОНЕЦ КАК Идентификатор,
	|	ТипыЦенНоменклатуры.СпособРасчетаЦены КАК СпособРасчетаЦены
	|ПОМЕСТИТЬ ВремВсеТипыЦен
	|ИЗ
	|	Справочник.ТипыЦенНоменклатуры КАК ТипыЦенНоменклатуры
	|ГДЕ
	|	(ТипыЦенНоменклатуры.Ссылка В
	|				(ВЫБРАТЬ
	|					ВремТипыЦен.ТипЦены
	|				ИЗ
	|					ВремТипыЦен)
	|			ИЛИ НЕ ТипыЦенНоменклатуры.Рассчитывается)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТипЦены
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК БазоваяЦена,
	|	ЦеныНоменклатурыСрезПоследних.Валюта КАК ВалютаБазовойЦены,
	|	ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения КАК ЕдиницаИзмеренияБазовойЦены,
	|	ВЫБОР
	|		КОГДА ПроцентыСкидкиНаценкиДинамическихЦенСрезПоследних.ПроцентСкидкиНаценки ЕСТЬ NULL 
	|			ТОГДА ВремВсеТипыЦен.ПроцентСкидкиНаценки
	|		ИНАЧЕ ПроцентыСкидкиНаценкиДинамическихЦенСрезПоследних.ПроцентСкидкиНаценки
	|	КОНЕЦ КАК ПроцентСкидкиНаценки,
	|	ВремВсеТипыЦен.ТипЦены КАК ТипЦен,
	|	ВремВсеТипыЦен.СпособРасчетаЦены КАК СпособРасчетаЦены,
	|	ВремВсеТипыЦен.Идентификатор КАК ТипЦеныИдентификатор,
	|	ВремВсеТипыЦен.ВалютаЦены КАК ВалютаТипЦены
	|ПОМЕСТИТЬ ВремБазовыеЦены
	|ИЗ
	|	ВремВсеТипыЦен КАК ВремВсеТипыЦен
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&ТекДата,
	|				(Номенклатура, ХарактеристикаНоменклатуры) В
	|						(ВЫБРАТЬ
	|							ВремНоменклатураСХарактеристиками.Номенклатура,
	|							ВремНоменклатураСХарактеристиками.Характеристика
	|						ИЗ
	|							ВремНоменклатураСХарактеристиками)
	|					И ТипЦен В
	|						(ВЫБРАТЬ
	|							ВремВсеТипыЦен.ТипЦены
	|						ИЗ
	|							ВремВсеТипыЦен)
	|					И ТипЦен В
	|						(ВЫБРАТЬ
	|							ВремВсеТипыЦен.ТипЦены
	|						ИЗ
	|							ВремВсеТипыЦен)) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО (ВремВсеТипыЦен.Рассчитывается)
	|			И (ЦеныНоменклатурыСрезПоследних.ТипЦен = ВремВсеТипыЦен.БазовыйТипЦен)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&ТекДата,
	|				(Номенклатура, ХарактеристикаНоменклатуры) В
	|						(ВЫБРАТЬ
	|							ВремНоменклатураСХарактеристиками.Номенклатура,
	|							ВремНоменклатураСХарактеристиками.Характеристика
	|						ИЗ
	|							ВремНоменклатураСХарактеристиками)
	|					И ТипЦен В
	|						(ВЫБРАТЬ
	|							ВремВсеТипыЦен.ТипЦены
	|						ИЗ
	|							ВремВсеТипыЦен)) КАК ПроцентыСкидкиНаценкиДинамическихЦенСрезПоследних
	|		ПО (ПроцентыСкидкиНаценкиДинамическихЦенСрезПоследних.ТипЦен = ВремВсеТипыЦен.ТипЦены)
	|			И (ПроцентыСкидкиНаценкиДинамическихЦенСрезПоследних.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура)
	|			И (ПроцентыСкидкиНаценкиДинамическихЦенСрезПоследних.ХарактеристикаНоменклатуры = ЦеныНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры)
	|			И (ПроцентыСкидкиНаценкиДинамическихЦенСрезПоследних.Валюта = ВремВсеТипыЦен.ВалютаЦены)
	|			И (ПроцентыСкидкиНаценкиДинамическихЦенСрезПоследних.ЕдиницаИзмерения = ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения)
	|			И (ПроцентыСкидкиНаценкиДинамическихЦенСрезПоследних.СпособРасчетаЦены = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаЦены.ПоПроцентнойНаценкеНаБазовыйТип))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	БазоваяЦена,
	|	ТипЦен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремВсеТипыЦен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БазовыеЦены.ТипЦен КАК ТипЦен,
	|	БазовыеЦены.ВалютаТипЦены КАК ВалютаТипаЦен,
	|	БазовыеЦены.Номенклатура КАК Номенклатура,
	|	БазовыеЦены.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	БазовыеЦены.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|	БазовыеЦены.СпособРасчетаЦены КАК СпособРасчетаЦены,
	|	БазовыеЦены.БазоваяЦена КАК БазоваяЦена,
	|	БазовыеЦены.ВалютаБазовойЦены КАК ВалютаБазовойЦены,
	|	БазовыеЦены.ЕдиницаИзмеренияБазовойЦены КАК ЕдиницаИзмеренияБазовойЦены,
	|	МИНИМУМ(ДиапазоныЦенДляНаценкиСрезПоследних.ВерхняяГраница) КАК ВерхняяГраница,
	|	БазовыеЦены.ТипЦеныИдентификатор
	|ПОМЕСТИТЬ ВремДинамическиеЦены
	|ИЗ
	|	ВремБазовыеЦены КАК БазовыеЦены
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДиапазоныЦенДляНаценки.СрезПоследних(&ТекДата, ) КАК ДиапазоныЦенДляНаценкиСрезПоследних
	|		ПО БазовыеЦены.БазоваяЦена < ДиапазоныЦенДляНаценкиСрезПоследних.ВерхняяГраница
	|			И БазовыеЦены.ТипЦен = ДиапазоныЦенДляНаценкиСрезПоследних.ТипЦен
	|
	|СГРУППИРОВАТЬ ПО
	|	БазовыеЦены.ХарактеристикаНоменклатуры,
	|	БазовыеЦены.СпособРасчетаЦены,
	|	БазовыеЦены.ТипЦен,
	|	БазовыеЦены.ВалютаТипЦены,
	|	БазовыеЦены.Номенклатура,
	|	БазовыеЦены.ВалютаБазовойЦены,
	|	БазовыеЦены.ЕдиницаИзмеренияБазовойЦены,
	|	БазовыеЦены.ПроцентСкидкиНаценки,
	|	БазовыеЦены.БазоваяЦена,
	|	БазовыеЦены.ТипЦеныИдентификатор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТипЦен,
	|	БазоваяЦена,
	|	ВерхняяГраница,
	|	ВалютаБазовойЦены,
	|	ВалютаТипаЦен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремБазовыеЦены
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДинамическиеЦены.Номенклатура КАК Номенклатура,
	|	ДинамическиеЦены.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ДинамическиеЦены.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|	ДинамическиеЦены.СпособРасчетаЦены КАК СпособРасчетаЦены,
	|	ДинамическиеЦены.ТипЦен КАК ТипЦен,
	|	ДинамическиеЦены.ВалютаТипаЦен КАК ВалютаТипаЦен,
	|	ЕСТЬNULL(КурсыВалютыЦены.Курс, 0) КАК КурсВалютыЦены,
	|	ЕСТЬNULL(КурсыВалютыЦены.Кратность, 0) КАК КратностьКурсаВалютыЦены,
	|	ДинамическиеЦены.БазоваяЦена КАК БазоваяЦена,
	|	ДинамическиеЦены.ВалютаБазовойЦены КАК ВалютаБазовойЦены,
	|	ЕСТЬNULL(КурсыВалютыБазовойЦены.Курс, 0) КАК КурсВалютыБазовойЦены,
	|	ЕСТЬNULL(КурсыВалютыБазовойЦены.Кратность, 0) КАК КратностьКурсаВалютыБазовойЦены,
	|	ДинамическиеЦены.ЕдиницаИзмеренияБазовойЦены КАК ЕдиницаИзмеренияБазовойЦены,
	|	ЕСТЬNULL(ДиапазоныЦенДляНаценкиСрезПоследних.Цена, 0) КАК ЦенаПоДиапазону,
	|	ДиапазоныЦенДляНаценкиСрезПоследних.Валюта КАК ВалютаЦеныПоДиапазону,
	|	ВЫБОР
	|		КОГДА ДинамическиеЦены.ВалютаТипаЦен = ДинамическиеЦены.ВалютаБазовойЦены
	|			ТОГДА 1
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЕСТЬNULL(КурсыВалютыЦены.Курс, 0) = 1
	|					ТОГДА ВЫБОР
	|							КОГДА ЕСТЬNULL(КурсыВалютыБазовойЦены.Кратность, 0) = 0
	|								ТОГДА 0
	|							ИНАЧЕ ЕСТЬNULL(КурсыВалютыБазовойЦены.Курс, 0) / ЕСТЬNULL(КурсыВалютыБазовойЦены.Кратность, 0)
	|						КОНЕЦ
	|				КОГДА ЕСТЬNULL(КурсыВалютыЦены.Курс, 0) <> 1
	|						И ЕСТЬNULL(КурсыВалютыБазовойЦены.Курс, 0) = 1
	|					ТОГДА ВЫБОР
	|							КОГДА ЕСТЬNULL(КурсыВалютыЦены.Курс, 0) = 0
	|								ТОГДА 0
	|							ИНАЧЕ ЕСТЬNULL(КурсыВалютыЦены.Кратность, 0) / ЕСТЬNULL(КурсыВалютыЦены.Курс, 0)
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ЕСТЬNULL(КурсыВалютыЦены.Курс, 0) * ЕСТЬNULL(КурсыВалютыБазовойЦены.Кратность, 0) = 0
	|							ТОГДА 0
	|						ИНАЧЕ ЕСТЬNULL(КурсыВалютыБазовойЦены.Курс, 0) * ЕСТЬNULL(КурсыВалютыЦены.Кратность, 0) / ЕСТЬNULL(КурсыВалютыЦены.Курс, 0) * ЕСТЬNULL(КурсыВалютыБазовойЦены.Кратность, 0)
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК КоэффициентПересчетаБазовойЦены,
	|	ДинамическиеЦены.ТипЦеныИдентификатор
	|ПОМЕСТИТЬ ВремРасчетныеЦены
	|ИЗ
	|	ВремДинамическиеЦены КАК ДинамическиеЦены
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДиапазоныЦенДляНаценки.СрезПоследних(&ТекДата, ) КАК ДиапазоныЦенДляНаценкиСрезПоследних
	|		ПО ДинамическиеЦены.БазоваяЦена < ДиапазоныЦенДляНаценкиСрезПоследних.ВерхняяГраница
	|			И ДинамическиеЦены.ТипЦен = ДиапазоныЦенДляНаценкиСрезПоследних.ТипЦен
	|			И ДинамическиеЦены.ВерхняяГраница = ДиапазоныЦенДляНаценкиСрезПоследних.ВерхняяГраница
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ТекДата, ) КАК КурсыВалютыЦены
	|		ПО ДинамическиеЦены.ВалютаТипаЦен = КурсыВалютыЦены.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ТекДата, ) КАК КурсыВалютыБазовойЦены
	|		ПО ДинамическиеЦены.ВалютаБазовойЦены = КурсыВалютыБазовойЦены.Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремДинамическиеЦены
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры,
	|	ЦеныНоменклатурыСрезПоследних.ТипЦен,
	|	ЦеныНоменклатурыСрезПоследних.Валюта,
	|	ЦеныНоменклатурыСрезПоследних.Цена,
	|	ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения,
	|	ЦеныНоменклатурыСрезПоследних.ТипЦеныИдентификатор
	|ПОМЕСТИТЬ ВремЦеныНоменклатурыСрезПоследних
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетныеЦены.Номенклатура КАК Номенклатура,
	|		РасчетныеЦены.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		РасчетныеЦены.ТипЦен КАК ТипЦен,
	|		ВЫБОР
	|			КОГДА РасчетныеЦены.СпособРасчетаЦены = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаЦены.ПоПроцентнойНаценкеНаБазовыйТип)
	|				ТОГДА РасчетныеЦены.ВалютаТипаЦен
	|			ИНАЧЕ РасчетныеЦены.ВалютаЦеныПоДиапазону
	|		КОНЕЦ КАК Валюта,
	|		ВЫБОР
	|			КОГДА РасчетныеЦены.СпособРасчетаЦены = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаЦены.ПоПроцентнойНаценкеНаБазовыйТип)
	|				ТОГДА РасчетныеЦены.БазоваяЦена * РасчетныеЦены.КоэффициентПересчетаБазовойЦены * (1 + РасчетныеЦены.ПроцентСкидкиНаценки / 100)
	|			ИНАЧЕ РасчетныеЦены.ЦенаПоДиапазону
	|		КОНЕЦ КАК Цена,
	|		РасчетныеЦены.ЕдиницаИзмеренияБазовойЦены КАК ЕдиницаИзмерения,
	|		РасчетныеЦены.ТипЦеныИдентификатор КАК ТипЦеныИдентификатор
	|	ИЗ
	|		ВремРасчетныеЦены КАК РасчетныеЦены
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЦеныНоменклатурыСрезПоследних.Номенклатура,
	|		ЦеныНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры,
	|		ЦеныНоменклатурыСрезПоследних.ТипЦен,
	|		ЦеныНоменклатурыСрезПоследних.Валюта,
	|		ЦеныНоменклатурыСрезПоследних.Цена,
	|		ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения,
	|		ВЫБОР
	|			КОГДА ЦеныНоменклатурыСрезПоследних.ТипЦен.Б_Идентификатор = """"
	|				ТОГДА ЦеныНоменклатурыСрезПоследних.ТипЦен.Ссылка
	|			ИНАЧЕ ЦеныНоменклатурыСрезПоследних.ТипЦен.Б_Идентификатор
	|		КОНЕЦ
	|	ИЗ
	|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&ТекДата,
	|				НЕ ТипЦен.Рассчитывается
	|					И (Номенклатура, ХарактеристикаНоменклатуры) В
	|						(ВЫБРАТЬ
	|							ВремНоменклатураСХарактеристиками.Номенклатура,
	|							ВремНоменклатураСХарактеристиками.Характеристика
	|						ИЗ
	|							ВремНоменклатураСХарактеристиками)
	|					И ТипЦен В
	|						(ВЫБРАТЬ
	|							ВремТипыЦен.ТипЦены
	|						ИЗ
	|							ВремТипыЦен) {(ТипЦен).*}) КАК ЦеныНоменклатурыСрезПоследних) КАК ЦеныНоменклатурыСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремРасчетныеЦены
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЦеныНоменклатурыСрезПоследних.ТипЦен КАК ТипЦены,
	|	ЦеныНоменклатурыСрезПоследних.ТипЦеныИдентификатор,
	|	ЦеныНоменклатурыСрезПоследних.Валюта КАК ВалютаЦеныСсылка,
	|	ЦеныНоменклатурыСрезПоследних.Валюта.Наименование КАК ВалютаКод,
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
	|	ВЫБОР
	|		КОГДА ЦеныНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ЦеныНоменклатурыСрезПоследних.Цена
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЦенаБезХарактеристики,
	|	ЦеныНоменклатурыСрезПоследних.ТипЦен.ПорядокОкругления КАК ПорядокОкругления,
	|	ЦеныНоменклатурыСрезПоследних.ТипЦен.ОкруглятьВБольшуюСторону КАК ОкруглятьВБольшуюСторону,
	|	ВЫБОР
	|		КОГДА ЦеныНоменклатурыСрезПоследних.Номенклатура.БазоваяЕдиницаИзмерения.Б_Идентификатор = """"
	|			ТОГДА ЦеныНоменклатурыСрезПоследних.Номенклатура.БазоваяЕдиницаИзмерения
	|		ИНАЧЕ ЦеныНоменклатурыСрезПоследних.Номенклатура.БазоваяЕдиницаИзмерения.Б_Идентификатор
	|	КОНЕЦ КАК БазоваяЕдиницаИзмеренияИдентификатор,
	|	ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения КАК ЕдиницаИзмеренияЦены,
	|	ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент КАК Коэффициент,
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ЦеныНоменклатурыСрезПоследних.Номенклатура.Б_Идентификатор = """"
	|			ТОГДА ЦеныНоменклатурыСрезПоследних.Номенклатура.Ссылка
	|		ИНАЧЕ ЦеныНоменклатурыСрезПоследних.Номенклатура.Б_Идентификатор
	|	КОНЕЦ КАК НоменклатураИдентификатор,
	|	ВЫБОР
	|		КОГДА ЦеныНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры.Б_Идентификатор = """"
	|			ТОГДА ЦеныНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры.Ссылка
	|		ИНАЧЕ ЦеныНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры.Б_Идентификатор
	|	КОНЕЦ КАК ХарактеристикаИдентификатор
	|ПОМЕСТИТЬ ВремЦены
	|ИЗ
	|	ВремЦеныНоменклатурыСрезПоследних КАК ЦеныНоменклатурыСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремЦеныНоменклатурыСрезПоследних";				 
	
	
	ТекстЗапросаСкидки = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Скидки.Условие КАК Условие,
	|	Скидки.ЗначениеУсловия КАК ЗначениеУсловия,
	|	Скидки.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|	Скидки.ОграничениеСкидкиНаценки КАК ОграничениеСкидкиНаценки,
	|	Скидки.ДатаОкончания КАК ДатаОкончания,
	|	Скидки.ПолучательСкидки КАК ПолучательСкидки,
	|	Скидки.Валюта КАК Валюта,
	|	Скидки.Номенклатура КАК Номенклатура,
	|	Скидки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	Скидки.НоменклатураЦеноваяГруппа КАК НоменклатураЦеноваяГруппа,
	|	Скидки.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВремСкидкиНоменклатуры
	|ИЗ
	|	(ВЫБРАТЬ
	|		СкидкиНаценкиНоменклатурыСрезПоследних.Условие КАК Условие,
	|		СкидкиНаценкиНоменклатурыСрезПоследних.ЗначениеУсловия КАК ЗначениеУсловия,
	|		СкидкиНаценкиНоменклатурыСрезПоследних.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|		СкидкиНаценкиНоменклатурыСрезПоследних.ОграничениеСкидкиНаценки КАК ОграничениеСкидкиНаценки,
	|		СкидкиНаценкиНоменклатурыСрезПоследних.ДатаОкончания КАК ДатаОкончания,
	|		СкидкиНаценкиНоменклатурыСрезПоследних.ПолучательСкидки КАК ПолучательСкидки,
	|		СкидкиНаценкиНоменклатурыСрезПоследних.Валюта КАК Валюта,
	|		СкидкиНаценкиНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|		СкидкиНаценкиНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		ЕСТЬNULL(СкидкиНаценкиНоменклатурыСрезПоследних.Номенклатура.ЦеноваяГруппа, ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка)) КАК НоменклатураЦеноваяГруппа,
	|		СкидкиНаценкиНоменклатурыСрезПоследних.Регистратор КАК Регистратор
	|	ИЗ
	|		РегистрСведений.СкидкиНаценкиНоменклатуры.СрезПоследних(
	|				,
	|				(ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|					ИЛИ КОНЕЦПЕРИОДА(ДатаОкончания, ДЕНЬ) >= &ТекДата)
	|					И Условие В (&МассивУсловийСкидок)
	|					И Качество = ЗНАЧЕНИЕ(Справочник.Качество.Новый)) КАК СкидкиНаценкиНоменклатурыСрезПоследних
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СкидкиНаценкиПоЦеновымГруппамСрезПоследних.Условие,
	|		СкидкиНаценкиПоЦеновымГруппамСрезПоследних.ЗначениеУсловия,
	|		СкидкиНаценкиПоЦеновымГруппамСрезПоследних.ПроцентСкидкиНаценки,
	|		СкидкиНаценкиПоЦеновымГруппамСрезПоследних.ОграничениеСкидкиНаценки,
	|		СкидкиНаценкиПоЦеновымГруппамСрезПоследних.ДатаОкончания,
	|		СкидкиНаценкиПоЦеновымГруппамСрезПоследних.ПолучательСкидки,
	|		СкидкиНаценкиПоЦеновымГруппамСрезПоследних.Валюта,
	|		ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка),
	|		ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
	|		СкидкиНаценкиПоЦеновымГруппамСрезПоследних.ЦеноваяГруппа,
	|		СкидкиНаценкиПоЦеновымГруппамСрезПоследних.Регистратор
	|	ИЗ
	|		РегистрСведений.СкидкиНаценкиПоЦеновымГруппам.СрезПоследних(
	|				,
	|				(ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|					ИЛИ КОНЕЦПЕРИОДА(ДатаОкончания, ДЕНЬ) >= &ТекДата)
	|					И Условие В (&МассивУсловийСкидок)
	|					И Качество = ЗНАЧЕНИЕ(Справочник.Качество.Новый)) КАК СкидкиНаценкиПоЦеновымГруппамСрезПоследних) КАК Скидки
	|ГДЕ
	|	(Скидки.ПроцентСкидкиНаценки = 0
	|				И (Скидки.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоДисконтнойКарте)
	|					ИЛИ Скидки.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоВидуДисконтныхКарт))
	|			ИЛИ Скидки.ПроцентСкидкиНаценки <> 0)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	НоменклатураЦеноваяГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Скидки.Условие КАК Условие,
	|	Скидки.ЗначениеУсловия,
	|	МАКСИМУМ(Скидки.ПроцентСкидкиНаценки) КАК ПроцентСкидкиНаценки,
	|	Скидки.ОграничениеСкидкиНаценки,
	|	Скидки.ДатаОкончания,
	|	Скидки.ПолучательСкидки КАК ПолучательСкидки,
	|	Скидки.Валюта,
	|	Скидки.Регистратор КАК Регистратор,
	|	Скидки.Валюта.Наименование КАК ВалютаКод
	|ПОМЕСТИТЬ ВремСкидки
	|ИЗ
	|	ВремНоменклатураСХарактеристиками КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВремСкидкиНоменклатуры КАК Скидки
	|		ПО (Товары.Номенклатура = Скидки.Номенклатура
	|					И Товары.Характеристика = Скидки.ХарактеристикаНоменклатуры
	|				ИЛИ Товары.Номенклатура.ЦеноваяГруппа = Скидки.НоменклатураЦеноваяГруппа
	|					И Скидки.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|					И Скидки.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|				ИЛИ Скидки.НоменклатураЦеноваяГруппа = ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка)
	|					И Скидки.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|					И Скидки.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Скидки.Условие,
	|	Скидки.ЗначениеУсловия,
	|	Скидки.ОграничениеСкидкиНаценки,
	|	Скидки.ДатаОкончания,
	|	Скидки.ПолучательСкидки,
	|	Скидки.Валюта,
	|	Скидки.Регистратор,
	|	Скидки.Валюта.Наименование
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Условие,
	|	Регистратор,
	|	ПолучательСкидки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВремСкидки.Регистратор КАК Регистратор,
	|	ВремяДействияСкидокСрезПоследних.ДеньНедели,
	|	ВремяДействияСкидокСрезПоследних.ВремяНачала,
	|	ВремяДействияСкидокСрезПоследних.ВремяОкончания
	|ПОМЕСТИТЬ ВремСкидкиВремяДействия
	|ИЗ
	|	ВремСкидки КАК ВремСкидки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВремяДействияСкидок.СрезПоследних КАК ВремяДействияСкидокСрезПоследних
	|		ПО ВремСкидки.Регистратор = ВремяДействияСкидокСрезПоследних.Регистратор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор";
	
	ЗапросОстаткиПоСкладам = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Остатки.Номенклатура,
	|	Остатки.ХарактеристикаНоменклатуры,
	|	Остатки.КоличествоОстаток,
	|	Остатки.Склад
	|ПОМЕСТИТЬ ВремТоварыНаСкладахОстаткиПоСкладам
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(
	|			,
	|			Номенклатура В
	|					(ВЫБРАТЬ
	|						ВремНоменклатура.Номенклатура
	|					ИЗ
	|						ВремНоменклатура)
	|				И Склад В
	|					(ВЫБРАТЬ
	|						ВремСклады.Склад
	|					ИЗ
	|						ВремСклады)) КАК Остатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Остатки.Номенклатура,
	|	Остатки.ХарактеристикаНоменклатуры,
	|	Остатки.Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Остатки.Номенклатура,
	|	Остатки.ХарактеристикаНоменклатуры,
	|	Остатки.КоличествоОстаток,
	|	Остатки.Склад
	|ПОМЕСТИТЬ ВремТоварыВРозницеОстаткиПоСкладам
	|ИЗ
	|	РегистрНакопления.ТоварыВРознице.Остатки(
	|			,
	|			Номенклатура В
	|					(ВЫБРАТЬ
	|						ВремНоменклатура.Номенклатура
	|					ИЗ
	|						ВремНоменклатура)
	|				И Склад В
	|					(ВЫБРАТЬ
	|						ВремСклады.Склад
	|					ИЗ
	|						ВремСклады)) КАК Остатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Остатки.Номенклатура,
	|	Остатки.ХарактеристикаНоменклатуры,
	|	Остатки.Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Остатки.Номенклатура,
	|	Остатки.ХарактеристикаНоменклатуры,
	|	Остатки.КоличествоОстаток,
	|	Остатки.Склад
	|ПОМЕСТИТЬ ВремТоварыВНТТОстаткиПоСкладам
	|ИЗ
	|	РегистрНакопления.ТоварыВНТТ.Остатки(
	|			,
	|			Номенклатура В
	|					(ВЫБРАТЬ
	|						ВремНоменклатура.Номенклатура
	|					ИЗ
	|						ВремНоменклатура)
	|				И Склад В
	|					(ВЫБРАТЬ
	|						ВремСклады.Склад
	|					ИЗ
	|						ВремСклады)) КАК Остатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Остатки.Номенклатура,
	|	Остатки.ХарактеристикаНоменклатуры,
	|	Остатки.Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Остатки.Номенклатура,
	|	Остатки.ХарактеристикаНоменклатуры,
	|	Остатки.КоличествоОстаток,
	|	Остатки.Склад
	|ПОМЕСТИТЬ ВремТоварыВРезервеНаСкладахОстаткиПоСкладам
	|ИЗ
	|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(
	|			,
	|			Номенклатура В
	|					(ВЫБРАТЬ
	|						ВремНоменклатура.Номенклатура
	|					ИЗ
	|						ВремНоменклатура)
	|				И Склад В
	|					(ВЫБРАТЬ
	|						ВремСклады.Склад
	|					ИЗ
	|						ВремСклады)) КАК Остатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Остатки.Номенклатура,
	|	Остатки.ХарактеристикаНоменклатуры,
	|	Остатки.Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Остатки.Номенклатура,
	|	Остатки.ХарактеристикаНоменклатуры,
	|	Остатки.КоличествоОстаток,
	|	Остатки.Склад
	|ПОМЕСТИТЬ ВремТоварыКПередачеСоСкладовОстаткиПоСкладам
	|ИЗ
	|	РегистрНакопления.ТоварыКПередачеСоСкладов.Остатки(
	|			,
	|			Номенклатура В
	|					(ВЫБРАТЬ
	|						ВремНоменклатура.Номенклатура
	|					ИЗ
	|						ВремНоменклатура)
	|				И Склад В
	|					(ВЫБРАТЬ
	|						ВремСклады.Склад
	|					ИЗ
	|						ВремСклады)) КАК Остатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Остатки.Номенклатура,
	|	Остатки.ХарактеристикаНоменклатуры,
	|	Остатки.Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НоменклатураСХарактеристиками.Номенклатура КАК Номенклатура,
	|	НоменклатураСХарактеристиками.НоменклатураИдентификатор,
	|	НоменклатураСХарактеристиками.Характеристика КАК Характеристика,
	|	НоменклатураСХарактеристиками.ХарактеристикаИдентификатор,
	|	ТоварыОстатки.Склад КАК Склад,
	|	ВЫБОР
	|		КОГДА ТоварыОстатки.Склад.Б_Идентификатор = """"
	|			ТОГДА ТоварыОстатки.Склад
	|		ИНАЧЕ ТоварыОстатки.Склад.Б_Идентификатор
	|	КОНЕЦ КАК СкладИдентификатор,
	|	ЕСТЬNULL(ТоварыОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ТоварыВРезервеНаСкладахОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ТоварыКПередачеСоСкладовОстатки.КоличествоОстаток, 0) КАК Остаток
	|ПОМЕСТИТЬ ВремОстатки
	|ИЗ
	|	ВремНоменклатураСХарактеристиками КАК НоменклатураСХарактеристиками
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВремТоварыНаСкладахОстаткиПоСкладам КАК ТоварыОстатки
	|		ПО НоменклатураСХарактеристиками.Номенклатура = ТоварыОстатки.Номенклатура
	|			И НоменклатураСХарактеристиками.Характеристика = ТоварыОстатки.ХарактеристикаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВремТоварыВРезервеНаСкладахОстаткиПоСкладам КАК ТоварыВРезервеНаСкладахОстатки
	|		ПО НоменклатураСХарактеристиками.Номенклатура = ТоварыВРезервеНаСкладахОстатки.Номенклатура
	|			И НоменклатураСХарактеристиками.Характеристика = ТоварыВРезервеНаСкладахОстатки.ХарактеристикаНоменклатуры
	|			И (ТоварыОстатки.Склад = ТоварыВРезервеНаСкладахОстатки.Склад)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВремТоварыКПередачеСоСкладовОстаткиПоСкладам КАК ТоварыКПередачеСоСкладовОстатки
	|		ПО НоменклатураСХарактеристиками.Номенклатура = ТоварыКПередачеСоСкладовОстатки.Номенклатура
	|			И НоменклатураСХарактеристиками.Характеристика = ТоварыКПередачеСоСкладовОстатки.ХарактеристикаНоменклатуры
	|			И (ТоварыОстатки.Склад = ТоварыКПередачеСоСкладовОстатки.Склад)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НоменклатураСХарактеристиками.Номенклатура,
	|	НоменклатураСХарактеристиками.НоменклатураИдентификатор,
	|	НоменклатураСХарактеристиками.Характеристика,
	|	НоменклатураСХарактеристиками.ХарактеристикаИдентификатор,
	|	ТоварыОстатки.Склад,
	|	ВЫБОР
	|		КОГДА ТоварыОстатки.Склад.Б_Идентификатор = """"
	|			ТОГДА ТоварыОстатки.Склад
	|		ИНАЧЕ ТоварыОстатки.Склад.Б_Идентификатор
	|	КОНЕЦ,
	|	ЕСТЬNULL(ТоварыОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ТоварыВРезервеНаСкладахОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ТоварыКПередачеСоСкладовОстатки.КоличествоОстаток, 0)
	|ИЗ
	|	ВремНоменклатураСХарактеристиками КАК НоменклатураСХарактеристиками
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВремТоварыВРозницеОстаткиПоСкладам КАК ТоварыОстатки
	|		ПО НоменклатураСХарактеристиками.Номенклатура = ТоварыОстатки.Номенклатура
	|			И НоменклатураСХарактеристиками.Характеристика = ТоварыОстатки.ХарактеристикаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВремТоварыВРезервеНаСкладахОстаткиПоСкладам КАК ТоварыВРезервеНаСкладахОстатки
	|		ПО НоменклатураСХарактеристиками.Номенклатура = ТоварыВРезервеНаСкладахОстатки.Номенклатура
	|			И НоменклатураСХарактеристиками.Характеристика = ТоварыВРезервеНаСкладахОстатки.ХарактеристикаНоменклатуры
	|			И (ТоварыОстатки.Склад = ТоварыВРезервеНаСкладахОстатки.Склад)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВремТоварыКПередачеСоСкладовОстаткиПоСкладам КАК ТоварыКПередачеСоСкладовОстатки
	|		ПО НоменклатураСХарактеристиками.Номенклатура = ТоварыКПередачеСоСкладовОстатки.Номенклатура
	|			И НоменклатураСХарактеристиками.Характеристика = ТоварыКПередачеСоСкладовОстатки.ХарактеристикаНоменклатуры
	|			И (ТоварыОстатки.Склад = ТоварыКПередачеСоСкладовОстатки.Склад)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НоменклатураСХарактеристиками.Номенклатура,
	|	НоменклатураСХарактеристиками.НоменклатураИдентификатор,
	|	НоменклатураСХарактеристиками.Характеристика,
	|	НоменклатураСХарактеристиками.ХарактеристикаИдентификатор,
	|	ТоварыОстатки.Склад,
	|	ВЫБОР
	|		КОГДА ТоварыОстатки.Склад.Б_Идентификатор = """"
	|			ТОГДА ТоварыОстатки.Склад
	|		ИНАЧЕ ТоварыОстатки.Склад.Б_Идентификатор
	|	КОНЕЦ,
	|	ЕСТЬNULL(ТоварыОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ТоварыВРезервеНаСкладахОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ТоварыКПередачеСоСкладовОстатки.КоличествоОстаток, 0)
	|ИЗ
	|	ВремНоменклатураСХарактеристиками КАК НоменклатураСХарактеристиками
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВремТоварыВНТТОстаткиПоСкладам КАК ТоварыОстатки
	|		ПО НоменклатураСХарактеристиками.Номенклатура = ТоварыОстатки.Номенклатура
	|			И НоменклатураСХарактеристиками.Характеристика = ТоварыОстатки.ХарактеристикаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВремТоварыВРезервеНаСкладахОстаткиПоСкладам КАК ТоварыВРезервеНаСкладахОстатки
	|		ПО НоменклатураСХарактеристиками.Номенклатура = ТоварыВРезервеНаСкладахОстатки.Номенклатура
	|			И НоменклатураСХарактеристиками.Характеристика = ТоварыВРезервеНаСкладахОстатки.ХарактеристикаНоменклатуры
	|			И (ТоварыОстатки.Склад = ТоварыВРезервеНаСкладахОстатки.Склад)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВремТоварыКПередачеСоСкладовОстаткиПоСкладам КАК ТоварыКПередачеСоСкладовОстатки
	|		ПО НоменклатураСХарактеристиками.Номенклатура = ТоварыКПередачеСоСкладовОстатки.Номенклатура
	|			И НоменклатураСХарактеристиками.Характеристика = ТоварыКПередачеСоСкладовОстатки.ХарактеристикаНоменклатуры
	|			И (ТоварыОстатки.Склад = ТоварыКПередачеСоСкладовОстатки.Склад)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремТоварыНаСкладахОстаткиПоСкладам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремТоварыВРозницеОстаткиПоСкладам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремТоварыВНТТОстаткиПоСкладам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремТоварыВРезервеНаСкладахОстаткиПоСкладам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремТоварыКПередачеСоСкладовОстаткиПоСкладам";
	
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////
	//	                                                                                                ///
	//                          ПАКЕТ ЗАПРОСОВ ДЛЯ ПОЛУЧЕНИЯ ГРУПП НОМЕНКЛАТУРЫ                        ///
	//                                                                                                ///
	////////////////////////////////////////////////////////////////////////////////////////////////////
	
	ТекстЗапросаГруппыНоменклатуры =
	"ВЫБРАТЬ
	|	ВремНоменклатура.Номенклатура КАК Номенклатура,
	|	ВремНоменклатура.Наименование КАК Наименование
	|ИЗ
	|	ВремНоменклатура КАК ВремНоменклатура
	|{УПОРЯДОЧИТЬ ПО
	|	Номенклатура.* КАК Номенклатура}
	|ИТОГИ ПО
	|	Номенклатура ТОЛЬКО ИЕРАРХИЯ
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	ТекстЗапросаЦеновыеГруппы =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВремНоменклатура.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	ВремНоменклатура.Номенклатура КАК Номенклатура
	|ИЗ
	|	ВремНоменклатура КАК ВремНоменклатура
	|{УПОРЯДОЧИТЬ ПО
	|	Номенклатура.* КАК Номенклатура}
	|ИТОГИ ПО
	|	ЦеноваяГруппа ИЕРАРХИЯ
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////
	//	                                                                                                ///
	//                              СЛУЖЕБНЫЕ ЗАПРОСЫ                                                  ///
	//                                                                                                ///
	////////////////////////////////////////////////////////////////////////////////////////////////////
	
	МассивЧастейЗапроса = Новый Массив;
	
	Если ПараметрыОбмена.ВыгружатьСвойства ИЛИ ПараметрыОбмена.ВыгружатьЗначенияСвойствВТовары ИЛИ ПараметрыОбмена.ВыгружатьЗначенияСвойствВПредложения Тогда
		МассивЧастейЗапроса.Добавить(ЗапросПоСвойствам);
	КонецЕсли;
	
	
	Если ПараметрыОбмена.ВыгружатьКартинкиИФайлы Тогда
		МассивЧастейЗапроса.Добавить(ЗапросПоКартинкам);
	КонецЕсли;
	
	Если ПараметрыОбмена.ВыгружатьКартинкиИФайлыПредложений Тогда
		МассивЧастейЗапроса.Добавить(ЗапросПоКартинкамИФайламПредложений);
	КонецЕсли;
	
	Если ПараметрыОбмена.ВыгружатьЦены Тогда
		МассивЧастейЗапроса.Добавить(ЗапросПоЦенам);
	КонецЕсли;
	
	//Если ВыгружатьСкидки Тогда
	//	МассивЧастейЗапроса.Добавить(ТекстЗапросаСкидки);
	//КонецЕсли;
	
	Если ПараметрыОбмена.ВыгружатьОстатки Тогда
		МассивЧастейЗапроса.Добавить(ЗапросОстаткиПоСкладам);
	КонецЕсли;
	
	Если ПараметрыОбмена.ВыгружатьШтрихкоды Тогда
		МассивЧастейЗапроса.Добавить(ЗапросПоШтрихКодам);
	КонецЕсли;
	
		Если ПараметрыОбмена.ВыгружатьПланируемуюДатуПоступленияПредложения Тогда
		МассивЧастейЗапроса.Добавить(ЗапросПоПланируемойДатеПоступления);
	КонецЕсли;
	             	
	Для Каждого ЧастьЗапроса Из МассивЧастейЗапроса Цикл
		ТекстЗапроса = ТекстЗапроса + ";" + ЧастьЗапроса;
	КонецЦикла;
	
	Если КлассифицироватьПоЦеновымГруппам Тогда
		ТекстЗапроса = ТекстЗапроса + ";" + ТекстЗапросаЦеновыеГруппы;
	Иначе
		ТекстЗапроса = ТекстЗапроса + ";" + ТекстЗапросаГруппыНоменклатуры;
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	лМенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.МенеджерВременныхТаблиц = лМенеджерВременныхТаблиц; 
	запрос.Выполнить();	
	
	Возврат лМенеджерВременныхТаблиц;
	
КонецФункции

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Процедура ВыгрузитьТоварыXDTO(ПараметрыОбмена, ИмяКаталога, Владелец, ВладелецТип, лМенеджерВременныхТаблиц, СтрокаТаблицыКаталогов, МассивКартинок, МассивФайлов)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = лМенеджерВременныхТаблиц;
	//Временная таблица формируется в функции СформироватьВременныеТаблицыПоИнформацииОТоварахПакета
	ТекстЗапроса = "ВЫБРАТЬ
	               |	*
	               |ИЗ
	               |	ВремНоменклатура КАК ВремНоменклатура
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ВремНоменклатура.ПриоритетСортировки";
	
	Запрос.Текст = ТекстЗапроса; 
	
	ТзнТоваров = Запрос.Выполнить().Выгрузить();
	
	
	Если ТзнТоваров.Количество() > 0 тогда	
		
		Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Выгрузка товаров в XML.", ПараметрыОбмена);
		
		Итератор = 0;
		ВыгруженоКартинок 	= 0;
		ВыгруженоФайлов		= 0;
		
		ДеревоГрупп = СтрокаТаблицыКаталогов.ДеревоГрупп;  
		ВыгружатьПоДеревуТоваров = НЕ ДеревоГрупп.Строки.Количество() = 0;
		
		Если ВыгружатьПоДеревуТоваров тогда
			
			ТаблицаДереваГрупп = ПолучитьНоменклатуруГруппДерева(ДеревоГрупп, лМенеджерВременныхТаблиц);
			
		КонецЕсли;
		
		XDTOТоварыТип 	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена, "Товары", Истина, ВладелецТип);
		XDTOТовары 		= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOТоварыТип); 
		
		XDTOТоварТип 	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена, "Товар");
		
		XDTOЕдиницаИзмеренияТип 	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена, "ЕдиницаИзмерения");
		
		XDTOСтавкиНалоговТип 	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена, "СтавкиНалогов", Истина, XDTOТоварТип);	
		XDTOСтавкаНалогаТип 	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена, "СтавкаНалога", Истина, XDTOСтавкиНалоговТип);	
		
		XDTOЗначенияРеквизитовТип 	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена, "ЗначенияРеквизитов", Истина, XDTOТоварТип);
		XDTOЗначениеРеквизитаТип 	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена, "ЗначениеРеквизита");
		
		Для каждого ТекТовар из ТзнТоваров Цикл
			
			XDTOТовар 		= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOТоварТип); 
			
			XDTOТовар.Ид 				= XMLСтрока(ТекТовар.Идентификатор);
			XDTOТовар.НомерВерсии 		= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьВерсиюОбъекта(ПараметрыОбмена, ТекТовар.ВерсияДанных, "Товаров");

			XDTOТовар.ПометкаУдаления 	= XMLСтрока(ТекТовар.ПометкаУдаления);
			
			XDTOТовар.БазоваяЕдиница	= XMLСтрока(ТекТовар.ИдентификаторБазовойЕдиницы);
			
			ВыгрузитьГруппыНоменклатурыXDTO(ПараметрыОбмена, XDTOТовар, XDTOТоварТип, ТекТовар, ВыгружатьПоДеревуТоваров, ТаблицаДереваГрупп);
			
			лОписаниеТовара = ТекТовар.Объект.ДополнительноеОписаниеНоменклатуры;
			лДополнительноеОписаниеНоменклатуры = ?(СтрДлина(лОписаниеТовара) > 10000, Лев(лОписаниеТовара, 10000), лОписаниеТовара);
			
			Для каждого ТекСтр из ПараметрыОбмена.СоответствиеОсновныхРеквизитовНоменклатуры Цикл
				
				лЗначение = ПолучитьЗначениеПоля1С(ПараметрыОбмена, лМенеджерВременныхТаблиц, ТекСтр, ТекТовар, лДополнительноеОписаниеНоменклатуры);
				
				Если лЗначение <> Неопределено тогда 
					
					XDTOТовар[ТекСтр.НаименованиеПоля]	= ?(лЗначение = NULL, ?(ТекСтр.НаименованиеПоля = "Вес" , 0, ""), лЗначение);
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ПараметрыОбмена.ВыгружатьЗначенияСвойствВТовары тогда
				ВыгрузитьСвойстваНоменклатурыXDTO(ПараметрыОбмена, XDTOТовар, XDTOТоварТип, ТекТовар, лМенеджерВременныхТаблиц);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекТовар.СтавкаНДС) Тогда
				
				XDTOСтавкиНалогов 		= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOСтавкиНалоговТип); 
				XDTOСтавкаНалога 		= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOСтавкаНалогаТип); 
				
				XDTOСтавкаНалога.Наименование 	= ПараметрыОбмена.НаименованиеНалога;
				XDTOСтавкаНалога.Ставка 		= ПолучитьПоСтавкеНДСЗначениеДляВыгрузки(ТекТовар.СтавкаНДС);
				
				XDTOСтавкиНалогов.СтавкаНалога.Добавить(XDTOСтавкаНалога);
				XDTOТовар.СтавкиНалогов = XDTOСтавкиНалогов;
				
			КонецЕсли;
			
			XDTOЗначенияРеквизитов 		= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOЗначенияРеквизитовТип); 
			
			Если ТекТовар.ДополнительноеОписаниеНоменклатурыВФорматеHTML тогда
				Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ДобавитьЗначениеРеквизитаXDTO(ПараметрыОбмена, XDTOЗначенияРеквизитов, XDTOЗначениеРеквизитаТип, "ОписаниеВФорматеHTML", лДополнительноеОписаниеНоменклатуры);
			КонецЕсли;
			
			Если ПараметрыОбмена.ВыгружатьКартинкиИФайлы тогда
				
				ОписаниеФайлов 		= Новый Соответствие;
				Файлы 				= Новый Массив;
				
				ВыгрузитьИзображенияНоменклатуры(ПараметрыОбмена, ИмяКаталога, XDTOТовар, лМенеджерВременныхТаблиц, ТекТовар, ОписаниеФайлов, ВыгруженоКартинок, МассивКартинок);
				ВыгрузитьФайлыНоменклатуры(ПараметрыОбмена, ИмяКаталога, XDTOТовар, лМенеджерВременныхТаблиц, ТекТовар, Файлы, ОписаниеФайлов, ВыгруженоФайлов, МассивФайлов);

				Для Каждого Файл Из Файлы Цикл
					
					Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ДобавитьЗначениеРеквизитаXDTO(ПараметрыОбмена, XDTOЗначенияРеквизитов, XDTOЗначениеРеквизитаТип, "Файл", Файл);				
					
				КонецЦикла;
				
				Для Каждого ОписаниеФайла Из ОписаниеФайлов Цикл
					
					Файл = ОписаниеФайла.Ключ;
					Описание = ОписаниеФайла.Значение;
					
					Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ДобавитьЗначениеРеквизитаXDTO(ПараметрыОбмена, XDTOЗначенияРеквизитов, XDTOЗначениеРеквизитаТип, "ОписаниеФайла", Файл + "#" + Описание);
					
				КонецЦикла;
				
			КонецЕсли;
			
			лТипНоменклатуры = "Товар";
			
			Если ТекТовар.ПриоритетСортировки = 2 тогда
				лТипНоменклатуры = "Комплект";
			ИначеЕсли ТекТовар.ПриоритетСортировки = 3 тогда
				лТипНоменклатуры = "Набор";
			ИначеЕсли ТекТовар.ПриоритетСортировки = 4 тогда
				лТипНоменклатуры = "Услуга";          			
			КонецЕсли;
			
			Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ДобавитьЗначениеРеквизитаXDTO(ПараметрыОбмена, XDTOЗначенияРеквизитов, XDTOЗначениеРеквизитаТип, "ВидНоменклатуры", ТекТовар.ВидНоменклатуры.Наименование);
			Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ДобавитьЗначениеРеквизитаXDTO(ПараметрыОбмена, XDTOЗначенияРеквизитов, XDTOЗначениеРеквизитаТип, "ТипНоменклатуры", лТипНоменклатуры);
			
			Для каждого ТекСтр из ПараметрыОбмена.СоответствиеДополнительныхРеквизитовНоменклатуры Цикл
				
				лЗначение = ПолучитьЗначениеПоля1С(ПараметрыОбмена, лМенеджерВременныхТаблиц, ТекСтр, ТекТовар, лДополнительноеОписаниеНоменклатуры);
				
				Если лЗначение <> Неопределено тогда 

					Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ДобавитьЗначениеРеквизитаXDTO(ПараметрыОбмена, XDTOЗначенияРеквизитов, XDTOЗначениеРеквизитаТип, ТекСтр.НаименованиеПоля, ?(лЗначение = NULL, "", лЗначение));
					
				КонецЕсли;
			
			КонецЦикла;
			
			XDTOТовар.ЗначенияРеквизитов = XDTOЗначенияРеквизитов;
			
			Итератор = Итератор + 1;
			XDTOТовары.Товар.Добавить(XDTOТовар);   
		КонецЦикла;
		
		Владелец.Товары = XDTOТовары;
		
		Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Выгружено " + Строка(ВыгруженоКартинок) + " картинок.", ПараметрыОбмена);
		Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Выгружено " + Строка(ВыгруженоФайлов) + " файлов.", ПараметрыОбмена);
		Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Выгрузка товаров в XML завершено. Выгружено " + Строка(Итератор) + " элементов.", ПараметрыОбмена);

	КонецЕсли;	
КонецПроцедуры

Функция ПолучитьЗначениеПоля1С(ПараметрыОбмена, лМенеджерВременныхТаблиц, ТекСтр, ТекТовар, лДополнительноеОписаниеНоменклатуры)
	
	лЗначение = "";	
	Если ТекСтр.НаименованиеПоля1С = "Код" тогда
		лЗначение = СокрЛП(ТекТовар.Код);	
	ИначеЕсли ТекСтр.НаименованиеПоля1С = "Наименование" тогда
		лЗначение = ТекТовар.Наименование;	
	ИначеЕсли ТекСтр.НаименованиеПоля1С = "Полное наименование" тогда
		лЗначение = ТекТовар.НаименованиеПолное;	
	ИначеЕсли ТекСтр.НаименованиеПоля1С = "Штрихкод" тогда
		
		Если ПараметрыОбмена.ВыгружатьШтрихкоды тогда
			
			лЗначение = ПолучитьШтрихКод(ТекТовар.Номенклатура, лМенеджерВременныхТаблиц);
			
		КонецЕсли;
		
	ИначеЕсли ТекСтр.НаименованиеПоля1С = "Артикул" тогда
		лЗначение = ТекТовар.Артикул;	
	ИначеЕсли ТекСтр.НаименованиеПоля1С = "Описание" тогда
		
		Если НЕ ТекТовар.ДополнительноеОписаниеНоменклатурыВФорматеHTML тогда
			лЗначение = лДополнительноеОписаниеНоменклатуры;
		КонецЕсли;
		
	ИначеЕсли ТекСтр.НаименованиеПоля1С = "Страна происхождения" тогда
		лЗначение = ТекТовар.СтранаПроисхождения;	                    
	ИначеЕсли ТекСтр.НаименованиеПоля1С = "Основной поставщик" тогда
		лЗначение = ТекТовар.ОсновнойПоставщик;	                    
	ИначеЕсли ТекСтр.НаименованиеПоля1С = "Вес" тогда
		лЗначение = ТекТовар.Вес;	                    
	ИначеЕсли ТекСтр.НаименованиеПоля1С = "Комментарий" тогда
		лЗначение = ТекТовар.Комментарий;	                    
	ИначеЕсли ТекСтр.НаименованиеПоля1С = "Ценовая группа" тогда
		лЗначение = Строка(ТекТовар.ЦеноваяГруппа);	                    
	ИначеЕсли ТекСтр.НаименованиеПоля1С = "Родитель" тогда
		лЗначение = Строка(ТекТовар.Родитель);	                    
	ИначеЕсли ТекСтр.НаименованиеПоля1С = "Номер ГТД" тогда
		лЗначение = ТекТовар.НомерГТД;	                    
	ИначеЕсли ТекСтр.НаименованиеПоля1С = "Вид номенклатуры" тогда
		лЗначение = Строка(ТекТовар.ВидНоменклатуры);
	Иначе
		
		Если ТекСтр.НаименованиеПоля1С = "" тогда
			
			лЗначение = Неопределено;
			
		Иначе
			
			лИтоговоеНазваниеПоля = стрЗаменить(ТекСтр.НаименованиеПоля1С, "Номенклатура", "ТекТовар.Номенклатура");
			
			Если ЗначениеЗаполнено(лИтоговоеНазваниеПоля) тогда
				Выполнить("лЗначение = Строка(" + лИтоговоеНазваниеПоля + ")");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
	Возврат лЗначение;	
	
КонецФункции

Функция ПолучитьШтрихКод(НоменклатураСсылка, лМенеджерВременныхТаблиц, ХарактеристикаСсылка = НеОпределено)
	
	мЗапросПоШК = Новый Запрос(	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ШтрихКоды.Штрихкод
	|ИЗ
	|	ВремШтрихКоды КАК ШтрихКоды
	|ГДЕ
	|	ШтрихКоды.Номенклатура = &Номенклатура
	|	И ШтрихКоды.Характеристика = &Характеристика");
	
	мЗапросПоШК.МенеджерВременныхТаблиц = лМенеджерВременныхТаблиц;

	ШтрихКод = "";
	
	мЗапросПоШК.УстановитьПараметр("Номенклатура", НоменклатураСсылка);
	
	Если ЗначениеЗаполнено(ХарактеристикаСсылка) Тогда
		мЗапросПоШК.УстановитьПараметр("Характеристика", ХарактеристикаСсылка);
	Иначе
		мЗапросПоШК.УстановитьПараметр("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	КонецЕсли;
	
	РезультатЗапроса = мЗапросПоШК.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ШтрихКод = РезультатЗапроса.Выгрузить()[0][0];
	КонецЕсли;
	
	Возврат ШтрихКод;
	
КонецФункции

Функция ПолучитьДатуПланирования(НоменклатураСсылка, лМенеджерВременныхТаблиц, ХарактеристикаСсылка = НеОпределено)
	
	мЗапросПоДП = Новый Запрос(	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВремПланируемыеДатыПоступления.ДатаПоступления КАК ДатаПоступления
	|ИЗ
	|	ВремПланируемыеДатыПоступления КАК ВремПланируемыеДатыПоступления
	|ГДЕ
	|	ВремПланируемыеДатыПоступления.Номенклатура = &Номенклатура
	|	И ВремПланируемыеДатыПоступления.Характеристика = &Характеристика
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПоступления");
	
	мЗапросПоДП.МенеджерВременныхТаблиц = лМенеджерВременныхТаблиц;

	ДатыПоступления = "";
	
	мЗапросПоДП.УстановитьПараметр("Номенклатура", НоменклатураСсылка);
	
	Если ЗначениеЗаполнено(ХарактеристикаСсылка) Тогда
		мЗапросПоДП.УстановитьПараметр("Характеристика", ХарактеристикаСсылка);
	Иначе
		мЗапросПоДП.УстановитьПараметр("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	КонецЕсли;
	
	РезультатЗапроса = мЗапросПоДП.Выполнить().Выбрать();
	
	Пока РезультатЗапроса.Следующий() Цикл
		ДатыПоступления = ДатыПоступления + Строка(РезультатЗапроса.ДатаПоступления); 	
	КонецЦикла;
	
	Возврат ДатыПоступления;
	
КонецФункции

Функция ПолучитьПоСтавкеНДСЗначениеДляВыгрузки(СтавкаНДС)
	
	Если СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
		ЗначениеНалога = "Без налога";
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
		ЗначениеНалога = "0";
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС10 Тогда
		ЗначениеНалога = "10";
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110 Тогда
		ЗначениеНалога = "10/110";
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС18 Тогда
		ЗначениеНалога = "18";
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118 Тогда
		ЗначениеНалога = "18/118";
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС20 Тогда
		ЗначениеНалога = "20";
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120 Тогда
		ЗначениеНалога = "20/120";
	Иначе
		ЗначениеНалога = "";
	КонецЕсли;
	
	Возврат ЗначениеНалога;
	
КонецФункции

Функция ПолучитьНДСПоставке(СтавкаНДС) Экспорт
	
	лНДС = Перечисления.СтавкиНДС.БезНДС;
	
	Если СтавкаНДС = "18" тогда
		лНДС = Перечисления.СтавкиНДС.НДС18;	
	ИначеЕсли СтавкаНДС = "10" тогда
		лНДС = Перечисления.СтавкиНДС.НДС10;	
	КонецЕсли;
	
	Возврат лНДС;
	
КонецФункции

Функция ПолучитьНоменклатуруГруппДерева(ДеревоГрупп, лМенеджерВременныхТаблиц)
	
	ТаблицаТоваровДереваГрупп = Новый ТаблицаЗначений;
	ТаблицаТоваровДереваГрупп.Колонки.Добавить("ИдГруппы");
	ТаблицаТоваровДереваГрупп.Колонки.Добавить("Номенклатура");
	ТаблицаТоваровДереваГрупп.Индексы.Добавить("Номенклатура");
	
	ТаблицаГруппНоменклатурыДереваГрупп = Новый ТаблицаЗначений;
	ТаблицаГруппНоменклатурыДереваГрупп.Колонки.Добавить("ИдГруппы");
	ТаблицаГруппНоменклатурыДереваГрупп.Колонки.Добавить("Номенклатура");
	
	ПодготовитьДанныеДереваГруппРекурсивно(ТаблицаТоваровДереваГрупп, ДеревоГрупп.Строки, ТаблицаГруппНоменклатурыДереваГрупп);
	
	ТаблицаГруппНоменклатурыДереваГрупп.Свернуть("ИдГруппы, Номенклатура");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = лМенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВремНоменклатура.Номенклатура
		|ИЗ
		|	ВремНоменклатура КАК ВремНоменклатура
		|ГДЕ
		|	ВремНоменклатура.Номенклатура В ИЕРАРХИИ(&Группа)";
	
	Для Каждого ГруппаНоменклатуры Из ТаблицаГруппНоменклатурыДереваГрупп Цикл
		
		Запрос.УстановитьПараметр("Группа", ГруппаНоменклатуры.Номенклатура);
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Продолжить;
		КонецЕсли;
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
				
			НовСтрока = ТаблицаТоваровДереваГрупп.Добавить();
			НовСтрока.ИдГруппы = ГруппаНоменклатуры.ИдГруппы; 
			НовСтрока.Номенклатура = Выборка.Номенклатура; 
				
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаТоваровДереваГрупп;
	
КонецФункции

Процедура ВыгрузитьГруппыНоменклатурыXDTO(ПараметрыОбмена, Владелец, ВладелецТип, ВыборкаНоменклатуры, ВыгружатьПоДеревуТоваров, ДеревоГрупп)
	
	XDTOГруппыТип 	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена, "Группы", Истина, ВладелецТип);
	
	Если ВыгружатьПоДеревуТоваров Тогда
		
		XDTOГруппы = ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOГруппыТип);
		Владелец.Группы = XDTOГруппы;
		
			
		МассивГрупп = Новый Массив;
		
		Найдено = ДеревоГрупп.НайтиСтроки(Новый Структура("Номенклатура", ВыборкаНоменклатуры.Номенклатура));
		
		Для Каждого СтрокаНайдено Из Найдено Цикл
			
			МассивГрупп.Добавить(СтрокаНайдено.ИдГруппы);
			
		КонецЦикла;
		
		Если МассивГрупп.Количество() > 0 Тогда
			
			XDTOГруппы = ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOГруппыТип);
			
			Для Каждого ИдГруппы Из МассивГрупп Цикл
				
				XDTOГруппы.Ид.Добавить(XMLСтрока(ИдГруппы));
			
			КонецЦикла;
			
		КонецЕсли;
			
		Владелец.Группы = XDTOГруппы;

	Иначе
	
		Если ПараметрыОбмена.КлассифицироватьПоЦеновымГруппам Тогда
			
			Если ЗначениеЗаполнено(ВыборкаНоменклатуры.ЦеноваяГруппа) Тогда
				
				XDTOГруппы = ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOГруппыТип);
								
				XDTOГруппы.Ид.Добавить(XMLСтрока(ВыборкаНоменклатуры.ЦеноваяГруппа));
	
				Владелец.Группы = XDTOГруппы;
				
			КонецЕсли;
			
		Иначе
			
			Если ЗначениеЗаполнено(ВыборкаНоменклатуры.ИдентификаторРодителя) Тогда
				
				XDTOГруппы = ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOГруппыТип);
								
				XDTOГруппы.Ид.Добавить(XMLСтрока(ВыборкаНоменклатуры.ИдентификаторРодителя));
					
				Владелец.Группы = XDTOГруппы;

			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьСвойстваНоменклатурыXDTO(ПараметрыОбмена, Владелец, ВладелецТип, ВыборкаНоменклатуры, лМенеджерВременныхТаблиц);
	
	XDTOЗначенияСвойствТип 	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена, "ЗначенияСвойств", Истина, ВладелецТип);
	XDTOЗначенияСвойстваТип = Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена, "ЗначенияСвойства");
	
	Запрос = Новый Запрос;
	запрос.МенеджерВременныхТаблиц = лМенеджерВременныхТаблиц;
	запрос.Текст =  "ВЫБРАТЬ *
	|ИЗ
	|	ВремЗначенияСвойствТовара КАК ВремЗначенияСвойствТовара
	|ГДЕ
	|	(ВремЗначенияСвойствТовара.Номенклатура = &Номенклатура)";
	
	Запрос.УстановитьПараметр("Номенклатура", ВыборкаНоменклатуры.Номенклатура);
	Выборка = Запрос.Выполнить();
	
	Если НЕ Выборка.Пустой() тогда	
		ВыборкаСвойств = Выборка.Выбрать();
		XDTOЗначенияСвойств = ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOЗначенияСвойствТип);
		                                                 
		Пока ВыборкаСвойств.Следующий() Цикл
			
			XDTOЗначенияСвойства = ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOЗначенияСвойстваТип);
			
			XDTOЗначенияСвойства.Ид = XMLСтрока(ВыборкаСвойств.ИдентификаторСвойства);
			
			XDTOЗначенияСвойства.Значение.Добавить(XMLСтрока(ВыборкаСвойств.ИдентификаторЗначения));
			
			XDTOЗначенияСвойств.ЗначенияСвойства.Добавить(XDTOЗначенияСвойства);	
			
		КонецЦикла;
		Владелец.ЗначенияСвойств = XDTOЗначенияСвойств;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьИзображенияНоменклатуры(ПараметрыОбмена, ИмяКаталога, Владелец, лМенеджерВременныхТаблиц, ВыборкаНоменклатуры, ОписаниеФайлов, ВыгруженоКартинок, МассивКартинок)

	Запрос = Новый Запрос;
	запрос.МенеджерВременныхТаблиц = лМенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ *
	|ИЗ
	|	ВремКартинки КАК ВремКартинки
	| ГДЕ ВремКартинки.Номенклатура = &Номенклатура
	| 
	| УПОРЯДОЧИТЬ ПО
	|   ВремКартинки.Наименование";
    Запрос.УстановитьПараметр("Номенклатура", ВыборкаНоменклатуры.Номенклатура);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ВыборкаКартинок  = РезультатЗапроса.Выбрать();
		 
		тзнКартинок   = Новый ТаблицаЗначений;
		тзнКартинок.Колонки.Добавить("Картинка");
		тзнКартинок.Колонки.Добавить("НадоВыгружать");
		тзнКартинок.Колонки.Добавить("Основная");
		
		ОсновнаяКартинка = ВыборкаНоменклатуры.ОсновноеИзображение;
		
		Пока ВыборкаКартинок.Следующий() Цикл
			
			ТекКартинка = ВыборкаКартинок.ХранилищеСсылка;
			
			МассивКартинок.Добавить(ТекКартинка);
			
			НовСтр = тзнКартинок.Добавить();
			НовСтр.Картинка 		= ТекКартинка;
			НовСтр.НадоВыгружать 	= ВыборкаКартинок.НадоВыгружать;
			
			Если ТекКартинка = ОсновнаяКартинка тогда
				НовСтр.Основная 	= Истина;
			иначе
				НовСтр.Основная 	= Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
		тзнКартинок.Сортировать("Основная Убыв");
		
		Для Каждого КартинкаДляВыгрузки Из тзнКартинок Цикл
			
			АдресКартинки = ВыгрузитьКартинку(ПараметрыОбмена, ИмяКаталога, ВыборкаНоменклатуры.Номенклатура, КартинкаДляВыгрузки.Картинка, КартинкаДляВыгрузки.НадоВыгружать);
			
			Если ЗначениеЗаполнено(АдресКартинки) Тогда
				
				ОписаниеКартинки = СокрЛП(КартинкаДляВыгрузки.Картинка.Наименование);
				
				Владелец.Картинка.Добавить(АдресКартинки);
				
				Если НЕ ПустаяСтрока(ОписаниеКартинки) И НЕ КартинкаДляВыгрузки.Основная Тогда
					
					ОписаниеФайлов.Вставить(АдресКартинки, ОписаниеКартинки);
					
				КонецЕсли;
				
				ВыгруженоКартинок = ВыгруженоКартинок + 1;
				
			КонецЕсли;
			
		КонецЦикла; 		
	КонецЕсли; 
КонецПроцедуры

Процедура ВыгрузитьФайлыНоменклатуры(ПараметрыОбмена, ИмяКаталога, Владелец, лМенеджерВременныхТаблиц, ВыборкаНоменклатуры, Файлы, ОписаниеФайлов, ВыгруженоФайлов, МассивФайлов)
		
	Запрос = Новый Запрос;
	запрос.МенеджерВременныхТаблиц = лМенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ *
	|ИЗ
	|	ВремФайлы КАК ВремФайлы
	| ГДЕ ВремФайлы.Номенклатура = &Номенклатура
	| 
	| УПОРЯДОЧИТЬ ПО
	|   ВремФайлы.Наименование";
    Запрос.УстановитьПараметр("Номенклатура", ВыборкаНоменклатуры.Номенклатура);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ВыборкаФайлов = РезультатЗапроса.Выбрать();
		
		тзнФайлов   = Новый ТаблицаЗначений;
		тзнФайлов.Колонки.Добавить("Файл");
		тзнФайлов.Колонки.Добавить("НадоВыгружать");
		
		
		Пока ВыборкаФайлов.Следующий() Цикл
			
			ТекФайл = ВыборкаФайлов.ХранилищеСсылка;
			
			МассивФайлов.Добавить(ТекФайл);
			
			НовСтр = тзнФайлов.Добавить();
			НовСтр.Файл 			= ТекФайл;
			НовСтр.НадоВыгружать 	= ВыборкаФайлов.НадоВыгружать;
			
		КонецЦикла;
		
		Для Каждого ФайлДляВыгрузки Из тзнФайлов Цикл
			
			АдресФайла = ВыгрузитьФайл(ПараметрыОбмена, ИмяКаталога, ВыборкаНоменклатуры.Номенклатура, ФайлДляВыгрузки.Файл, ФайлДляВыгрузки.НадоВыгружать);
			
			Если ЗначениеЗаполнено(АдресФайла) Тогда
				
				ОписаниеФайла = СокрЛП(ФайлДляВыгрузки.Файл.Наименование);
				
				Файлы.Добавить(АдресФайла);
				
				Если НЕ ПустаяСтрока(ОписаниеФайла) Тогда
					
					ОписаниеФайлов.Вставить(АдресФайла, ОписаниеФайла);
					
				КонецЕсли;
				
				ВыгруженоФайлов = ВыгруженоФайлов + 1;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ВыгрузитьКартинку(ПараметрыОбмена, ИмяКаталога, Номенклатура, ХранилищеСсылка, НадоВыгружать)
	
	Результат = НеОпределено;
	
	Если НЕ ЗначениеЗаполнено(ХранилищеСсылка) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Картинка = ХранилищеСсылка.Хранилище.Получить();
	
	Если ТипЗнч(Картинка) <> Тип("Картинка") Тогда
		Возврат Результат;
	КонецЕсли;
	
	ФорматКартинкиРазрешен  = Истина;
	РасширениеФайлаКартинки = "";
	
	Попытка
		ФорматКартинкиОбъекта = Картинка.Формат();
	Исключение
		ФорматКартинкиОбъекта = ФорматКартинки.НеизвестныйФормат;
	КонецПопытки;
	
	Если ФорматКартинкиОбъекта = ФорматКартинки.НеизвестныйФормат Тогда
		ФорматКартинкиРазрешен = Ложь;
	Иначе
		Если НЕ (ФорматКартинкиОбъекта = ФорматКартинки.GIF
			 ИЛИ ФорматКартинкиОбъекта = ФорматКартинки.JPEG
			 ИЛИ ФорматКартинкиОбъекта = ФорматКартинки.PNG) Тогда
			Попытка
				ФорматКартинкиОбъекта = Картинка.Преобразовать(ФорматКартинки.JPEG);
			Исключение
				Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Не удалось преобразовать формат картинки. Номенклатура: " + Номенклатура + ". Преобразование из " + Строка(ФорматКартинкиОбъекта) + " в JPEG", ПараметрыОбмена);
				Возврат Результат;
			КонецПопытки;
		КонецЕсли;
		РасширениеФайлаКартинки = Строка(ФорматКартинкиОбъекта);
	КонецЕсли;
	
	Если НЕ ФорматКартинкиРазрешен Тогда
		Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Формат основного изображения неизвестен или запрещен. Номенклатура: " + Номенклатура, ПараметрыОбмена);
		Возврат Результат;
	КонецЕсли;
	
	ИмяПоНоменклатуре = Строка(Номенклатура.УникальныйИдентификатор());
	ИмяПоХранилищу    = Строка(ХранилищеСсылка.УникальныйИдентификатор());
	
	ИмяФайлаКартинки = ИмяПоНоменклатуре + "_" + ИмяПоХранилищу + "." + НРег(РасширениеФайлаКартинки);
	КаталогПоИмени   = Лев(ИмяПоНоменклатуре, 2);
	КаталогКартинки	 = Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьПутьДляПлатформы(ПараметрыОбмена.ПлатформаWindows, (ИмяКаталога + "\" + ПараметрыОбмена.ПодкаталогФайлов + "\" + КаталогПоИмени));
	
	Если НадоВыгружать тогда
		
		СоздатьКаталог(КаталогКартинки);
	
		ПолноеИмяФайлаКартинки = Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьПутьДляПлатформы(ПараметрыОбмена.ПлатформаWindows, (КаталогКартинки + "\" + ИмяФайлаКартинки));
		
		Попытка
			Картинка.Записать(ПолноеИмяФайлаКартинки);
		Исключение
			Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Не удалось записать файл картинки на диск. Номенклатура: " + Номенклатура, ПараметрыОбмена);
			Возврат Результат;
		КонецПопытки;	
	КонецЕсли;
	
	Результат = ПараметрыОбмена.ПодкаталогФайлов + "/" + КаталогПоИмени + "/" + ИмяФайлаКартинки;
	
	Возврат Результат;
	
КонецФункции

Функция ВыгрузитьФайл(ПараметрыОбмена, ИмяКаталога, Номенклатура, ХранилищеСсылка, НадоВыгружать)
	
	Результат = НеОпределено;
	
	Если НЕ ЗначениеЗаполнено(ХранилищеСсылка) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ДвоичныеДанные = ХранилищеСсылка.Хранилище.Получить();
	
	Если ТипЗнч(ДвоичныеДанные) <> Тип("ДвоичныеДанные") Тогда
		Возврат Результат;
	КонецЕсли;
	
	РасширениеФайла = ".file";
	
	Файл = Новый Файл(ХранилищеСсылка.ИмяФайла);
	РасширениеФайла = Файл.Расширение;
	
	ИмяПоНоменклатуре = Строка(Номенклатура.УникальныйИдентификатор());
	ИмяПоХранилищу    = Строка(ХранилищеСсылка.УникальныйИдентификатор());
	
	ИмяФайла		 = ИмяПоНоменклатуре + "_" + ИмяПоХранилищу + НРег(РасширениеФайла);
	КаталогПоИмени   = Лев(ИмяПоНоменклатуре, 2);
	КаталогФайла	 = Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьПутьДляПлатформы(ПараметрыОбмена.ПлатформаWindows, (ИмяКаталога + "\" + ПараметрыОбмена.ПодкаталогФайлов + "\" + КаталогПоИмени));
	
	Если НадоВыгружать тогда
		СоздатьКаталог(КаталогФайла);
		
		ПолноеИмяФайла = Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьПутьДляПлатформы(ПараметрыОбмена.ПлатформаWindows, (КаталогФайла + "\" + ИмяФайла));
		
		Попытка
			ДвоичныеДанные.Записать(ПолноеИмяФайла);
		Исключение
			Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Не удалось записать файл на диск. Номенклатура: " + Номенклатура, ПараметрыОбмена);
			Возврат Результат;
		КонецПопытки;
	КонецЕсли;
	
	Результат = ПараметрыОбмена.ПодкаталогФайлов + "/" + КаталогПоИмени + "/" + ИмяФайла;
	
	Возврат Результат;
	
КонецФункции


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Процедура ВыгрузитьПредложенияXDTO(ПараметрыОбмена, ИмяКаталога, Владелец, ВладелецТип, лМенеджерВременныхТаблиц, МассивКартинок, МассивФайлов)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = лМенеджерВременныхТаблиц;
	//Временная таблица формируется в функции СформироватьВременныеТаблицыПоИнформацииОТоварахПакета
	Запрос.Текст = "ВЫБРАТЬ
	|	*
	|ИЗ
	|	ВремНоменклатураСХарактеристиками КАК ВремНоменклатураСХарактеристиками
	|																	                		              		                              							
	|УПОРЯДОЧИТЬ ПО																		
	|	ВремНоменклатураСХарактеристиками.ПриоритетСортировки";
	
	ТзнПредложений = Запрос.Выполнить().Выгрузить();
	
	Если ТзнПредложений.Количество() > 0 тогда	
		
		Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Выгрузка предложений в XML.", ПараметрыОбмена);
		
		Итератор			= 0;
		ВыгруженоКартинок 	= 0;
		ВыгруженоФайлов		= 0;
		
		XDTOПредложенияТип 	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена, "Предложения", Истина, ВладелецТип);
		XDTOПредложения 	= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOПредложенияТип); 
		
		XDTOПредложениеТип 	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена, "Предложение");
		
		XDTOХарактеристикиТовараТип 	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена, "ХарактеристикиТовара");
		XDTOХарактеристикаТовараТип 	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена, "ХарактеристикаТовара", Истина, XDTOХарактеристикиТовараТип);
		
		XDTOЗначенияСвойствТип 	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена, "ЗначенияСвойств", Истина, XDTOПредложениеТип);
		XDTOЗначенияСвойстваТип = Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена, "ЗначенияСвойства");
		
		XDTOЗначенияРеквизитовТип 	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена, "ЗначенияРеквизитов", Истина, XDTOПредложениеТип);
		XDTOЗначениеРеквизитаТип 	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена, "ЗначениеРеквизита");
		
		Для каждого ТекПредложение из ТзнПредложений Цикл
			
			XDTOПредложение 	= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOПредложениеТип); 
			
			Если ЗначениеЗаполнено(ТекПредложение.Характеристика) тогда
				лИд 			= XMLСтрока(ТекПредложение.НоменклатураИдентификатор) + "#" + XMLСтрока(ТекПредложение.ХарактеристикаИдентификатор); 
				
				Если ПараметрыОбмена.ВыгружатьШтрихкоды тогда
					лШтрихкод 	= ПолучитьШтрихКод(ТекПредложение.Номенклатура, лМенеджерВременныхТаблиц, ТекПредложение.Характеристика);
				КонецЕсли;
				
				Если ПараметрыОбмена.ВыгружатьПланируемуюДатуПоступленияПредложения тогда
					лВыгружатьПланируемуюДатуПоступления = ПолучитьДатуПланирования(ТекПредложение.Номенклатура, лМенеджерВременныхТаблиц, ТекПредложение.Характеристика);
				КонецЕсли;
				
				//лНаименование   = ТекПредложение.Наименование + " (" + ТекПредложение.ХарактеристикаНаименование + ")";
				лНаименование   = ТекПредложение.Наименование + " (" + ТекПредложение.ХарактеристикаНаименование + ")";
				лВерсияДанных   = ТекПредложение.ХарактеристикаВерсияДанных;
				лПометкаУдаления= XMLСтрока(ТекПредложение.НоменклатураПометкаУдаления ИЛИ ТекПредложение.ХарактеристикаПометкаУдаления);
			Иначе
				лИд 			= XMLСтрока(ТекПредложение.НоменклатураИдентификатор); 
				
				Если ПараметрыОбмена.ВыгружатьШтрихкоды тогда
					лШтрихкод 	= ПолучитьШтрихКод(ТекПредложение.Номенклатура, лМенеджерВременныхТаблиц);
				КонецЕсли;
				
				Если ПараметрыОбмена.ВыгружатьПланируемуюДатуПоступленияПредложения тогда
					лВыгружатьПланируемуюДатуПоступления = ПолучитьДатуПланирования(ТекПредложение.Номенклатура, лМенеджерВременныхТаблиц);
				КонецЕсли;
				
				лНаименование   = ТекПредложение.Наименование;
				лВерсияДанных   = ТекПредложение.НоменклатураВерсияДанных;
				лПометкаУдаления= XMLСтрока(ТекПредложение.НоменклатураПометкаУдаления);
			КонецЕсли;
			
			
			XDTOПредложение.Ид 				= лИд;
			XDTOПредложение.НомерВерсии 	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьВерсиюОбъекта(ПараметрыОбмена, лВерсияДанных, "Предложений");
			XDTOПредложение.ПометкаУдаления	= лПометкаУдаления;
			
			Если ПараметрыОбмена.ВыгружатьШтрихкоды тогда
				XDTOПредложение.Штрихкод 	= лШтрихкод;
			КонецЕсли;
				
			XDTOЗначенияРеквизитов 		= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOЗначенияРеквизитовТип);  
			
			Если ПараметрыОбмена.ВыгружатьПланируемуюДатуПоступленияПредложения И ЗначениеЗаполнено(лВыгружатьПланируемуюДатуПоступления) тогда
				Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ДобавитьЗначениеРеквизитаXDTO(ПараметрыОбмена, XDTOЗначенияРеквизитов, XDTOЗначениеРеквизитаТип, "Планируемая дата поступления", лВыгружатьПланируемуюДатуПоступления);
				
			КонецЕсли;
			
			XDTOПредложение.Наименование 	= лНаименование;
			
			Если ПараметрыОбмена.ВыгружатьКартинкиИФайлыПредложений тогда
				
				Файлы = Новый Массив;
				ОписаниеФайлов = Новый Соответствие;
				
				ВыгрузкаФайловХарактеристикНоменклатуры(ПараметрыОбмена, ИмяКаталога, XDTOПредложение, лМенеджерВременныхТаблиц, ТекПредложение, Файлы, ОписаниеФайлов, ВыгруженоКартинок, МассивКартинок, ВыгруженоФайлов, МассивФайлов);
				
				Для Каждого Файл Из Файлы Цикл
					
					Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ДобавитьЗначениеРеквизитаXDTO(ПараметрыОбмена, XDTOЗначенияРеквизитов, XDTOЗначениеРеквизитаТип, "Файл", Файл);				
					
				КонецЦикла;
				
				Для Каждого ОписаниеФайла Из ОписаниеФайлов Цикл
					
					Файл = ОписаниеФайла.Ключ;
					Описание = ОписаниеФайла.Значение;
					
					Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ДобавитьЗначениеРеквизитаXDTO(ПараметрыОбмена, XDTOЗначенияРеквизитов, XDTOЗначениеРеквизитаТип, "ОписаниеФайла", Файл + "#" + Описание);
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если XDTOЗначенияРеквизитов.ЗначениеРеквизита.Количество() > 0 тогда
								
				XDTOПредложение.ЗначенияРеквизитов = XDTOЗначенияРеквизитов;
	
			КонецЕсли;
			
			Если ПараметрыОбмена.ВыгружатьНаборы тогда 
				ВыгрузитьКомплектующиеНоменклатурыXDTO(ПараметрыОбмена, XDTOПредложение, XDTOПредложениеТип, ТекПредложение.Номенклатура, ТекПредложение.Характеристика, лМенеджерВременныхТаблиц, ТекПредложение.ПриоритетСортировки);
			КонецЕсли;
			
			Если (ТекПредложение.ВестиУчетПоХарактеристикам  И ЗначениеЗаполнено(ТекПредложение.Характеристика))
				И (ПараметрыОбмена.ВыгружатьХарактеристикиПредложений ИЛИ ПараметрыОбмена.ВыгружатьЗначенияСвойствВПредложения) Тогда	
			
				Запрос = Новый Запрос;
				запрос.МенеджерВременныхТаблиц = лМенеджерВременныхТаблиц;
				запрос.Текст =  "ВЫБРАТЬ
				| *
				|ИЗ
				|	ВремЗначенияСвойствХарактеристик КАК ВремЗначенияСвойствХарактеристик
				|ГДЕ
				|	ВремЗначенияСвойствХарактеристик.Характеристика = &Характеристика";
				
				Запрос.УстановитьПараметр("Характеристика", ТекПредложение.Характеристика);
				РезультатЗапроса = Запрос.Выполнить();
				
				Если НЕ РезультатЗапроса.Пустой() Тогда
					
					XDTOХарактеристикиТовара 	= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOХарактеристикиТовараТип); 
					
					XDTOЗначенияСвойств = ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOЗначенияСвойствТип);
					
					Выборка = РезультатЗапроса.Выбрать();
					Пока Выборка.Следующий() Цикл
						
						Если Выборка.СвойствоНаименование = NULL тогда
							Продолжить;
						КонецЕсли;
						
						Если ПараметрыОбмена.ВыгружатьХарактеристикиПредложений тогда
						
							
							XDTOХарактеристикаТовара 	= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOХарактеристикаТовараТип);
							
							XDTOХарактеристикаТовара.Наименование 	= Выборка.СвойствоНаименование;
							XDTOХарактеристикаТовара.Значение		= Строка(Выборка.Значение);
							
							XDTOХарактеристикиТовара.ХарактеристикаТовара.Добавить(XDTOХарактеристикаТовара);
							
						КонецЕсли;	
						
						Если ПараметрыОбмена.ВыгружатьЗначенияСвойствВПредложения тогда
						
							XDTOЗначенияСвойства = ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOЗначенияСвойстваТип);
							
							XDTOЗначенияСвойства.Ид = XMLСтрока(Выборка.ИдентификаторСвойства);
							
							XDTOЗначенияСвойства.Значение.Добавить(XMLСтрока(Выборка.ИдентификаторЗначения));
							
							XDTOЗначенияСвойств.ЗначенияСвойства.Добавить(XDTOЗначенияСвойства);	
							
						КонецЕсли;
						
					КонецЦикла;
					
					XDTOПредложение.ХарактеристикиТовара = XDTOХарактеристикиТовара;
					
					Если XDTOЗначенияСвойств.ЗначенияСвойства.количество() > 0 тогда
						XDTOПредложение.ЗначенияСвойств = XDTOЗначенияСвойств;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			XDTOПредложения.Предложение.Добавить(XDTOПредложение);
			Итератор = Итератор + 1;
			
		КонецЦикла;
		
		Владелец.Предложения = XDTOПредложения;
		Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Выгрузка предложений в XML завершено. Выгружено " + Строка(Итератор) + " предложений." , ПараметрыОбмена);
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ВыгрузитьКомплектующиеНоменклатурыXDTO(ПараметрыОбмена, Владелец, ВладелецТип, Номенклатура, Характеристика, лМенеджерВременныхТаблиц, ПриоритетСортировки)
	
	Если ПриоритетСортировки = 2 или ПриоритетСортировки = 3  тогда
		
		XDTOКомплектующиеТип 	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена, "Комплектующие", Истина, ВладелецТип);
		XDTOКомплектующееТип 	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена, "Комплектующее", Истина, XDTOКомплектующиеТип);
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = лМенеджерВременныхТаблиц;
		Запрос.Текст = "ВЫБРАТЬ *
		|ИЗ
		|	ВремКомплектующиеНоменклатуры КАК ВремКомплектующиеНоменклатуры
		|ГДЕ
		|	ВремКомплектующиеНоменклатуры.Номенклатура = &Номенклатура
		|	И ВремКомплектующиеНоменклатуры.Характеристика = &Характеристика";
		Запрос.УстановитьПараметр("Номенклатура"	, Номенклатура);
		Запрос.УстановитьПараметр("Характеристика"	, Характеристика);
		Выборка = Запрос.Выполнить();
		
		Если НЕ Выборка.Пустой() тогда
			
			XDTOКомплектующие 		= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOКомплектующиеТип); 

			ВыборкаКомплектов =  Выборка.Выбрать();
			Пока ВыборкаКомплектов.Следующий() Цикл
				
				XDTOКомплектующее 			= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOКомплектующееТип); 
				Если ЗначениеЗаполнено(ВыборкаКомплектов.ХарактеристикаКомплектующей) тогда
					XDTOКомплектующее.Ид 			= XMLСтрока(ВыборкаКомплектов.ИдентификаторКомплектующей) + "#" + XMLСтрока(ВыборкаКомплектов.ИдентификаторХарактеристикиКомплектующей);
					XDTOКомплектующее.Наименование 	= Лев(ВыборкаКомплектов.КомплектующаяНаименование + " (" + ВыборкаКомплектов.ХарактеристикаКомплектующейНаименование+ ")", 250);
				Иначе
					XDTOКомплектующее.Ид 			= XMLСтрока(ВыборкаКомплектов.ИдентификаторКомплектующей);
					XDTOКомплектующее.Наименование	= ВыборкаКомплектов.КомплектующаяНаименование;
				КонецЕсли;
				XDTOКомплектующее.Количество= ВыборкаКомплектов.Количество;
				
				XDTOКомплектующие.Комплектующее.Добавить(XDTOКомплектующее);   
				                                             
			КонецЦикла;
			
       		Владелец.Комплектующие = XDTOКомплектующие;

		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузкаФайловХарактеристикНоменклатуры(ПараметрыОбмена,ИмяКаталога, Владелец, МенеджерВременныхТаблиц, ИнформацияОНоменклатуре, Файлы, ОписаниеФайлов, ВыгруженоКартинок, МассивКартинок, ВыгруженоФайлов, МассивФайлов)

	Запрос = Новый Запрос;
	запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ *
	|ИЗ
	|	ВремФайлыХарактеристикНоменклатуры КАК ВремФайлыХарактеристикНоменклатуры
	| ГДЕ ВремФайлыХарактеристикНоменклатуры.Номенклатура = &Номенклатура
	| И ВремФайлыХарактеристикНоменклатуры.Характеристика = &Характеристика
	|УПОРЯДОЧИТЬ ПО
	| ВремФайлыХарактеристикНоменклатуры.ДатаСоздания";
    Запрос.УстановитьПараметр("Номенклатура", ИнформацияОНоменклатуре.Номенклатура);
    Запрос.УстановитьПараметр("Характеристика", ИнформацияОНоменклатуре.Характеристика);
	
	тзнФайлов = Запрос.Выполнить().Выгрузить();
	
	Если тзнФайлов.Количество() > 0  Тогда
		
		Для каждого ТекФайл из тзнФайлов Цикл
			
			Если ТекФайл.ЭтоКартинка тогда 
				МассивКартинок.Добавить(ТекФайл.Файл);
			Иначе
				МассивФайлов.Добавить(ТекФайл.Файл);
			КонецЕсли;
			
		КонецЦикла;
		
		тзнФайлов.Сортировать("Основная Убыв, ЭтоКартинка Убыв");
		
		Для Каждого ФайлДляВыгрузки Из тзнФайлов Цикл
			
			АдресКартинки = ВыгрузитьФайлНоменклатуры(ПараметрыОбмена, ИмяКаталога, ИнформацияОНоменклатуре.Номенклатура, ИнформацияОНоменклатуре.Характеристика, ФайлДляВыгрузки);
			
			Если ЗначениеЗаполнено(АдресКартинки) Тогда
				
				ОписаниеКартинки = ?(НЕ ПустаяСтрока(ФайлДляВыгрузки.Файл.Описание), ФайлДляВыгрузки.Файл.Описание, ФайлДляВыгрузки.Файл.Наименование);
				
				Если НЕ ПустаяСтрока(ОписаниеКартинки) И НЕ ФайлДляВыгрузки.Основная Тогда
					
					ОписаниеФайлов.Вставить(АдресКартинки, ОписаниеКартинки);
					
				КонецЕсли;
				
				Если ФайлДляВыгрузки.ЭтоКартинка тогда
					
					Владелец.Картинка.Добавить(АдресКартинки);
					
					ВыгруженоКартинок 	= ВыгруженоКартинок + 1;
				Иначе
					
					Файлы.Добавить(АдресКартинки);
					
					ВыгруженоФайлов 	= ВыгруженоФайлов + 1;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла; 		
	КонецЕсли; 
КонецПроцедуры

Функция ВыгрузитьФайлНоменклатуры(ПараметрыОбмена, ИмяКаталога, Номенклатура, Характеристика, ФайлДляВыгрузки)
	
	Результат = НеОпределено;
	
	Если НЕ ЗначениеЗаполнено(ФайлДляВыгрузки.Файл) Тогда
		Возврат Результат;
	КонецЕсли;
	
	пОбъект = ?(ЗначениеЗаполнено(Характеристика), Характеристика, Номенклатура);
	
	ИмяПоНоменклатуре = Строка(пОбъект.УникальныйИдентификатор());
	ИмяПоХранилищу    = Строка(ФайлДляВыгрузки.Файл.УникальныйИдентификатор());
	
	ИмяФайлаКартинки = ИмяПоНоменклатуре + "_" + ИмяПоХранилищу + "." + ?(НРег(ФайлДляВыгрузки.Расширение) = "","jpg", НРег(ФайлДляВыгрузки.Расширение));
	КаталогПоИмени   = Лев(ИмяПоНоменклатуре, 2);
	КаталогКартинки	 = Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьПутьДляПлатформы(ПараметрыОбмена.ПлатформаWindows, (ИмяКаталога + "\" + ПараметрыОбмена.ПодкаталогФайлов + "\" + КаталогПоИмени));
	
	Если ФайлДляВыгрузки.НадоВыгружать тогда
		
		СоздатьКаталог(КаталогКартинки);
	
		ПолноеИмяФайлаКартинки = Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьПутьДляПлатформы(ПараметрыОбмена.ПлатформаWindows, (КаталогКартинки + "\" + ИмяФайлаКартинки));
	
		ФайлВХранилище = ФайлДляВыгрузки.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе;
		
		Если ФайлВХранилище Тогда
			
			Если ФайлДляВыгрузки.ХранимыйФайл = NULL Тогда
				ДвоичныеДанныеФайла = НеОпределено;
			Иначе
				ДвоичныеДанныеФайла = ФайлДляВыгрузки.ХранимыйФайл.Получить();
			КонецЕсли;
			
			Если ДвоичныеДанныеФайла = НеОпределено Тогда
				
				Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Не удалось получить данные файла " + Строка(ФайлДляВыгрузки.Файл) + " объекта " + Строка(пОбъект), ПараметрыОбмена);	
						
				Возврат Результат;
				
			КонецЕсли;
			
		Иначе
			
			ИмяФайла = Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьПутьДляПлатформы(ПараметрыОбмена.ПлатформаWindows, ?(ПараметрыОбмена.ПлатформаWindows, ФайлДляВыгрузки.ТомПолныйПутьWindows, ФайлДляВыгрузки.ТомПолныйПутьLinux) + "\" + ФайлДляВыгрузки.ПутьКФайлу);
			
			Попытка
				
				ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ИмяФайла);
				
			Исключение
				Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно(ОписаниеОшибки() + " Выгрузка файла объекта: " + Строка(пОбъект), ПараметрыОбмена);	
						
				Возврат Результат;
				
			КонецПопытки;
			
		КонецЕсли;
			
		
		Попытка
			ДвоичныеДанныеФайла.Записать(ПолноеИмяФайлаКартинки);
		Исключение
			Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Не удалось записать файл картинки на диск. Объект: " + пОбъект, ПараметрыОбмена);
			Возврат Результат;
		КонецПопытки;	
	КонецЕсли;
	
	Результат = ПараметрыОбмена.ПодкаталогФайлов + "/" + КаталогПоИмени + "/" + ИмяФайлаКартинки;
	
	Возврат Результат;
	
КонецФункции

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Процедура ВыгрузитьПрайсы(ПараметрыОбмена, Владелец, ВладелецТип, лМенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = лМенеджерВременныхТаблиц;
	//Временная таблица формируется в функции СформироватьВременныеТаблицыПоИнформацииОТоварахПакета
	Запрос.Текст = "ВЫБРАТЬ *
	|ИЗ
	|	ВремЦены КАК ВремЦены
	|
	|УПОРЯДОЧИТЬ ПО
	|	НоменклатураИдентификатор,
	|	ХарактеристикаИдентификатор";
	
	ТзнЦен = Запрос.Выполнить().Выгрузить();
	
	Если ТзнЦен.Количество() > 0 тогда
		
		Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Выгрузка цен в XML.", ПараметрыОбмена);
		Итератор = 0;
		
		XDTOПредложениеТип 	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена, "Предложение");
		XDTOЦеныТип 		= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена, "Цены", Истина, XDTOПредложениеТип);
		XDTOЦенаТип 		= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена, "Цена");
		
		КоличествоСтрок = ТзнЦен.Количество() -1 ;
		ИдПредложенияПре= "";
		
		Для НомерСтроки = 0 по  КоличествоСтрок Цикл
			
			ТекЦена = ТзнЦен[НомерСтроки];
			
			ИдПредложения = ?(ЗначениеЗаполнено(ТекЦена.Характеристика), XMLСтрока(ТекЦена.НоменклатураИдентификатор) + "#" + XMLСтрока(ТекЦена.ХарактеристикаИдентификатор), XMLСтрока(ТекЦена.НоменклатураИдентификатор));
			
			Если НомерСтроки = КоличествоСтрок тогда
				ИдПредложенияСлед = "";
			Иначе
				ТекЦенаСлед = ТзнЦен[НомерСтроки + 1];
				ИдПредложенияСлед = ?(ЗначениеЗаполнено(ТекЦенаСлед.Характеристика), XMLСтрока(ТекЦенаСлед.НоменклатураИдентификатор) + "#" + XMLСтрока(ТекЦенаСлед.ХарактеристикаИдентификатор), XMLСтрока(ТекЦенаСлед.НоменклатураИдентификатор));
			КонецЕсли;
			
			Если НомерСтроки = 0 или ИдПредложения <> ИдПредложенияПре тогда
				
				XDTOПредложение 	= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOПредложениеТип); 
				XDTOПредложение.Ид 	= ИдПредложения;
				
				XDTOЦены 			= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOЦеныТип); 
				
			КонецЕсли;
			
			XDTOЦена 			= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOЦенаТип); 
			
			ЦенаТовара 			= ОкруглитьЦену(ТекЦена.Цена/ТекЦена.Коэффициент, ТекЦена.ПорядокОкругления, ТекЦена.ОкруглятьВБольшуюСторону);
			ПредставлениеЦены 	= СокрЛП(ТекЦена.Цена) + " " + СокрЛП(ТекЦена.ВалютаЦеныСсылка) + " за " + СокрЛП(ТекЦена.ЕдиницаИзмеренияЦены);
			
			XDTOЦена.Представление 		= ПредставлениеЦены;
			XDTOЦена.ИдТипаЦены			= XMLСтрока(ТекЦена.ТипЦеныИдентификатор);
			XDTOЦена.ЦенаЗаЕдиницу 		= ЦенаТовара;
			XDTOЦена.Валюта       		= Лев(ТекЦена.ВалютаКод, 3);
			//XDTOЦена.ИдЕдиницыИзмерения = XMLСтрока(ТекЦена.БазоваяЕдиницаИзмеренияИдентификатор);
			
			XDTOЦены.Цена.Добавить(XDTOЦена);
			
			Если ИдПредложения <> ИдПредложенияСлед тогда
				XDTOПредложение.Цены = XDTOЦены;
				Владелец.Предложение.Добавить(XDTOПредложение);
			КонецЕсли;
			
			ИдПредложенияПре = ИдПредложения; 
			Итератор 		 = Итератор + 1;
			
		КонецЦикла;
		
	Конецесли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = лМенеджерВременныхТаблиц;
	Запрос.Текст = "Уничтожить ВремЦены";
	Запрос.Выполнить();
	
	Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Выгрузка цен в XML завершено. Выгружено " + Строка(Итератор) + " цен предложений." , ПараметрыОбмена);
	
КонецПроцедуры

Функция ОкруглитьЦену(Число, ПараметрПорядокОкругления, ОкруглятьВБольшуюСторону) 

	Перем Результат;

	// Преобразуем порядок округления числа.
	// Если передали пустое значение порядка, то округлим до копеек. 
	Если НЕ ЗначениеЗаполнено(ПараметрПорядокОкругления) Тогда
		ПорядокОкругления = Перечисления.ПорядкиОкругления.Окр0_01; 
	Иначе
		ПорядокОкругления = ПараметрПорядокОкругления;
	КонецЕсли;

	Порядок = Число(Строка(ПорядокОкругления));
		
	// вычислим количество интервалов, входящих в число
	КоличествоИнтервал	= Число / Порядок;
		
	// вычислим целое количество интервалов.
	КоличествоЦелыхИнтервалов = Цел(КоличествоИнтервал);
		
	Если КоличествоИнтервал = КоличествоЦелыхИнтервалов Тогда
		
		// Числа поделились нацело. Округлять не нужно.
		Результат	= Число;
	Иначе
		Если ОкруглятьВБольшуюСторону Тогда
			
			// При порядке округления "0.05" 0.371 должно округлитья до 0.4
			Результат = Порядок * (КоличествоЦелыхИнтервалов + 1);
		Иначе

			// При порядке округления "0.05" 0.371 должно округлитья до 0.35,
			// а 0.376 до 0.4
			Результат = Порядок * Окр(КоличествоИнтервал,0,РежимОкругления.Окр15как20);
		КонецЕсли; 
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

Процедура ВыгрузитьОстаткиXDTO(ПараметрыОбмена, Владелец, ВладелецТип, лМенеджерВременныхТаблиц)
	
	Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Выгрузка остатков в XML.", ПараметрыОбмена);
	
	лВыгрузкаПоСкладам 	= ПараметрыОбмена.ВыгружатьОстаткиПоСкладам;	
	Итератор 		 = 0;
	ЗапросПоСкладам = Новый Запрос;
	ЗапросПоСкладам.МенеджерВременныхТаблиц = лМенеджерВременныхТаблиц;
	ЗапросПоСкладам.Текст = "ВЫБРАТЬ *
	|ИЗ
	|	ВремСклады КАК ВремСклады";
	ТзнСкладов = ЗапросПоСкладам.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = лМенеджерВременныхТаблиц;
	//Временная таблица формируется в функции СформироватьВременныеТаблицыПоИнформацииОТоварахПакета
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВремНоменклатураСХарактеристиками КАК ВремНоменклатураСХарактеристиками";
    Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ЗапросПоОстаткам = Новый Запрос;
		ЗапросПоОстаткам.МенеджерВременныхТаблиц = лМенеджерВременныхТаблиц;
		//Временная таблица формируется в функции СформироватьВременныеТаблицыПоИнформацииОТоварахПакета
		ЗапросПоОстаткам.Текст = "ВЫБРАТЬ * ИЗ ВремОстатки КАК ВремОстаткиПоСкладам
		|ГДЕ ВремОстаткиПоСкладам.Номенклатура = &Номенклатура И ВремОстаткиПоСкладам.Характеристика = &Характеристика  
		|УПОРЯДОЧИТЬ ПО
		|	НоменклатураИдентификатор,
		|	ХарактеристикаИдентификатор";
		ЗапросПоОстаткам.УстановитьПараметр("Номенклатура",Выборка.Номенклатура);
		ЗапросПоОстаткам.УстановитьПараметр("Характеристика",Выборка.Характеристика);
		
		ТзнОстатков = ЗапросПоОстаткам.Выполнить().Выгрузить();
		
		XDTOПредложениеТип 	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена,  "Предложение");
		XDTOОстаткиТип 		= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена,  "Остатки", Истина, XDTOПредложениеТип);
		XDTOОстатокТип 		= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена,  "Остаток");
		XDTOСкладТип 		= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучениеТипОбъектаXDTO(ПараметрыОбмена,  "Склад");
		
		ИдПредложения 		= ?(ЗначениеЗаполнено(Выборка.Характеристика), XMLСтрока(Выборка.НоменклатураИдентификатор) + "#" + XMLСтрока(Выборка.ХарактеристикаИдентификатор), XMLСтрока(Выборка.НоменклатураИдентификатор));
		
		XDTOПредложение 	= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOПредложениеТип); 
		XDTOПредложение.Ид 	= ИдПредложения;
				
		XDTOОстатки 		= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOОстаткиТип); 
		
		Если лВыгрузкаПоСкладам тогда
			
			Для Каждого ТекСклад Из ТзнСкладов Цикл 
				
				НайденнаяСтрока = ТзнОстатков.Найти(ТекСклад.Склад);
				
				XDTOОстаток					= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOОстатокТип); 

				Если НайденнаяСтрока = Неопределено тогда
					
					XDTOСклад				= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOСкладТип);	
					XDTOСклад.Ид			= XMLСтрока(ТекСклад.Идентификатор);
					XDTOСклад.Количество	= 0;
					
					XDTOОстаток.Склад		= XDTOСклад;
					
				Иначе
					XDTOСклад				= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOСкладТип);	
					XDTOСклад.Ид			= XMLСтрока(ТекСклад.Идентификатор);
					XDTOСклад.Количество	= НайденнаяСтрока.Остаток;
					
					XDTOОстаток.Склад		= XDTOСклад;
					
				КонецЕсли;
				
				XDTOОстатки.Остаток.Добавить(XDTOОстаток);
                Итератор 		 = Итератор + 1;
			КонецЦикла;
			
		Иначе
			
			XDTOОстаток					= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOОстатокТип); 

			ТзнОстатков.Свернуть("НоменклатураИдентификатор, ХарактеристикаИдентификатор", "Остаток");	
			
			Если ТзнОстатков.Количество() > 0 тогда
				XDTOОстаток.Количество 	= ТзнОстатков[0].Остаток;
			Иначе
				XDTOОстаток.Количество 	= 0;
			Конецесли; 
			XDTOОстатки.Остаток.Добавить(XDTOОстаток);  
			Итератор 		 = Итератор + 1;
			
		КонецЕсли;
		
		XDTOПредложение.Остатки = XDTOОстатки;
    	
		Владелец.Предложение.Добавить(XDTOПредложение);

	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = лМенеджерВременныхТаблиц;
	Запрос.Текст = "Уничтожить ВремОстатки";
	Запрос.Выполнить();
	
	Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Выгрузка остатков в XML завершено. Выгружено " + Строка(Итератор) + " элементов." , ПараметрыОбмена);

КонецПроцедуры
