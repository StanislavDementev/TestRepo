#Область ПрограммныйИнтерфейс

Процедура ВыполнитьРассылкуПоЗаданию() Экспорт
	
	//Если Не ВключенРежимОтладки() Тогда
	//	Если Не СерверныеУтилиты.МожноВыполнятьРегламентнуюВыгрузкуДанных() Тогда
	//		Возврат;
	//	КонецЕсли;
	//КонецЕсли;

	ОтменитьЗависшиеРассылки();
	
	ОтправитьПисьма();
	
	ОбновитьСтатусыПисем();
	
КонецПроцедуры

Процедура ОтменитьРассылкуПоПисьму(Письмо) Экспорт
	
	УспешныеСтатусыОтправки = Новый Массив;
	УспешныеСтатусыОтправки.Добавить(Перечисления.СтатусыОтправкиВЗаданииНаРассылку.Отправлен);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Письмо", Письмо);
	Запрос.УстановитьПараметр("МаксимальныйНомерПопытки", ПолучитьМаксимальноеКоличествоПопытокОтправкиСообщения());
	Запрос.УстановитьПараметр("УспешныеСтатусыОтправки", УспешныеСтатусыОтправки);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Clouddep_ЗаданияНаРассылку.ИдентификаторЗадания
	|ИЗ
	|	РегистрСведений.Clouddep_ЗаданияНаРассылку КАК ЗаданияНаРассылку
	|ГДЕ
	|	ЗаданияНаРассылку.Письмо = &Письмо
	|	И НЕ(ЗаданияНаРассылку.СтатусОтправки В (&УспешныеСтатусыОтправки)
	|				ИЛИ ЗаданияНаРассылку.НомерПопытки >= &МаксимальныйНомерПопытки)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаданияНаРассылку.ИдентификаторЗадания
	|ИЗ
	|	РегистрСведений.ЗаданияНаРассылку КАК ЗаданияНаРассылку
	|ГДЕ
	|	ЗаданияНаРассылку.Письмо = &Письмо";

	РезультатПакета = Запрос.ВыполнитьПакет();
	
	#Область Отмена_фоновых_заданий
	ВыборкаЗаданий = РезультатПакета[1].Выбрать();
	ОтменяемыеИдентификаторы = Новый Массив;
	Пока ВыборкаЗаданий.Следующий() Цикл
		ОтменяемыеИдентификаторы.Добавить(ВыборкаЗаданий.ИдентификаторЗадания);
	КонецЦикла;
	ОчиститьРегистр_СостояниеРассылокПоЗаданиям(ОтменяемыеИдентификаторы);
	
	ОтменитьЗависшиеРассылки();
	#КонецОбласти 
	
	
	#Область Обновим_статусы_заданий
	ВыборкаЗаданий = РезультатПакета[0].Выбрать();
	
	ЗаполняемыеСвойства = Новый Структура;
	ЗаполняемыеСвойства.Вставить("СтатусОтправки", Перечисления.СтатусыОтправкиВЗаданииНаРассылку.Отмена);
	ЗаполняемыеСвойства.Вставить("Комментарий", "Задание отменено "+ТекущаяДата()+" "+ПараметрыСеанса.ТекущийПользователь);
	Пока ВыборкаЗаданий.Следующий() Цикл
		ОбновитьСостояниеРассылкиПолучателю(ВыборкаЗаданий.ИдентификаторЗадания, ЗаполняемыеСвойства);
	КонецЦикла;
	#КонецОбласти 
	
	ОбновитьСтатусПисьма(Письмо, Перечисления.СтатусыОтправкиВЗаданииНаРассылку.Отмена);

КонецПроцедуры

Процедура ЗапуститьРассылкуПовторноПоПисьму(Письмо) Экспорт
	
	#Если Отладка Тогда
	Письмо = Справочники.ПисьмаДляОтложеннойОтправки.ПустаяСсылка();
	#КонецЕсли
	
	Если Письмо.СтатусПисьма<>Перечисления.СтатусыОтправкиВЗаданииНаРассылку.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ИгнорируемыеСтатусыОтправки = Новый Массив;
	ИгнорируемыеСтатусыОтправки.Добавить(Перечисления.СтатусыОтправкиВЗаданииНаРассылку.Отправлен);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Письмо", Письмо);
	Запрос.УстановитьПараметр("МаксимальныйНомерПопытки", ПолучитьМаксимальноеКоличествоПопытокОтправкиСообщения());
	Запрос.УстановитьПараметр("ИгнорируемыеСтатусыОтправки", ИгнорируемыеСтатусыОтправки);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаданияНаРассылку.ИдентификаторЗадания
	|ИЗ
	|	РегистрСведений.ЗаданияНаРассылку КАК ЗаданияНаРассылку
	|ГДЕ
	|	ЗаданияНаРассылку.Письмо = &Письмо
	|	И НЕ ЗаданияНаРассылку.СтатусОтправки В (&ИгнорируемыеСтатусыОтправки)
	|	И ЗаданияНаРассылку.НомерПопытки < &МаксимальныйНомерПопытки";
	
	ЗначенияСвойствЗадания = Новый Структура;
	ЗначенияСвойствЗадания.Вставить("СтатусОтправки", Перечисления.СтатусыОтправкиВЗаданииНаРассылку.ВОбработке);
	ЗначенияСвойствЗадания.Вставить("Комментарий", "");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбновитьСостояниеРассылкиПолучателю(Выборка.ИдентификаторЗадания, ЗначенияСвойствЗадания);
	КонецЦикла;
	
	ОбновитьСтатусПисьма(Письмо, Перечисления.СтатусыОтправкиВЗаданииНаРассылку.ВОбработке);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// ВОбработке (для ЗаданияНаРассылку)
// Отправлен (для ЗаданияНаРассылку и СостояниеРассылокПоЗаданиям)
// НеУдачнаяОтправка (для ЗаданияНаРассылку и СостояниеРассылокПоЗаданиям)
// Отмена (для ЗаданияНаРассылку)
// Обрабатывается (для СостояниеРассылокПоЗаданиям)
// Обработано (для СостояниеРассылокПоЗаданиям)

// По сообщению "Ratelimit exceeded for mailbox" - прерываем выгрузку

Процедура ОтменитьЗависшиеРассылки()
	
	#Область Остановка_ФЗ_при_очистке_регистра_СостояниеРассылокПоЗаданиям
	// ситуация возникает при досрочном отмене рассылки
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Clouddep_СостояниеРассылокПоЗаданиям.ИД_ЗадачиОбработчика
	|ИЗ
	|	РегистрСведений.Clouddep_СостояниеРассылокПоЗаданиям КАК Clouddep_СостояниеРассылокПоЗаданиям";
	НеОтмененные_ИД_ЗадачиОбработчика = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИД_ЗадачиОбработчика");
	
	ОтборФЗ = Новый Структура;
	ОтборФЗ.Вставить("Наименование", "ОтправкаПочтовойРассылки");
	ОтборФЗ.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	
	АктивныеФЗ = ФоновыеЗадания.ПолучитьФоновыеЗадания(ОтборФЗ);
	Для каждого ФоновноеЗадание Из АктивныеФЗ Цикл
		Если НеОтмененные_ИД_ЗадачиОбработчика.Найти(ФоновноеЗадание.Ключ)=Неопределено Тогда
			Попытка
				ФоновноеЗадание.Отменить();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	#КонецОбласти 
	
	#Область Отмена_долго_выполняющихся_ФЗ
	МаксимальныйПериодОжиданияОкончанияФоновогоЗадания = 2; // часов
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Clouddep_СостояниеРассылокПоЗаданиям.ИдентификаторЗадания,
	|	Clouddep_СостояниеРассылокПоЗаданиям.ИД_ЗадачиОбработчика КАК ИД_ЗадачиОбработчика,
	|	Clouddep_СостояниеРассылокПоЗаданиям.СтатусОтправки,
	|	Clouddep_СостояниеРассылокПоЗаданиям.ДатаНачалаОбработки КАК ДатаНачалаОбработки
	|ИЗ
	|	РегистрСведений.Clouddep_СостояниеРассылокПоЗаданиям КАК Clouddep_СостояниеРассылокПоЗаданиям
	|ИТОГИ ПО
	|	ДатаНачалаОбработки,
	|	ИД_ЗадачиОбработчика";
	
	ВыборкаДатаНачалаОбработки = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ДатаНачалаОбработки");
	
	ТекущаяДата = ТекущаяДата();
	
	Пока ВыборкаДатаНачалаОбработки.Следующий() Цикл
	    РазницаЧасов = Цел((ТекущаяДата - ВыборкаДатаНачалаОбработки.ДатаНачалаОбработки)/3600);
		Если РазницаЧасов<МаксимальныйПериодОжиданияОкончанияФоновогоЗадания Тогда
			Продолжить;
		КонецЕсли;
		
		ВыборкаИдентификаторовФЗ = ВыборкаДатаНачалаОбработки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ИД_ЗадачиОбработчика");
		
		Пока ВыборкаИдентификаторовФЗ.Следующий() Цикл
			
			#Область Отмена_зависших_фоновых_заданий
			ИД_ЗадачиОбработчика = ВыборкаИдентификаторовФЗ.ИД_ЗадачиОбработчика;
			
			ОтборФЗ = Новый Структура;
			ОтборФЗ.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
			ОтборФЗ.Вставить("Ключ", ИД_ЗадачиОбработчика);
			
			ФЗПоИдентификатору = ФоновыеЗадания.ПолучитьФоновыеЗадания(ОтборФЗ);
			
			Для каждого ФоновоеЗадание Из ФЗПоИдентификатору Цикл
				Попытка
					ФоновоеЗадание.Отменить();
				Исключение
				КонецПопытки;
			КонецЦикла;
			#КонецОбласти 
			
			#Область Удаляем_записи_регистра_СостояниеРассылокПоЗаданиям
			ВыборкаИдентификаторовПисем = ВыборкаИдентификаторовФЗ.Выбрать();
			
			Пока ВыборкаИдентификаторовПисем.Следующий() Цикл
				МенеджерЗаписиЗадания = РегистрыСведений.Clouddep_СостояниеРассылокПоЗаданиям.СоздатьМенеджерЗаписи();
				МенеджерЗаписиЗадания.ИдентификаторЗадания = ВыборкаИдентификаторовПисем.ИдентификаторЗадания;
				Попытка
					МенеджерЗаписиЗадания.Удалить();
				Исключение
				КонецПопытки;
				
				ЗначенияСвойствСостояниеРассылкиПолучателю = Новый Структура;
				ЗначенияСвойствСостояниеРассылкиПолучателю.Вставить("СтатусОтправки", Перечисления.СтатусыОтправкиВЗаданииНаРассылку.НеУдачнаяОтправка);
				ЗначенияСвойствСостояниеРассылкиПолучателю.Вставить("ДатаОтправки", ТекущаяДата);
				ЗначенияСвойствСостояниеРассылкиПолучателю.Вставить("Комментарий", "Задание отменено по таймауту!");
				ОбновитьСостояниеРассылкиПолучателю(ВыборкаИдентификаторовПисем.ИдентификаторЗадания, ЗначенияСвойствСостояниеРассылкиПолучателю);
				
			КонецЦикла;
			#КонецОбласти 
			
		КонецЦикла;
	
	КонецЦикла;
	#КонецОбласти 
	
	#Область Очистка_отмененных_ФЗ
	// случай когда система считает что ФЗ работают, а на самом деле они отменены
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Clouddep_СостояниеРассылокПоЗаданиям.ИД_ЗадачиОбработчика,
	|	Clouddep_СостояниеРассылокПоЗаданиям.ИдентификаторЗадания
	|ИЗ
	|	РегистрСведений.Clouddep_СостояниеРассылокПоЗаданиям КАК Clouddep_СостояниеРассылокПоЗаданиям";
	ИдентификаторыОбработчиков = Запрос.Выполнить().Выгрузить();
	
	СостоянияОтмененныхФЗ = Новый Массив;
	СостоянияОтмененныхФЗ.Добавить(СостояниеФоновогоЗадания.ЗавершеноАварийно);
	СостоянияОтмененныхФЗ.Добавить(СостояниеФоновогоЗадания.Отменено);
	СостоянияОтмененныхФЗ.Добавить(СостояниеФоновогоЗадания.Завершено);
	
	ОтборФЗ = Новый Структура;
	ОтборФЗ.Вставить("Наименование", "ОтправкаПочтовойРассылки");
	ОтборФЗ.Вставить("Состояние", СостоянияОтмененныхФЗ);
	
	ЗавершенныеФЗ = ФоновыеЗадания.ПолучитьФоновыеЗадания(ОтборФЗ);
	ИдентификаторыЗаданий = Новый Массив;
	
	Для каждого ФоновоеЗадание Из ЗавершенныеФЗ Цикл
		КлючФЗ = ФоновоеЗадание.Ключ;
		
		СтрокиИдентификаторы = ИдентификаторыОбработчиков.НайтиСтроки(Новый Структура("ИД_ЗадачиОбработчика", КлючФЗ));
		Для каждого СтрокаИдентификатора Из СтрокиИдентификаторы Цикл
			ИдентификаторыЗаданий.Добавить(СтрокаИдентификатора.ИдентификаторЗадания);
		КонецЦикла;
	КонецЦикла;
	
	ОчиститьРегистр_СостояниеРассылокПоЗаданиям(ИдентификаторыЗаданий);
	#КонецОбласти 
	
КонецПроцедуры

Процедура ОтправитьПисьма()
	МаксимальноеКоличествоПотоков = 5;
	ПорцииДляВыгрузки = 100;

	ОбрабатываемыеСтатусыПисем = Новый Массив;
	ОбрабатываемыеСтатусыПисем.Добавить(Перечисления.СтатусыОтправкиВЗаданииНаРассылку.ВОбработке);
	ОбрабатываемыеСтатусыПисем.Добавить(Перечисления.СтатусыОтправкиВЗаданииНаРассылку.НеУдачнаяОтправка);
	
	МаксимальноеКоличествоПопыток = ПолучитьМаксимальноеКоличествоПопытокОтправкиСообщения();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОбрабатываемыеСтатусыПисем", ОбрабатываемыеСтатусыПисем);
	Запрос.УстановитьПараметр("МаксимальноеКоличествоПопыток", МаксимальноеКоличествоПопыток);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Clouddep_СостояниеРассылокПоЗаданиям.ИдентификаторЗадания,
	|	Clouddep_СостояниеРассылокПоЗаданиям.ИД_ЗадачиОбработчика
	|ПОМЕСТИТЬ втРассылкиВРаботе
	|ИЗ
	|	РегистрСведений.Clouddep_СостояниеРассылокПоЗаданиям КАК Clouddep_СостояниеРассылокПоЗаданиям
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаданияНаРассылку.Письмо КАК Письмо,
	|	ЗаданияНаРассылку.Получатель КАК Получатель,
	|	ЗаданияНаРассылку.АдресПолучателя,
	|	ЗаданияНаРассылку.ИдентификаторЗадания,
	|	ЗаданияНаРассылку.ДатаОтправки,
	|	ЗаданияНаРассылку.СтатусОтправки,
	|	ЗаданияНаРассылку.НомерПопытки КАК НомерПопытки,
	|	ЗаданияНаРассылку.Комментарий
	|ПОМЕСТИТЬ втЗаданияНаРассылку
	|ИЗ
	|	РегистрСведений.ЗаданияНаРассылку КАК ЗаданияНаРассылку
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Clouddep_СостояниеРассылокПоЗаданиям КАК Clouddep_СостояниеРассылокПоЗаданиям
	|		ПО ЗаданияНаРассылку.ИдентификаторЗадания = Clouddep_СостояниеРассылокПоЗаданиям.ИдентификаторЗадания
	|ГДЕ
	|	Clouddep_СостояниеРассылокПоЗаданиям.ИД_ЗадачиОбработчика ЕСТЬ NULL 
	|	И ЗаданияНаРассылку.СтатусОтправки В(&ОбрабатываемыеСтатусыПисем)
	|	И ЗаданияНаРассылку.НомерПопытки < &МаксимальноеКоличествоПопыток
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЕСТЬNULL(втРассылкиВРаботе.ИД_ЗадачиОбработчика, 0)) КАК КоличествоЗапущенныхФЗ
	|ИЗ
	|	втРассылкиВРаботе КАК втРассылкиВРаботе
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЗаданияНаРассылку.Письмо КАК Письмо,
	|	втЗаданияНаРассылку.Получатель КАК Получатель,
	|	втЗаданияНаРассылку.АдресПолучателя,
	|	втЗаданияНаРассылку.ИдентификаторЗадания,
	|	втЗаданияНаРассылку.ДатаОтправки,
	|	втЗаданияНаРассылку.СтатусОтправки,
	|	втЗаданияНаРассылку.НомерПопытки КАК НомерПопытки,
	|	втЗаданияНаРассылку.Комментарий,
	|	втЗаданияНаРассылку.Письмо КАК КоличествоПисем
	|ИЗ
	|	втЗаданияНаРассылку КАК втЗаданияНаРассылку
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			втЗаданияНаРассылку.Письмо КАК Письмо,
	|			МИНИМУМ(втЗаданияНаРассылку.НомерПопытки) КАК НомерПопытки
	|		ИЗ
	|			втЗаданияНаРассылку КАК втЗаданияНаРассылку
	|		
	|		СГРУППИРОВАТЬ ПО
	|			втЗаданияНаРассылку.Письмо) КАК НомераПопытокДляОтправки
	|		ПО втЗаданияНаРассылку.Письмо = НомераПопытокДляОтправки.Письмо
	|			И втЗаданияНаРассылку.НомерПопытки = НомераПопытокДляОтправки.НомерПопытки
	|ИТОГИ
	|	КОЛИЧЕСТВО(Получатель),
	|	МИНИМУМ(НомерПопытки),
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КоличествоПисем)
	|ПО
	|	ОБЩИЕ,
	|	Письмо";
	
	РезультатПакета = Запрос.ВыполнитьПакет();
	ВыборкаЗапущеныхФЗ = РезультатПакета[2].Выбрать();
	
	#Область Проверим_осталась_ли_возможность_запустить_новые_потоки
	Если ВыборкаЗапущеныхФЗ.Следующий() Тогда
		Если ЗначениеЗаполнено(ВыборкаЗапущеныхФЗ.КоличествоЗапущенныхФЗ) Тогда
			МаксимальноеКоличествоПотоков = МаксимальноеКоличествоПотоков-ВыборкаЗапущеныхФЗ.КоличествоЗапущенныхФЗ;
		КонецЕсли;
	КонецЕсли;
	
	МаксимальноеКоличествоПотоков = Макс(0, МаксимальноеКоличествоПотоков);
	Если МаксимальноеКоличествоПотоков=0 Тогда
		Возврат; // потоки ранее уже были запущены. Ждем их завершения.
	КонецЕсли;
	#КонецОбласти 
	
	ВыборкаИтогов = РезультатПакета[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если Не ВыборкаИтогов.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаПисьмо = ВыборкаИтогов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Письмо");
	
	ОбщееКоличествоПолучателей = 0;
	Пока ВыборкаПисьмо.Следующий() Цикл
		ОбщееКоличествоПолучателей = ОбщееКоличествоПолучателей+Мин(ВыборкаПисьмо.Получатель, ПорцииДляВыгрузки);
	КонецЦикла;
	ВыборкаПисьмо.Сбросить();
	
	ТекущаяДата = ТекущаяДата();
	Пока ВыборкаПисьмо.Следующий() Цикл
		
		ОбновитьСтатусПисьма(ВыборкаПисьмо.Письмо, Перечисления.СтатусыОтправкиВЗаданииНаРассылку.Обрабатывается);
		
		КоличествоАдресатовВПисьме = Мин(ВыборкаПисьмо.Получатель, ПорцииДляВыгрузки);
		Если КоличествоАдресатовВПисьме=0 Тогда
			Продолжить;
		КонецЕсли;
		
		КоличествоПотоковНаПисьмо = Цел(КоличествоАдресатовВПисьме * МаксимальноеКоличествоПотоков/ОбщееКоличествоПолучателей);
		КоличествоПотоковНаПисьмо = ?(КоличествоПотоковНаПисьмо=0, 1, КоличествоПотоковНаПисьмо);
		
		КоличествоПисемВПотоке = Цел(КоличествоАдресатовВПисьме/КоличествоПотоковНаПисьмо);
		КоличествоПисемВПотоке = ?(КоличествоПисемВПотоке*КоличествоПотоковНаПисьмо<КоличествоАдресатовВПисьме, КоличествоПисемВПотоке+1, КоличествоПисемВПотоке);
		
		ВыборкаАдресатов = ВыборкаПисьмо.Выбрать();
		
		ДанныеОПолучателях = Новый ТаблицаЗначений;
		ДанныеОПолучателях.Колонки.Добавить("Получатель");
		ДанныеОПолучателях.Колонки.Добавить("АдресПолучателя");
		ДанныеОПолучателях.Колонки.Добавить("ИдентификаторЗадания");
		
		ОбработаноАдресатов = 0;
		
		Для СчетчикПотоков=1 По КоличествоПотоковНаПисьмо Цикл
			Если ОбработаноАдресатов=ПорцииДляВыгрузки Тогда
				Прервать;
			КонецЕсли;
				
			ДанныеОПолучателях.Очистить();
			
			СозданоПисемВПотоке = 0;
			
			Пока ВыборкаАдресатов.Следующий() Цикл
				
				НоваяСтрокаПолучателя = ДанныеОПолучателях.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаПолучателя, ВыборкаАдресатов);
				
				ОбработаноАдресатов = ОбработаноАдресатов+1;
				
				СозданоПисемВПотоке = СозданоПисемВПотоке+1;
				Если СозданоПисемВПотоке=КоличествоПисемВПотоке Тогда
					Если СчетчикПотоков<КоличествоПотоковНаПисьмо Тогда
						Прервать;
					КонецЕсли;
				КонецЕсли;
				
				Если ОбработаноАдресатов=ПорцииДляВыгрузки Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			ИД_ЗадачиОбработчика = Строка(Новый УникальныйИдентификатор)+"_"+ВыборкаПисьмо.Письмо+" от "+ВыборкаПисьмо.Письмо.ДатаСоздания;
			
			ЗаполнитьРегистр_СостояниеРассылокПоЗаданиям(ДанныеОПолучателях.ВыгрузитьКолонку("ИдентификаторЗадания"), Перечисления.СтатусыОтправкиВЗаданииНаРассылку.Обрабатывается, ТекущаяДата, ИД_ЗадачиОбработчика);
			
			ИнформацияОПисьме = Новый Структура;
			ИнформацияОПисьме.Вставить("Письмо", ВыборкаПисьмо.Письмо);
			ИнформацияОПисьме.Вставить("НомерПопытки", ВыборкаПисьмо.НомерПопытки);
			
			МассивПараметров = Новый Массив;
			МассивПараметров.Добавить(ИнформацияОПисьме);
			МассивПараметров.Добавить(ДанныеОПолучателях);
			МассивПараметров.Добавить(ИД_ЗадачиОбработчика);
			
			//Если ВключенРежимОтладки() Тогда
			//	ПочтовыеРассылкиСервер.ОбработатьПисьмо(ВыборкаПисьмо, ДанныеОПолучателях, ИД_ЗадачиОбработчика);
			//Иначе
				ФоновыеЗадания.Выполнить("Clouddep_ПочтовыеРассылкиСервер.ОбработатьПисьмо", МассивПараметров, ИД_ЗадачиОбработчика, "ОтправкаПочтовойРассылки");
			//КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРегистр_СостояниеРассылокПоЗаданиям(ИдентификаторыЗаданий, СтатусОбработки, ДатаОбработки, ИД_ЗадачиОбработчика)
	Для каждого ИдентификаторЗадания Из ИдентификаторыЗаданий Цикл
		МенеджерЗаписи = РегистрыСведений.Clouddep_СостояниеРассылокПоЗаданиям.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ИдентификаторЗадания = ИдентификаторЗадания;
		МенеджерЗаписи.СтатусОтправки = СтатусОбработки;
		МенеджерЗаписи.ДатаНачалаОбработки = ДатаОбработки;
		МенеджерЗаписи.ИД_ЗадачиОбработчика = ИД_ЗадачиОбработчика;
		МенеджерЗаписи.Записать();
	КонецЦикла;
КонецПроцедуры

Процедура ОчиститьРегистр_СостояниеРассылокПоЗаданиям(ИдентификаторыЗаданий)
	Для каждого ИдентификаторЗадания Из ИдентификаторыЗаданий Цикл
		МенеджерЗаписи = РегистрыСведений.Clouddep_СостояниеРассылокПоЗаданиям.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ИдентификаторЗадания = ИдентификаторЗадания;
		МенеджерЗаписи.Удалить();
	КонецЦикла;
КонецПроцедуры
	
Процедура ОбработатьПисьмо(ВыборкаПисьмо, ДанныеОПолучателях, ИД_ЗадачиОбработчика) Экспорт
	ВключенРежимОтладки = ВключенРежимОтладки();
	
	МаксимальноеКоличествоПопыток = ПолучитьМаксимальноеКоличествоПопытокОтправкиСообщения();
	
	Письмо = ВыборкаПисьмо.Письмо;
	НомерТекущейПопытки = ВыборкаПисьмо.НомерПопытки+1;
	
	ТемаСообщения = Письмо.Наименование;
	Если ВключенРежимОтладки Тогда
		ТемаСообщения = ИД_ЗадачиОбработчика;
	КонецЕсли;
	
	Текст = Письмо.Текст;
	ВидТекстаПисьма = Письмо.ВидТекстаПисьма;
	УчетнаяЗапись = Письмо.УчетнаяЗаписьОтправителя;
	
	Вложения = Новый СписокЗначений;
	Для каждого СтрокаВложения Из Письмо.Вложения Цикл
		Вложения.Добавить(СтрокаВложения.Файл.Получить(), СтрокаВложения.ИмяФайла);
	КонецЦикла;
	
	ИдентификаторыЗаданий = ДанныеОПолучателях.ВыгрузитьКолонку("ИдентификаторЗадания");
	
	ИнтернетПочта = ПодключитьсяПочтовомуСерверу(УчетнаяЗапись);
	Если ИнтернетПочта=Неопределено Тогда
		ОчиститьРегистр_СостояниеРассылокПоЗаданиям(ИдентификаторыЗаданий);
		Возврат;
	КонецЕсли;
	
	Для каждого ДанныеОПолучателе Из ДанныеОПолучателях Цикл
		ИдентификаторЗадания = ДанныеОПолучателе.ИдентификаторЗадания;
		
		#Область Обновим_статус_задания_отправки_получателю
		УстанавливаемыеСвойства = Новый Структура;
		УстанавливаемыеСвойства.Вставить("СтатусОтправки", Перечисления.СтатусыОтправкиВЗаданииНаРассылку.Обрабатывается);
		УстанавливаемыеСвойства.Вставить("ДатаОтправки", ТекущаяДата());
		УстанавливаемыеСвойства.Вставить("НомерПопытки", НомерТекущейПопытки);
		ОбновитьСостояниеРассылкиПолучателю(ИдентификаторЗадания, УстанавливаемыеСвойства);
		#КонецОбласти 
		
		ОписаниеОшибки = "";
		РезультатОтправки = ОтправитьEmail(ИнтернетПочта, Письмо, ДанныеОПолучателе, ТемаСообщения, Текст, ВидТекстаПисьма, Вложения, УчетнаяЗапись, ОписаниеОшибки);
		
		Если РезультатОтправки=Истина Тогда
			
			#Область Обновим_статус_задания_отправки_получателю
			УстанавливаемыеСвойства = Новый Структура;
			УстанавливаемыеСвойства.Вставить("СтатусОтправки", Перечисления.СтатусыОтправкиВЗаданииНаРассылку.Отправлен);
			УстанавливаемыеСвойства.Вставить("ДатаОтправки", ТекущаяДата());
			УстанавливаемыеСвойства.Вставить("НомерПопытки", НомерТекущейПопытки);
			УстанавливаемыеСвойства.Вставить("Комментарий", "");
			ОбновитьСостояниеРассылкиПолучателю(ИдентификаторЗадания, УстанавливаемыеСвойства);
			#КонецОбласти 
			
			ОбновитьСостояниеРассылокПоЗаданиям(ИдентификаторЗадания, Перечисления.СтатусыОтправкиВЗаданииНаРассылку.Отправлен);
			
		Иначе
			
			ОбновитьСостояниеРассылокПоЗаданиям(ИдентификаторЗадания, Перечисления.СтатусыОтправкиВЗаданииНаРассылку.НеУдачнаяОтправка);
			
			УстанавливаемыеСвойства = Новый Структура;
			УстанавливаемыеСвойства.Вставить("ДатаОтправки", ТекущаяДата());
			УстанавливаемыеСвойства.Вставить("СтатусОтправки", Перечисления.СтатусыОтправкиВЗаданииНаРассылку.НеУдачнаяОтправка);
			
			Если Найти(НРег(ОписаниеОшибки), "ratelimit exceeded for mailbox")<>0 Тогда
				
				#Область Сервер_нас_отключил_за_СПАМ
				
				#Область Обновим_статус_задания_отправки_получателю
				УстанавливаемыеСвойства.Вставить("НомерПопытки", НомерТекущейПопытки);
				УстанавливаемыеСвойства.Вставить("Комментарий", ОписаниеОшибки);
				ОбновитьСостояниеРассылкиПолучателю(ИдентификаторЗадания, УстанавливаемыеСвойства);
				#КонецОбласти 
				
				ОчиститьРегистр_СостояниеРассылокПоЗаданиям(ИдентификаторыЗаданий);
			    Возврат; // ждем до следующего старта рассылки
				#КонецОбласти 
				
			ИначеЕсли Найти(НРег(ОписаниеОшибки), "не верно задан адрес получателя")<>0 Или Найти(НРег(ОписаниеОшибки), "invalid mailbox")<>0 Тогда
				
				#Область Обновим_статус_задания_отправки_получателю
				УстанавливаемыеСвойства.Вставить("НомерПопытки", МаксимальноеКоличествоПопыток); // больше отправлять не будем!
				УстанавливаемыеСвойства.Вставить("Комментарий", ОписаниеОшибки);
				ОбновитьСостояниеРассылкиПолучателю(ИдентификаторЗадания, УстанавливаемыеСвойства);
				#КонецОбласти 
				
			Иначе
				
				#Область Обновим_статус_задания_отправки_получателю
				УстанавливаемыеСвойства.Вставить("НомерПопытки", НомерТекущейПопытки);
				УстанавливаемыеСвойства.Вставить("Комментарий", ОписаниеОшибки);
				ОбновитьСостояниеРассылкиПолучателю(ИдентификаторЗадания, УстанавливаемыеСвойства);
				#КонецОбласти 
				
				#Область Переподключимся_к_почтовому_серверу
				ОтключитьсяОтПочтовогоСервера(ИнтернетПочта);
				ИнтернетПочта = ПодключитьсяПочтовомуСерверу(УчетнаяЗапись);
				Если ИнтернетПочта=Неопределено Тогда
					ИдентификаторыЗаданий = ДанныеОПолучателях.ВыгрузитьКолонку("ИдентификаторЗадания");
					ОчиститьРегистр_СостояниеРассылокПоЗаданиям(ИдентификаторыЗаданий);
					Возврат;
				КонецЕсли;
				#КонецОбласти 
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОтключитьсяОтПочтовогоСервера(ИнтернетПочта);
	ОчиститьРегистр_СостояниеРассылокПоЗаданиям(ИдентификаторыЗаданий);
КонецПроцедуры	

Функция ПодключитьсяПочтовомуСерверу(УчетнаяЗапись)
	Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
	ИнтернетПочта = Новый ИнтернетПочта;
	
	Попытка
		ИнтернетПочта.Подключиться(Профиль);
	Исключение
		Возврат Неопределено;
	КонецПопытки;

	Возврат ИнтернетПочта;
КонецФункции // ПодключитьсяПочтовомуСерверу()

Процедура ОтключитьсяОтПочтовогоСервера(ИнтернетПочта)
	Попытка
		ИнтернетПочта.Отключиться();
	Исключение
	КонецПопытки;
КонецПроцедуры

Функция ОтправитьEmail(ИнтернетПочта, Письмо, ДанныеОПолучателе, Знач ТемаСообщения, Знач Текст, Знач ВидТекстаПисьма, Вложения, УчетнаяЗапись, ОписаниеОшибки="") Экспорт
	РезультатОтправки = Ложь;
	
	АдресЭлектроннойПочтыОтправителя = УчетнаяЗапись.АдресЭлектроннойПочты;
	
	ВариантТекста = 0;
	Если ВидТекстаПисьма<>Перечисления.ВидыТекстовЭлектронныхПисем.Текст Тогда
		ВариантТекста = 1;
	КонецЕсли;
	
	ТС = Текст;
	
	ЕстьТегПриветствия = Найти(ТС, "<Приветствие>")<>0;
	
	Комментарий = "";
	
	АдресПолучателя = ДанныеОПолучателе.АдресПолучателя;
	Получатель = ДанныеОПолучателе.Получатель;
	
	Если ВключенРежимОтладки() Тогда
		ТемаСообщения = АдресПолучателя + " " + ТемаСообщения;
		АдресПолучателя = "info@1esnik.ru";
	КонецЕсли;
	
	СписокВложений = Новый СписокЗначений;
	
	ТекстСообщенияДляОтправки = ТС;
	
	Если ЕстьТегПриветствия Тогда
		
		Если ТипЗнч(ДанныеОПолучателе.Получатель) = Тип("СправочникСсылка.Контрагенты") Тогда
			ТекстПриветствия = "Уважаемые господа!"
		ИначеЕсли ТипЗнч(ДанныеОПолучателе.Получатель) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
			Если ЗначениеЗаполнено(ДанныеОПолучателе.Получатель.Имя+ДанныеОПолучателе.Получатель.Отчество) Тогда
				ТекстПриветствия = "Здравствуйте, "+ДанныеОПолучателе.Получатель.Имя+" "+ДанныеОПолучателе.Получатель.Отчество +"!"
			КонецЕсли;
		ИначеЕсли ТипЗнч(ДанныеОПолучателе.Получатель) = Тип("СправочникСсылка.КонтактныеЛицаКонтрагентов") Тогда
			Если  ЗначениеЗаполнено(ДанныеОПолучателе.Получатель.КонтактноеЛицо) И ЗначениеЗаполнено(ДанныеОПолучателе.Получатель.КонтактноеЛицо.Имя+ДанныеОПолучателе.Получатель.КонтактноеЛицо.Отчество) Тогда
				ТекстПриветствия = "Здравствуйте, "+ДанныеОПолучателе.Получатель.КонтактноеЛицо.Имя+" "+ДанныеОПолучателе.Получатель.КонтактноеЛицо.Отчество +"!"
			КонецЕсли;
		КонецЕсли;
		
		ТекстСообщенияДляОтправки = СтрЗаменить(ТекстСообщенияДляОтправки, "<Приветствие>", ТекстПриветствия);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресПолучателя) И Найти(АдресПолучателя,"@")>0 Тогда
		СписокПолучатели = Новый СписокЗначений;
		СписокПолучатели.Добавить(АдресПолучателя);
	иначе
		ОписаниеОшибки = "Не верно задан адрес получателя";
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого СтрокаИзТаблицыВложений Из Вложения Цикл
		ДвоичноеВложение = Новый Структура;
		ДвоичноеВложение.Вставить("Хранилище", СтрокаИзТаблицыВложений.Значение);
		ДвоичноеВложение.Вставить("ИмяФайла", СтрокаИзТаблицыВложений.Представление);
		СписокВложений.Добавить(ДвоичноеВложение);
	КонецЦикла;
	
	
	Если ВариантТекста = 1 Тогда // HTML
		Сообщение = Новый ИнтернетПочтовоеСообщение;
		Сообщение.Отправитель = УчетнаяЗапись.АдресЭлектроннойПочты;
		Сообщение.Тема = ТемаСообщения;
		Сообщение.Получатели.Добавить(АдресПолучателя);
		Сообщение.Тексты.Добавить(ТекстСообщенияДляОтправки, ТипТекстаПочтовогоСообщения.HTML);
		
		Для Каждого ЭлементВложения Из СписокВложений Цикл
			Сообщение.Вложения.Добавить(ЭлементВложения.Значение.Хранилище, ЭлементВложения.Значение.ИмяФайла);
		КонецЦикла;	
		
		Попытка 
			ИнтернетПочта.Послать(Сообщение);
			РезультатОтправки = Истина;
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
		КонецПопытки;	
	Иначе	// Текст
		
		Сообщение = Новый ИнтернетПочтовоеСообщение;
		Сообщение.Отправитель = АдресЭлектроннойПочтыОтправителя;
		Сообщение.Тема = ТемаСообщения;
		Сообщение.Получатели.Добавить(АдресПолучателя);
		Сообщение.Тексты.Добавить(ТекстСообщенияДляОтправки, ТипТекстаПочтовогоСообщения.ПростойТекст);
		
		Для Каждого ЭлементВложения Из СписокВложений Цикл
			Сообщение.Вложения.Добавить(ЭлементВложения.Значение.Хранилище, ЭлементВложения.Значение.ИмяФайла);
		КонецЦикла;	
		
		Попытка 
			ИнтернетПочта.Послать(Сообщение);
			РезультатОтправки = Истина;
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
		КонецПопытки;	
	КонецЕсли;	
	
	Возврат РезультатОтправки;
КонецФункции

Функция ОбновитьСтатусПисьма(Письмо, Статус) Экспорт
	ПисьмоОбъект = Письмо.ПолучитьОбъект();
	
	Попытка
		ПисьмоОбъект.Заблокировать();
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	ПисьмоОбъект.СтатусПисьма = Статус;
	ПисьмоОбъект.Записать();	
	
	Если ПисьмоОбъект.Заблокирован() Тогда
		ПисьмоОбъект.Разблокировать();
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

Процедура ОбновитьСостояниеРассылокПоЗаданиям(ИдентификаторЗадания, СтатусОтправки)
	МенеджерЗаписи = РегистрыСведений.Clouddep_СостояниеРассылокПоЗаданиям.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ИдентификаторЗадания = ИдентификаторЗадания;
	МенеджерЗаписи.Прочитать();
	
	МенеджерЗаписи.ИдентификаторЗадания = ИдентификаторЗадания;
	МенеджерЗаписи.СтатусОтправки = СтатусОтправки;
	МенеджерЗаписи.Записать();
КонецПроцедуры

Процедура ОбновитьСостояниеРассылкиПолучателю(ИдентификаторЗадания, ЗначенияСвойствЗадания)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторЗадания", ИдентификаторЗадания);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаданияНаРассылку.*
	|ИЗ
	|	РегистрСведений.ЗаданияНаРассылку КАК ЗаданияНаРассылку
	|ГДЕ
	|	ЗаданияНаРассылку.ИдентификаторЗадания = &ИдентификаторЗадания";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.Clouddep_ЗаданияНаРассылку.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ЗначенияСвойствЗадания);
	МенеджерЗаписи.Записать();
КонецПроцедуры

Функция ВключенРежимОтладки()

	Возврат Ложь;

КонецФункции // ()

Функция ПолучитьМаксимальноеКоличествоПопытокОтправкиСообщения()
	Возврат 15;
КонецФункции // ПолучитьМаксимальноеКоличествоПопытокОтправкиСообщения()

Процедура ОбновитьСтатусыПисем()
	
	СтатусыПисем_ОтправленныеПисьма = Новый Массив;
	СтатусыПисем_ОтправленныеПисьма.Добавить(Перечисления.СтатусыОтправкиВЗаданииНаРассылку.Обработано);
	СтатусыПисем_ОтправленныеПисьма.Добавить(Перечисления.СтатусыОтправкиВЗаданииНаРассылку.Отмена);
	
	СтатусыЗаданийНаРассылку_ОбработанныеАдреса = Новый Массив;
	СтатусыЗаданийНаРассылку_ОбработанныеАдреса.Добавить(Перечисления.СтатусыОтправкиВЗаданииНаРассылку.Отправлен);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПисьмаДляОтложеннойОтправки.Ссылка КАК Письмо
	|ПОМЕСТИТЬ втПисьма
	|ИЗ
	|	Справочник.ПисьмаДляОтложеннойОтправки КАК ПисьмаДляОтложеннойОтправки
	|ГДЕ
	|	НЕ ПисьмаДляОтложеннойОтправки.СтатусПисьма В (&СтатусыПисем_ОтправленныеПисьма)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПисьма.Письмо КАК Письмо,
	|	ЕСТЬNULL(КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаданияНаРассылку.ИдентификаторЗадания), 0) КАК НеОбработаноАдресатов
	|ИЗ
	|	втПисьма КАК втПисьма
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияНаРассылку КАК ЗаданияНаРассылку
	|		ПО втПисьма.Письмо = ЗаданияНаРассылку.Письмо
	|			И (НЕ(ЗаданияНаРассылку.СтатусОтправки В (&СтатусыЗаданийНаРассылку_ОбработанныеАдреса)
	|					ИЛИ ЗаданияНаРассылку.НомерПопытки >= &МаксимальныйНомерПопытки))
	|
	|СГРУППИРОВАТЬ ПО
	|	втПисьма.Письмо";
		
	Запрос.УстановитьПараметр("СтатусыПисем_ОтправленныеПисьма", СтатусыПисем_ОтправленныеПисьма);
	Запрос.УстановитьПараметр("МаксимальныйНомерПопытки", ПолучитьМаксимальноеКоличествоПопытокОтправкиСообщения());
	Запрос.УстановитьПараметр("СтатусыЗаданийНаРассылку_ОбработанныеАдреса", СтатусыЗаданийНаРассылку_ОбработанныеАдреса);
	
	ВыборкаПисьмо = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаПисьмо.Следующий() Цикл
		Если ВыборкаПисьмо.НеОбработаноАдресатов=0 Тогда
			ОбновитьСтатусПисьма(ВыборкаПисьмо.Письмо, Перечисления.СтатусыОтправкиВЗаданииНаРассылку.Обработано);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти
