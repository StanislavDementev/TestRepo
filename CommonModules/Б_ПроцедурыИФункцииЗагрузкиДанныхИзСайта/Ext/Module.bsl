
			///////////////////////////////////////////////////////////////////
			//			 			ЗАГРУЗКА ДОКУМЕНТОВ                     //
			/////////////////////////////////////////////////////////////////
			
Процедура ЗагрузкаДокументов(ПараметрыОбмена) Экспорт
	
	Если ПараметрыОбмена.ВыгружатьНаСайт тогда
		
		ЗагрузитьДокументыССайта(ПараметрыОбмена);	
		
	Иначе
	
		ЗагрузитьДокументыИзФайла(ПараметрыОбмена);
		
	КонецЕсли;
				
КонецПроцедуры
			
Процедура ЗагрузитьДокументыИзФайла(ПараметрыОбмена)
	
	Файл = Новый Файл(ПараметрыОбмена.ФайлЗагрузки);
	
	Если НЕ Файл.Существует()
		ИЛИ Файл.ЭтоКаталог() Тогда
		
			Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Файл загрузки не найден: " + ПараметрыОбмена.ФайлЗагрузки, ПараметрыОбмена);
		Возврат;
		
	КонецЕсли;
	
	ФайлXML = Новый ТекстовыйДокумент;
	ФайлXML.Прочитать(ПараметрыОбмена.ФайлЗагрузки);
	СтрокаXML = ФайлXML.ПолучитьТекст();
	
	ЗагрузитьДокументы(СтрокаXML, ПараметрыОбмена);
	
КонецПроцедуры
			
Процедура ЗагрузитьДокументыССайта(ПараметрыОбмена)
	
	ОтветСервера = "";
	Соединение = Неопределено;
	ТипСоединения = "sale";
	
	НастройкиПодключения = ПараметрыОбмена.НастройкиПодключения;
	
	АдресДляРаботы = НастройкиПодключения.АдресСкрипта + "?type=" + ТипСоединения; 
	
	Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Отправка запроса на авторизацию.", ПараметрыОбмена);
	
	Успешно = Б_ОбщиеПроцедурыИФункцииОбменаССайтом.АвторизацияВыполнена(Соединение, НастройкиПодключения, ОтветСервера, ПараметрыОбмена, ТипСоединения);
	
	Если Не Успешно Тогда
		Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Авторизация на сайте не выполнена.", ПараметрыОбмена);	
		Возврат;
	КонецЕсли;
	
	КукиИмя				= СтрПолучитьСтроку(ОтветСервера, 2);
	КукиЗначение		= СтрПолучитьСтроку(ОтветСервера, 3);
	Попытка
		Токен			= "&" + СтрПолучитьСтроку(ОтветСервера, 4);
	Исключение
		Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("CSRF токен не поддерживается. Для того, чтобы поддерживался - необходимо обновить БУС.", ПараметрыОбмена);	
	КонецПопытки;
	
	ЗаголовкиЗапросов	= "Cookie: " + КукиИмя + "=" + КукиЗначение;
	
	Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Отправка запроса на инициализацию, для определения версии обмена данных.", ПараметрыОбмена);
	ОтветСервераОИнициализации = Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьДанныеССервера(Соединение, АдресДляРаботы + НастройкиПодключения.ПараметрЗапросаHTTP_Инициализация + Токен + "&version=" + ПараметрыОбмена.ВерсияСхемы , ЗаголовкиЗапросов, ПараметрыОбмена);
	
	Если ОтветСервераОИнициализации = Неопределено Тогда 
		
		Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Не удалось провести инициализацию. Загрузка с сайта невозможна", ПараметрыОбмена);	
		Возврат;
		
	КонецЕсли;
	
	Попытка
		
		ВерсияXML		= СтрПолучитьСтроку(ОтветСервераОИнициализации, 4);
		
		ВерсияЧислом 	= Число(Прав(ВерсияXML,4)); 
		
	Исключение
		
		Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Не удалось получить версию XML. Загрузка с сайта невозможна", ПараметрыОбмена);	
		Возврат;
		
	КонецПопытки;
	
	Если ВерсияЧислом < 2.08 тогда
		
		Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Версия Commerce ML не 2.08, а " + Строка(ВерсияЧислом) + ". Загрузка документов этим модулем обмена невозможна.", ПараметрыОбмена);	
		Возврат;
		
	КонецЕсли;

	лЕстьДокументы = Истина;
	
	Пока лЕстьДокументы Цикл
		ОписаниеОшибки = "";
		
		Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Отправка запроса на получение заказов с сайта.", ПараметрыОбмена);
		
		ОтветСервера = Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьДанныеССервера(Соединение, АдресДляРаботы + НастройкиПодключения.ПараметрЗапросаHTTP_ПолучитьДанные + Токен, ЗаголовкиЗапросов, ПараметрыОбмена);
		
		Если ОтветСервера = Неопределено Тогда 
			Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Не удалось загрузить данные с сервера.", ПараметрыОбмена);	
			Возврат;
			
		КонецЕсли;
		
		СтрокаCML = "";
		ОтветСервера = СокрЛ(ОтветСервера);
		
		Если Лев(ОтветСервера, 2) = "PK" Тогда
			СтрокаCML = РаспаковатьZIPАрхив(ОтветСервера);
		Иначе
			Если Лев(ОтветСервера, 5) = "<?xml" Тогда
				СтрокаCML = ОтветСервера;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаCML) Тогда
			Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Не удалось прочитать данные, загруженные с сервера.", ПараметрыОбмена);
			Возврат;
		КонецЕсли;

		лЕстьДокументы = ЗагрузитьДокументы(СтрокаCML, ПараметрыОбмена);
		
	КонецЦикла;
	
	ОтветСервера = Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьДанныеССервера(Соединение, АдресДляРаботы + НастройкиПодключения.ПараметрЗапросаHTTP_УспешноеЗавершениеИмпорта + Токен + "&version=" + ПараметрыОбмена.ВерсияСхемы , ЗаголовкиЗапросов, ПараметрыОбмена);
	
	Если ОтветСервера = Неопределено Тогда 
		Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Не удалось отправить сообщение на сайт, что заказы получены и обработаны.", ПараметрыОбмена);	
	КонецЕсли;
	
	Если СокрЛП(НРег(СтрПолучитьСтроку(ОтветСервера, 1))) <> "success" Тогда
		Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Не удалось отправить сообщение на сайт, что заказы получены и обработаны.", ПараметрыОбмена);	
		Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Ответ сервера: " + ОтветСервера, ПараметрыОбмена);	
	Иначе
		Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Сообщение на сайт, что заказы получены и обработаны, доставлено.", ПараметрыОбмена);	
	КонецЕсли;
	
	
	
КонецПроцедуры

Функция РаспаковатьZIPАрхив(СтрокаZIP) Экспорт
	
	СтрокаСодержимого = "ZIP_ERROR";
	
	ИмяФайла    = ПолучитьИмяВременногоФайла("zip");
	ИмяКаталога = КаталогВременныхФайлов() + Строка(Новый УникальныйИдентификатор);
	СоздатьКаталог(ИмяКаталога);
	
	СтрокаВФайл = Новый ТекстовыйДокумент;
	СтрокаВФайл.УстановитьТекст(СтрокаZIP);
	Попытка
		СтрокаВФайл.Записать(ИмяФайла);
	Исключение
	КонецПопытки;
	
	ЧтениеZIP = Новый ЧтениеZIPФайла(ИмяФайла);
	ЧтениеZIP.ИзвлечьВсе(ИмяКаталога);
	ЧтениеZIP.Закрыть();
	
	РаспакованныеФайлы = НайтиФайлы(ИмяКаталога, "*.xml");
	
	Если РаспакованныеФайлы.Количество() = 1 Тогда
		СтрокаИзФайла 	  = Новый ТекстовыйДокумент;
		СтрокаИзФайла.Прочитать(РаспакованныеФайлы[0].ПолноеИмя);
		СтрокаСодержимого = СтрокаИзФайла.ПолучитьТекст();
	КонецЕсли;
	
	Попытка
		УдалитьФайлы(ИмяФайла);
		УдалитьФайлы(ИмяКаталога);
	Исключение
	КонецПопытки;
	
	Возврат СтрокаСодержимого;
	
КонецФункции


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Функция ЗагрузитьДокументы(ДанныеЗаказов, ПараметрыОбмена)
	
	Если ТипЗнч(ДанныеЗаказов) = Тип("ОбъектXDTO") Тогда
		ДокументыXDTO 	= ДанныеЗаказов;
	Иначе
		ПараметрыОбмена.МояФабрикаXDTO 	= СоздатьФабрикуXDTO(ПараметрыОбмена.ФайлСхемы); 
		ДокументыXDTO 	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ДанныеЗаказовВXDTO(ПараметрыОбмена, ДанныеЗаказов);
                            
	КонецЕсли;
	
	Если ДокументыXDTO 	= Неопределено Тогда 
		
		Возврат Ложь;
		
	ИначеЕсли НЕ Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ОбъектXDTOСодержитСвойство(ДокументыXDTO, "Документ") Тогда
		
		Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Нет документов для обработки", ПараметрыОбмена);
		Возврат Ложь;
		
	КонецЕсли;
	
	МассивДокументовXDTO = Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьМассивОбъектовСпискаXDTO(ДокументыXDTO.Документ);
	
	ТзнДокументов = Новый ТаблицаЗначений;
	ТзнДокументов.Колонки.Добавить("Валюта");
	ТзнДокументов.Колонки.Добавить("Время");
	ТзнДокументов.Колонки.Добавить("Дата");
	ТзнДокументов.Колонки.Добавить("Дата1С");
	ТзнДокументов.Колонки.Добавить("Номер");
	ТзнДокументов.Колонки.Добавить("Номер1С");
	ТзнДокументов.Колонки.Добавить("НомерВерсии");
	ТзнДокументов.Колонки.Добавить("ЗначенияРеквизитов");
	ТзнДокументов.Колонки.Добавить("Основание");
	ТзнДокументов.Колонки.Добавить("Ид");
	ТзнДокументов.Колонки.Добавить("Комментарий");
	ТзнДокументов.Колонки.Добавить("Курс");
	ТзнДокументов.Колонки.Добавить("Контрагент");
	ТзнДокументов.Колонки.Добавить("ПометкаУдаления");
	ТзнДокументов.Колонки.Добавить("Склад");
	ТзнДокументов.Колонки.Добавить("Сумма");
	ТзнДокументов.Колонки.Добавить("Товары");
	ТзнДокументов.Колонки.Добавить("ХозОперация");
	ТзнДокументов.Колонки.Добавить("НДСВСумме");
	ТзнДокументов.Колонки.Добавить("СуммаНДС");
	ТзнДокументов.Колонки.Добавить("Скидки");
	
	Результат = Ложь;
	
	Для Каждого ДокументXDTO Из МассивДокументовXDTO Цикл
		
		Результат = Истина;
		
		лНомер 	= "";
		лДата	= "";
		Если НЕ Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ОбъектXDTOСодержитСвойство(ДокументXDTO, "Номер") Тогда
			Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Ошибка в значении узла <Документ>.<Номер> документа XML. Документ будет пропущен.", ПараметрыОбмена);
			Продолжить;
		Иначе
			Если НЕ	Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СвойствоXDTOЗаполнено(ДокументXDTO.Номер) тогда
				Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Некорректные данные в <Документ>.<Номер> документа XML. Документ будет пропущен.", ПараметрыОбмена);
				Продолжить;
				Иначе
					лНомер = ДокументXDTO.Номер;
			конецЕсли;
		КонецЕсли;	
		
		Если НЕ Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ОбъектXDTOСодержитСвойство(ДокументXDTO, "Дата") Тогда
			Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Ошибка в значении узла <Документ>.<Дата> документа XML. Документ будет пропущен.", ПараметрыОбмена);
			Продолжить;
		Иначе
			Если НЕ	Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СвойствоXDTOЗаполнено(ДокументXDTO.Дата)  тогда
				Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Некорректные данные в <Документ>.<Дата> документа XML. Документ будет пропущен.", ПараметрыОбмена);
				Продолжить;
			Иначе      
				лДата = ДокументXDTO.Дата;
			конецЕсли;
		КонецЕсли;	
		
		Если НЕ Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ОбъектXDTOСодержитСвойство(ДокументXDTO, "ХозОперация")
			ИЛИ (НЕ НРег(ДокументXDTO.ХозОперация) = "заказ товара"	И НЕ НРег(ДокументXDTO.ХозОперация) = "отпуск товара") Тогда
			Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Ошибка в значении узла <Документ>.<ХозОперация> документа XML: " + лНомер + "от " + лДата + ". Документ с таким типом не обрабатывается. Документ будет пропущен.", ПараметрыОбмена);
		КонецЕсли;		
		
		Если НЕ Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ОбъектXDTOСодержитСвойство(ДокументXDTO, "Контрагенты") Тогда
			Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Ошибка в значении узла <Документ>.<Контрагенты> документа XML: " + лНомер + "от " + лДата + ". Документ будет пропущен.", ПараметрыОбмена);
			Продолжить;
		Иначе
			Контрагенты = ДокументXDTO.Контрагенты;
			Если НЕ Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ОбъектXDTOСодержитСвойство(Контрагенты, "Контрагент") Тогда
				Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Ошибка в значении узла <Документ>.<Контрагенты>.<Контрагент> документа XML: " + лНомер + "от " + лДата + ". Документ будет пропущен.", ПараметрыОбмена);
				Продолжить;
			Иначе
				Если Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ЭтоСписокXDTO(Контрагенты.Контрагент) тогда
					Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Ошибка в значении узла <Документ>.<Контрагенты> документа XML: " + лНомер + "от " + лДата + ". Указано несколько контрагентов. Будет взят первый.", ПараметрыОбмена);
					лКонтрагентXDTO =  Контрагенты.Контрагент[0];
				иначе
					лКонтрагентXDTO =  Контрагенты.Контрагент;
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;	
		
		лКонтрагент= ОбработатьИнформациюОКонтрагентеXDTO(ПараметрыОбмена, лКонтрагентXDTO, лНомер);
		
		Если НЕ Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ОбъектXDTOСодержитСвойство(ДокументXDTO, "Товары") Тогда
			Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Ошибка в значении узла <Документ>.<Товары> документа XML: " + лНомер + "от " + лДата + ". Документ будет пропущен.", ПараметрыОбмена);
			Продолжить;
		Иначе
			ТоварыXDTO 	= ДокументXDTO.Товары;
			
			лТовары 	= ОбработатьИнформациюОТабличнойЧастиДокументаXDTO(ПараметрыОбмена, ТоварыXDTO, лНомер);
			
		КонецЕсли;
		
		НовСтр = ТзнДокументов.Добавить();
		
		НовСтр.Дата 			= лДата;
		НовСтр.Номер 			= лНомер;
		НовСтр.Дата1С 			= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьЗначениеПоСвойству(ДокументXDTO, "Дата1С"			, "Дата");
		НовСтр.Номер1С 			= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьЗначениеПоСвойству(ДокументXDTO, "Номер1С"		, "Строка");
		НовСтр.НомерВерсии		= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьЗначениеПоСвойству(ДокументXDTO, "НомерВерсии"	, "Строка");
		НовСтр.ПометкаУдаления 	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьЗначениеПоСвойству(ДокументXDTO, "ПометкаУдаления", "Булево");
		НовСтр.Время 			= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьЗначениеПоСвойству(ДокументXDTO, "Время"			, "Строка");
		НовСтр.ХозОперация 		= ДокументXDTO.ХозОперация;
		НовСтр.Ид 				= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьЗначениеПоСвойству(ДокументXDTO, "Ид"				, "Строка");
		
		лВалюта                 = Справочники.Валюты.НайтиПоНаименованию(Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьЗначениеПоСвойству(ДокументXDTO, "Валюта", "Строка")).Ссылка;
		НовСтр.Валюта 			= ?(ЗначениеЗаполнено(лВалюта), лВалюта, Константы.ВалютаУправленческогоУчета.Получить());
		
		НовСтр.Комментарий 		= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьЗначениеПоСвойству(ДокументXDTO, "Комментарий"	, "Строка");
		НовСтр.Курс 			= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьЗначениеПоСвойству(ДокументXDTO, "Курс"			, "Число");
		НовСтр.Сумма 			= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьЗначениеПоСвойству(ДокументXDTO, "Сумма",			  "Число");
		
		НовСтр.Контрагент		= лКонтрагент;
		           
		Если Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ОбъектXDTOСодержитСвойство(ДокументXDTO, "Склады") Тогда
			
			Склады = ДокументXDTO.Склады;
			Если НЕ Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ОбъектXDTOСодержитСвойство(Склады, "Склад") Тогда
				Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Ошибка в значении узла <Документ>.<Склады>.<Склад> документа XML: " + лНомер + "от " + лДата + "", ПараметрыОбмена);
			Иначе
				Если Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ЭтоСписокXDTO(Склады.Склад) тогда
					Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Ошибка в значении узла <Документ>.<Склады> документа XML: " + лНомер + "от " + лДата + ". Указано несколько складов. Будет взят первый.", ПараметрыОбмена);
					лСкладXDTO			=  Склады.Склад[0];
					лСклад 				= ОбработатьИнформациюОСкладеXDTO(ПараметрыОбмена, лСкладXDTO, лНомер);
					НовСтр.Склад		= лСклад;
				иначе
					лСкладXDTO 			=  Склады.Склад;
					лСклад 				= ОбработатьИнформациюОСкладеXDTO(ПараметрыОбмена, лСкладXDTO, лНомер);
					НовСтр.Склад		= лСклад;
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;	
		
		Если Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ОбъектXDTOСодержитСвойство(ДокументXDTO, "Основание") Тогда
			
			НовСтр.Основание = Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьЗначениеПоСвойству( ДокументXDTO, "Основание",		  "Строка");
		Иначе
			Если ДокументXDTO.ХозОперация = "Отпуск товара" тогда
				Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Для отгрузки с номером: " + лНомер + "от " + лДата + " не указано основание.", ПараметрыОбмена);
			КонецЕсли;	
		КонецЕсли;	
		
		Если Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ОбъектXDTOСодержитСвойство(ДокументXDTO, "Налоги") Тогда
			НалогиXDTO = ДокументXDTO.Налоги;
			Если Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ОбъектXDTOСодержитСвойство(НалогиXDTO, "Налог") Тогда
				
				НалогXDTO = НалогиXDTO.Налог;
				
				НовСтр.НДСВСумме 	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьЗначениеПоСвойству(НалогXDTO, "УчтеноВСумме",		  "Булево");
				НовСтр.СуммаНДС 	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьЗначениеПоСвойству(НалогXDTO, "Сумма",			  "Число");
				
			Конецесли;
		Иначе
			НовСтр.НДСВСумме 	= Ложь;
			НовСтр.СуммаНДС 	= 0;
		КонецЕсли;
		
		Если Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ОбъектXDTOСодержитСвойство(ДокументXDTO, "Скидки") Тогда
			СкидкиXDTO 		= ДокументXDTO.Скидки;
			НовСтр.Скидки 	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ОбработатьЗначенияСкидокXDTO(ПараметрыОбмена, СкидкиXDTO);
		КонецЕсли;
		
		Если Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ОбъектXDTOСодержитСвойство(ДокументXDTO, "ЗначенияРеквизитов") Тогда
			ЗначенияРеквизитовXDTO 		= ДокументXDTO.ЗначенияРеквизитов;
			НовСтр.ЗначенияРеквизитов 	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ОбработатьЗначенияРеквизитовXDTO(ПараметрыОбмена, ЗначенияРеквизитовXDTO);
		КонецЕсли;
		
		НовСтр.Товары		= лТовары;
		
	КонецЦикла;
	
	СоздатьОбновитьТиповыеДокументы(ПараметрыОбмена, ТзнДокументов);
	
	Возврат Результат;
	
КонецФункции

Функция ОбработатьИнформациюОКонтрагентеXDTO(ПараметрыОбмена, КонтрагентXDTO, НомерДокумента)
	
	СтрИнформацияОКонтрагенте = Новый Структура;
	
	Если НЕ Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "Ид") Тогда
		Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Ошибка в значении узла <Контрагент>.<Ид> документа XML: " + НомерДокумента + ". Контрагент не будет создан.", ПараметрыОбмена);
		
		Возврат Неопределено;

	КонецЕсли;		
	
	СтрИнформацияОКонтрагенте.Вставить("Ид"						, Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьЗначениеПоСвойству(КонтрагентXDTO, "Ид"						, "Строка"));
	СтрИнформацияОКонтрагенте.Вставить("НомерВерсии"			, Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьЗначениеПоСвойству(КонтрагентXDTO, "НомерВерсии"				, "Строка"));
	СтрИнформацияОКонтрагенте.Вставить("ПометкаУдаления"		, Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьЗначениеПоСвойству(КонтрагентXDTO, "ПометкаУдаления"			, "Булево"));
	СтрИнформацияОКонтрагенте.Вставить("Наименование"			, Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьЗначениеПоСвойству(КонтрагентXDTO, "Наименование"				, "Строка"));
	СтрИнформацияОКонтрагенте.Вставить("Фамилия"				, Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьЗначениеПоСвойству(КонтрагентXDTO, "Фамилия"					, "Строка"));
	СтрИнформацияОКонтрагенте.Вставить("Имя"					, Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьЗначениеПоСвойству(КонтрагентXDTO, "Имя"						, "Строка"));
	СтрИнформацияОКонтрагенте.Вставить("Отчество"				, Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьЗначениеПоСвойству(КонтрагентXDTO, "Отчество"					, "Строка"));
	
	лОфициальноеНаименование    = Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьЗначениеПоСвойству(КонтрагентXDTO, "ОфициальноеНаименование"	, "Строка");
	лПолноеНаименование			= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьЗначениеПоСвойству(КонтрагентXDTO, "ПолноеНаименование"		, "Строка");
	Если ЗначениеЗаполнено(лОфициальноеНаименование) тогда
		СтрИнформацияОКонтрагенте.Вставить("НаименованиеПолное"	, лОфициальноеНаименование);
		СтрИнформацияОКонтрагенте.Вставить("ЮрФизЛицо"			, Перечисления.ЮрФизЛицо.ЮрЛицо);
	Иначе
		СтрИнформацияОКонтрагенте.Вставить("НаименованиеПолное"	, лПолноеНаименование);
		СтрИнформацияОКонтрагенте.Вставить("ЮрФизЛицо"			, Перечисления.ЮрФизЛицо.ФизЛицо);
	КонецЕсли;
	
	СтрИнформацияОКонтрагенте.Вставить("ИНН"					, Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьЗначениеПоСвойству(КонтрагентXDTO, "ИНН"						, "Строка"));
	СтрИнформацияОКонтрагенте.Вставить("КПП"					, Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьЗначениеПоСвойству(КонтрагентXDTO, "КПП"						, "Строка"));
	СтрИнформацияОКонтрагенте.Вставить("КодПоОКПО"				, Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьЗначениеПоСвойству(КонтрагентXDTO, "КодПоОКПО"				, "Строка"));
	СтрИнформацияОКонтрагенте.Вставить("Контакты",);
	
	тзнРасчетныеСчета = Новый ТаблицаЗначений;
	тзнРасчетныеСчета.Колонки.Добавить("НомерСчета");
	тзнРасчетныеСчета.Колонки.Добавить("БанкДляРасчетов");
	тзнРасчетныеСчета.Колонки.Добавить("Банк");
	
	Если Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "РасчетныеСчета") Тогда
		Если Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ОбъектXDTOСодержитСвойство(КонтрагентXDTO.РасчетныеСчета, "РасчетныйСчет") Тогда
			РасчетныйСчет = КонтрагентXDTO.РасчетныеСчета.РасчетныйСчет;
			Если Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ЭтоСписокXDTO(РасчетныйСчет) тогда
				Для каждого ТекСчет из РасчетныйСчет Цикл
					НовРасчтСчет 					= тзнРасчетныеСчета.Добавить();
					НовРасчтСчет.НомерСчета 		= ТекСчет.НомерСчета; 
					Если Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ОбъектXDTOСодержитСвойство(ТекСчет, "БанкКорреспондент") тогда
						НовРасчтСчет.БанкДляРасчетов 	= ОбработатьИнформациюОБанкеXDTO(ТекСчет.БанкКорреспондент);
					КонецЕсли;
					Если Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ОбъектXDTOСодержитСвойство(ТекСчет, "Банк") тогда
						НовРасчтСчет.Банк		 		= ОбработатьИнформациюОБанкеXDTO(ТекСчет.Банк);
					КонецЕсли;
				КонецЦикла;
			Иначе
				НовРасчтСчет 					= тзнРасчетныеСчета.Добавить();
				НовРасчтСчет.НомерСчета 		= РасчетныйСчет.НомерСчета; 
				Если Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ОбъектXDTOСодержитСвойство(РасчетныйСчет, "БанкКорреспондент") тогда
					НовРасчтСчет.БанкДляРасчетов 	= ОбработатьИнформациюОБанкеXDTO(РасчетныйСчет.БанкКорреспондент);
				КонецЕсли;
				Если Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ОбъектXDTOСодержитСвойство(РасчетныйСчет, "Банк") тогда
					НовРасчтСчет.Банк		 		= ОбработатьИнформациюОБанкеXDTO(РасчетныйСчет.Банк);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если тзнРасчетныеСчета.Количество() > 0 тогда
		СтрИнформацияОКонтрагенте.Вставить("БанковскиеСчета", тзнРасчетныеСчета);
	Иначе
		СтрИнформацияОКонтрагенте.Вставить("БанковскиеСчета", Неопределено);
	КонецЕсли;
	
	лКонтакты = ОбработатьКонтактнуюИнформациюКонтрагентаXDTO(КонтрагентXDTO, ПараметрыОбмена, СтрИнформацияОКонтрагенте.ЮрФизЛицо);
	
	Если лКонтакты.Количество() > 0 тогда
		СтрИнформацияОКонтрагенте.Вставить("Контакты", лКонтакты);
	Иначе
		СтрИнформацияОКонтрагенте.Вставить("Контакты", Неопределено);
	КонецЕсли;
	
	лКонтактныеЛица = ОбработатьКонтактныеЛицаКонтрагентаXDTO(КонтрагентXDTO);
	
	Если лКонтактныеЛица.Количество() > 0 тогда
		СтрИнформацияОКонтрагенте.Вставить("КонтактныеЛица", лКонтактныеЛица);
	Иначе
		СтрИнформацияОКонтрагенте.Вставить("КонтактныеЛица", Неопределено);
	КонецЕсли;
	
	Возврат СтрИнформацияОКонтрагенте;
	
КонецФункции

Функция ОбработатьИнформациюОБанкеXDTO(БанкXDTO)
	
	стрИнформацияОБанке = Новый Структура;
	
	Если Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ОбъектXDTOСодержитСвойство(БанкXDTO, "Адрес") Тогда
		стрИнформацияОБанке.Вставить("Адрес", Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьЗначениеПоСвойству(БанкXDTO.Адрес, "Представление"	, "Строка"));	
	Иначе
		стрИнформацияОБанке.Вставить("Адрес", Неопределено);	
	КонецЕсли;
	
	стрИнформацияОБанке.Вставить("БИК"					, Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьЗначениеПоСвойству(БанкXDTO, "БИК"					, "Строка"));
	стрИнформацияОБанке.Вставить("Наименование"			, Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьЗначениеПоСвойству(БанкXDTO, "Наименование"			, "Строка"));
	стрИнформацияОБанке.Вставить("СчетКорреспондентский", Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьЗначениеПоСвойству(БанкXDTO, "СчетКорреспондентский"	, "Строка"));
	
	Возврат стрИнформацияОБанке;
	
КонецФункции

Функция ОбработатьКонтактнуюИнформациюКонтрагентаXDTO(КонтрагентXDTO, ПараметрыОбмена, ЮрФизЛицо)
	
	тзнКонтакты = Новый ТаблицаЗначений;
	
	тзнКонтакты.Колонки.Добавить("ТипВидКонтактнойИнформации");
	тзнКонтакты.Колонки.Добавить("Представление");
	тзнКонтакты.Колонки.Добавить("АдресныеПоля");
	
	Если ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо тогда
		тзнСоответствийАдресов = ПараметрыОбмена.СоответствиеАдресовЮрЛиц;
	Иначе
		тзнСоответствийАдресов = ПараметрыОбмена.СоответствиеАдресовФизЛиц;
	КонецЕсли;
	
	Для Каждого ТекСтр из тзнСоответствийАдресов Цикл
		
		Если Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ОбъектXDTOСодержитСвойство(КонтрагентXDTO, ТекСтр.НаименованиеПоля) Тогда
			лАдрес = Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьЗначениеПоСвойству(КонтрагентXDTO[ТекСтр.НаименованиеПоля], "Представление"	, "Строка");
			//Если ЗначениеЗаполнено(лАдрес) тогда
				
				НовСтр 	= тзнКонтакты.Добавить();
				
				НовСтр.ТипВидКонтактнойИнформации	= ТекСтр.ВидКонтактнойИнформации;
				НовСтр.Представление				= лАдрес;
				НовСтр.АдресныеПоля					= ОбработатьАдресныеПоляXDTO(КонтрагентXDTO[ТекСтр.НаименованиеПоля]);
				                  
			//КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "Контакты") Тогда
		
		Контакты = КонтрагентXDTO.Контакты;
		Если Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ЭтоСписокXDTO(Контакты.Контакт) тогда
			Для каждого ТекКонтакт из Контакты.Контакт Цикл
				
				лАдрес = Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьЗначениеПоСвойству(ТекКонтакт, "Значение"	, "Строка");
				Если ЗначениеЗаполнено(лАдрес) тогда
					
					НовСтр 	= тзнКонтакты.Добавить();
					
					Если  ТекКонтакт.Тип = "Электронная почта"  ИЛИ ТекКонтакт.Тип 	= "Почта" тогда
						НовСтр.ТипВидКонтактнойИнформации	= Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтрагентаДляОбменаДокументами; 
					ИначеЕсли  ТекКонтакт.Тип = "Телефон рабочий" ИЛИ ТекКонтакт.Тип 	= "ТелефонРабочий" тогда
						НовСтр.ТипВидКонтактнойИнформации	= Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
					ИначеЕсли  ТекКонтакт.Тип = "Факс" тогда
						НовСтр.ТипВидКонтактнойИнформации	= Справочники.ВидыКонтактнойИнформации.ФаксКонтрагента;
					КонецЕсли;	
					
					НовСтр.Представление	= лАдрес;
					
				КонецЕсли;
				
			КонецЦикла;
		Иначе
			ТекКонтакт = Контакты.Контакт;
			лАдрес = Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьЗначениеПоСвойству(ТекКонтакт, "Значение"	, "Строка");
			Если ЗначениеЗаполнено(лАдрес) тогда
				
				НовСтр 	= тзнКонтакты.Добавить();
				
				Если  ТекКонтакт.Тип 		= "Электронная почта"  ИЛИ ТекКонтакт.Тип 	= "Почта" тогда
					НовСтр.ТипВидКонтактнойИнформации	= Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтрагентаДляОбменаДокументами;
				ИначеЕсли  ТекКонтакт.Тип 	= "Телефон рабочий" ИЛИ ТекКонтакт.Тип 	= "ТелефонРабочий" тогда
					НовСтр.ТипВидКонтактнойИнформации	= Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
				ИначеЕсли  ТекКонтакт.Тип 	= "Факс" тогда
					НовСтр.ТипВидКонтактнойИнформации	= Справочники.ВидыКонтактнойИнформации.ФаксКонтрагента;
				КонецЕсли;	
				                                          
				НовСтр.Представление		= лАдрес;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Конецесли;
	
	Возврат тзнКонтакты;

КонецФункции

Функция ОбработатьКонтактныеЛицаКонтрагентаXDTO(КонтрагентXDTO)
	
	тзнКонтактныеЛица = Новый ТаблицаЗначений;
	
	тзнКонтактныеЛица.Колонки.Добавить("Ид");
	тзнКонтактныеЛица.Колонки.Добавить("Наименование");
	тзнКонтактныеЛица.Колонки.Добавить("Отношение");
	
	Если Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "Представители") Тогда
		Представители = КонтрагентXDTO.Представители;
		Если Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ОбъектXDTOСодержитСвойство(Представители, "Представитель") Тогда
			Представитель = Представители.Представитель;

			Если Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ЭтоСписокXDTO(Представитель) тогда
				Для каждого ТекПредставитель из Представитель Цикл
					
					НовСтр 				= тзнКонтактныеЛица.Добавить();
					НовСтр.Ид 			= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьЗначениеПоСвойству(ТекПредставитель.Контрагент, "Ид"				, "Строка");
					НовСтр.Наименование = Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьЗначениеПоСвойству(ТекПредставитель.Контрагент, "Наименование"	, "Строка");
					НовСтр.Отношение 	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьЗначениеПоСвойству(ТекПредставитель.Контрагент, "Отношение"		, "Строка");
					
				КонецЦикла;
			Иначе
				
				НовСтр 				= тзнКонтактныеЛица.Добавить();
				НовСтр.Ид 			= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьЗначениеПоСвойству(Представитель.Контрагент, "Ид"				, "Строка");
				НовСтр.Наименование = Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьЗначениеПоСвойству(Представитель.Контрагент, "Наименование"	, "Строка");
				НовСтр.Отношение 	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьЗначениеПоСвойству(Представитель.Контрагент, "Отношение"		, "Строка");
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат тзнКонтактныеЛица; 
	
КонецФункции

Функция ОбработатьИнформациюОСкладеXDTO(ПараметрыОбмена, СкладXDTO, НомерДокумента)
	
	стрИнформацияОСкладе = Новый Структура;
	
	стрИнформацияОСкладе.Вставить("Ид"			, Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьЗначениеПоСвойству(СкладXDTO, "Ид"						, "Строка"));
	стрИнформацияОСкладе.Вставить("Наименование", Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьЗначениеПоСвойству(СкладXDTO, "Наименование"				, "Строка"));
	
	
	Возврат стрИнформацияОСкладе;
	
КонецФункции

Функция ОбработатьИнформациюОТабличнойЧастиДокументаXDTO(ПараметрыОбмена, ТоварыXDTO, НомерДокумента)
	
	тзнТовары = Новый ТаблицаЗначений;
	тзнТовары.Колонки.Добавить("Ид");
	тзнТовары.Колонки.Добавить("Наименование");
	тзнТовары.Колонки.Добавить("СтавкаНДСТовара");
	тзнТовары.Колонки.Добавить("Коэффициент");
	тзнТовары.Колонки.Добавить("Количество");
	тзнТовары.Колонки.Добавить("Цена");
	тзнТовары.Колонки.Добавить("Сумма");
	тзнТовары.Колонки.Добавить("Единица");
	тзнТовары.Колонки.Добавить("НаименованиеНалога");
	тзнТовары.Колонки.Добавить("СуммаНДС");
	тзнТовары.Колонки.Добавить("УчтеноВСумме");
	тзнТовары.Колонки.Добавить("ЗначенияРеквизитов");
	тзнТовары.Колонки.Добавить("Скидки");
	
	Если НЕ Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ОбъектXDTOСодержитСвойство(ТоварыXDTO, "Товар") Тогда
		Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Ошибка в значении узла <Документ>.<Товары>.<Товар> документа XML: " + НомерДокумента + ". Товары в документ не будут добавлены.", ПараметрыОбмена);
		Возврат тзнТовары;
	Иначе
		Если Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ЭтоСписокXDTO(ТоварыXDTO.Товар) тогда
			Для каждого ТекТовар из ТоварыXDTO.Товар Цикл
				ОбработатьИнформациюОТовареДокументаXDTO(ПараметрыОбмена, ТекТовар, тзнТовары, НомерДокумента);	
			КонецЦикла; 			
		Иначе
			ОбработатьИнформациюОТовареДокументаXDTO(ПараметрыОбмена, ТоварыXDTO.Товар, тзнТовары, НомерДокумента);	
		КонецЕсли;	
		
	КонецЕсли;
	
	Возврат тзнТовары;	
КонецФункции

Процедура ОбработатьИнформациюОТовареДокументаXDTO(ПараметрыОбмена, ТоварXDTO, тзнТовары, НомерДокумента)
	
	Если НЕ Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ОбъектXDTOСодержитСвойство(ТоварXDTO, "Ид") Тогда
		Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Ошибка в значении узла <Документ>.<Товары>.<Товар>.<Ид> документа XML: " + НомерДокумента + ". Товар в документ не будет добавлен.", ПараметрыОбмена);
	Иначе
		
		НовСтр = тзнТовары.Добавить();
		
		НовСтр.Ид 			= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьЗначениеПоСвойству(ТоварXDTO, "Ид"			, "Строка");             
		НовСтр.Наименование = Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьЗначениеПоСвойству(ТоварXDTO, "Наименование"	, "Строка");
		
		НовСтр.Количество 	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьЗначениеПоСвойству(ТоварXDTO, "Количество"	, "Число");             
		НовСтр.Коэффициент 	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьЗначениеПоСвойству(ТоварXDTO, "Коэффициент"	, "Число");             
		НовСтр.Цена 		= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьЗначениеПоСвойству(ТоварXDTO, "ЦенаЗаЕдиницу"	, "Число");             
		НовСтр.Сумма 		= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьЗначениеПоСвойству(ТоварXDTO, "Сумма"			, "Число");             
		
		Если Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ОбъектXDTOСодержитСвойство(ТоварXDTO, "Налоги") Тогда
			Если Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ОбъектXDTOСодержитСвойство(ТоварXDTO.Налоги, "Налог") Тогда
				
				НалогXDTO 	= ТоварXDTO.Налоги.Налог;
				
				НовСтр.НаименованиеНалога	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьЗначениеПоСвойству(НалогXDTO, "Наименованние"		, "Строка");
				НовСтр.СуммаНДС 			= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьЗначениеПоСвойству(НалогXDTO, "Сумма"			, "Число");             
				НовСтр.УчтеноВСумме			= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьЗначениеПоСвойству(НалогXDTO, "УчтеноВСумме"	, "Булево");             
				
			КонецЕсли;
		КонецЕсли;
		
		Если Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ОбъектXDTOСодержитСвойство(ТоварXDTO, "СтавкиНалогов") Тогда
			Если Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ОбъектXDTOСодержитСвойство(ТоварXDTO.СтавкиНалогов, "СтавкаНалога") Тогда
				
				СтавкаНалогаXDTO 		= ТоварXDTO.СтавкиНалогов.СтавкаНалога;
				
				лСтрокойНДС 			= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьЗначениеПоСвойству(СтавкаНалогаXDTO, "Ставка"		, "Строка");
				НовСтр.СтавкаНДСТовара 	= Б_ПроцедурыИФункцииВыгрузкиДанныхНаСайт.ПолучитьНДСПоставке(лСтрокойНДС);
			КонецЕсли;
		КонецЕсли;
		
		
		Если Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ОбъектXDTOСодержитСвойство(ТоварXDTO, "Единица") Тогда
			
			ЕдиницаXDTO 		= ТоварXDTO.Единица;
			стрЕдиницыИзмерения = Новый Структура;
			
			стрЕдиницыИзмерения.Вставить("Ид"					,Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьЗначениеПоСвойству(ЕдиницаXDTO, "Ид"					, "Строка"));
			стрЕдиницыИзмерения.Вставить("Код"					,Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьЗначениеПоСвойству(ЕдиницаXDTO, "Код"					, "Строка"));
			стрЕдиницыИзмерения.Вставить("НаименованиеКраткое"	,Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьЗначениеПоСвойству(ЕдиницаXDTO, "НаименованиеКраткое"	, "Строка"));
			стрЕдиницыИзмерения.Вставить("НаименованиеПолное"	,Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьЗначениеПоСвойству(ЕдиницаXDTO, "НаименованиеПолное"	, "Строка"));
			
			НовСтр.Единица = стрЕдиницыИзмерения
		КонецЕсли;
		
		Если Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ОбъектXDTOСодержитСвойство(ТоварXDTO, "ЗначенияРеквизитов") Тогда
			ЗначенияРеквизитовXDTO 		= ТоварXDTO.ЗначенияРеквизитов;
			НовСтр.ЗначенияРеквизитов 	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ОбработатьЗначенияРеквизитовXDTO(ПараметрыОбмена, ЗначенияРеквизитовXDTO);
		КонецЕсли;
		
		Если Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ОбъектXDTOСодержитСвойство(ТоварXDTO, "Скидки") Тогда
			ЗначенияРеквизитовXDTO 		= ТоварXDTO.Скидки;
			НовСтр.Скидки 	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ОбработатьЗначенияСкидокXDTO(ПараметрыОбмена, ЗначенияРеквизитовXDTO);
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

Функция ОбработатьАдресныеПоляXDTO(XDTOАдрес)	
	
	тзнАдресныеПоля = Новый ТаблицаЗначений;
	тзнАдресныеПоля.Колонки.Добавить("Значение");
	тзнАдресныеПоля.Колонки.Добавить("ТипЗначения");
	
	Если Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ОбъектXDTOСодержитСвойство(XDTOАдрес, "АдресноеПоле") тогда
	
		АдресноеПоле = XDTOАдрес.АдресноеПоле;
		Если Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ЭтоСписокXDTO(АдресноеПоле) тогда
			
			Для каждого ТекАдресноеПоле из АдресноеПоле Цикл
				
				НовСтр = тзнАдресныеПоля.Добавить();
				НовСтр.ТипЗначения 	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьЗначениеПоСвойству(ТекАдресноеПоле, "Тип"			, "Строка");
				НовСтр.Значение 	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьЗначениеПоСвойству(ТекАдресноеПоле, "Значение"	, "Строка");
				
			КонецЦикла;
			
		Иначе
			
			НовСтр = тзнАдресныеПоля.Добавить();
			НовСтр.ТипЗначения 	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьЗначениеПоСвойству(АдресноеПоле, "Тип"				, "Строка");
			НовСтр.Значение 	= Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьЗначениеПоСвойству(АдресноеПоле, "Значение"			, "Строка");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат тзнАдресныеПоля;
	
КонецФункции

Функция ПолучитьВидаКонтактойИнформации(ПолеXML, ПараметрыОбмена, ЮрФизЛицо)
	
	Результат = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
	
	Если ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо тогда
		тзнСоответствийАдресов = ПараметрыОбмена.СоответствиеАдресовЮрЛиц;
	Иначе
		тзнСоответствийАдресов = ПараметрыОбмена.СоответствиеАдресовФизЛиц;
	КонецЕсли;
	
	Для Каждого ТекСтр из тзнСоответствийАдресов Цикл
		
		Если ТекСтр.НаименованиеПоля = ПолеXML тогда
			Результат = ТекСтр.ВидКонтактнойИнформации;
		КонецЕсли;		
	КонецЦикла;
	
	Возврат Результат;	
	
КонецФункции


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Функция ПолучитьЗначениеРеквизитаДокумента(ЗначенияРеквизитов, ИмяРеквизита)
	
	Если ЗначенияРеквизитов = Неопределено тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НайденнаяСтрока = ЗначенияРеквизитов.Найти(ИмяРеквизита, "Наименование");
	
	Если НайденнаяСтрока = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат НайденнаяСтрока.Значение;	
	КонецЕсли;
	
КонецФункции

Функция ПолучитьРеквизитыТЧДокумента(НазваниеДокумента, ТаблицаСоответствий)
	
	НайденныеСтроки =  ТаблицаСоответствий.НайтиСтроки(Новый Структура("Документ", НазваниеДокумента));

	Возврат НайденныеСтроки; 
	
КонецФункции

Функция СоздатьОбновитьТиповыеДокументы(ПараметрыОбмена, ТзнДокументов)
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц 		= Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц 	= МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗаказПокупателя.Ссылка КАК Ссылка,
	|	""Заказ"" КАК ТипДокумента,
	|	ЗаказПокупателя.Б_НомерВерсии,
	|	ЗаказПокупателя.Б_Идентификатор КАК Б_Идентификатор
	|ПОМЕСТИТЬ ВремДокументы
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя.Б_Идентификатор В (&СписокИдДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка,
	|	""Отгрузка"",
	|	РеализацияТоваровУслуг.Б_НомерВерсии,
	|	РеализацияТоваровУслуг.Б_Идентификатор
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Б_Идентификатор В (&СписокИдДокументов)
	|	И &НуженОбменОтгрузками
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПриходныйКассовыйОрдер.Ссылка,
	|	""Оплата"",
	|	ПриходныйКассовыйОрдер.Б_НомерВерсии,
	|	ПриходныйКассовыйОрдер.Б_Идентификатор
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	|ГДЕ
	|	ПриходныйКассовыйОрдер.Б_Идентификатор  В (&СписокИдДокументов)
	|	И &НуженОбменОплатами
	|   И &ТипДокументаОплаты = ""ПриходныйКассовыйОрдер""
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОплатаОтПокупателяПлатежнойКартой.Ссылка,
	|	""Оплата"",
	|	ОплатаОтПокупателяПлатежнойКартой.Б_НомерВерсии,
	|	ОплатаОтПокупателяПлатежнойКартой.Б_Идентификатор
	|ИЗ
	|	Документ.ОплатаОтПокупателяПлатежнойКартой КАК ОплатаОтПокупателяПлатежнойКартой
	|ГДЕ
	|	ОплатаОтПокупателяПлатежнойКартой.Б_Идентификатор  В (&СписокИдДокументов)
	|	И &НуженОбменОплатами
	|   И &ТипДокументаОплаты = ""ОплатаОтПокупателяПлатежнойКартой""
   	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Б_Идентификатор,
	|	ТипДокумента";
	
	
	Запрос.УстановитьПараметр("НуженОбменОтгрузками", ПараметрыОбмена.ЗагрузкаОтгрузок);
	Запрос.УстановитьПараметр("НуженОбменОплатами"	, ПараметрыОбмена.ЗагрузкаОплат);
	Запрос.УстановитьПараметр("ТипДокументаОплаты"	, ПараметрыОбмена.ТипДокументаОплаты);
	
	Запрос.УстановитьПараметр("СписокИдДокументов"	, ТзнДокументов.ВыгрузитьКолонку("Номер"));
	
	Запрос.Выполнить();
	
	Для каждого ТекДокумент из ТзнДокументов Цикл
		
		Если ТекДокумент.ХозОперация = "Заказ товара" тогда
			
			СтрДокумента 	= ПолучитьДокумент(МенеджерВременныхТаблиц, "Заказ", ТекДокумент);
			Документ 		= СтрДокумента.Документ;	
			
			Если НЕ Документ.Пустая() тогда
				
				Если ТекДокумент.НомерВерсии <> Документ.Б_НомерВерсии тогда
					Если НЕ ПараметрыОбмена.НеРедактироватьДокументыПришедшиеССайта тогда
						
						Если СтрДокумента.ЕстьСсылка тогда
							Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("На документ: " + Строка(Документ.Ссылка) + " есть ссылки в других документах. Документ будет пропущен.", ПараметрыОбмена);
						Иначе
							СоздатьОбновитьДокумент(ПараметрыОбмена, "ЗаказПокупателя", ТекДокумент, Ложь, Документ);
						КонецЕсли;
						
						СоздатьОбновлениеПКО(ПараметрыОбмена, ТекДокумент, ПараметрыОбмена.ТипДокументаОплаты, МенеджерВременныхТаблиц);

					Иначе
						Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Стоит настройка, чтобы документы в 1С не обновлялись. Документ: " + Строка(Документ.Ссылка) + " будет пропущен.", ПараметрыОбмена);
					КонецЕсли;
					
				Иначе
					Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("С последней загрузки из БУС документ: " + Строка(Документ.Ссылка) + " не менялся. Документ будет пропущен.", ПараметрыОбмена);
				КонецЕсли;
			Иначе
				СоздатьОбновитьДокумент(ПараметрыОбмена, "ЗаказПокупателя", ТекДокумент, Истина);
					
				СоздатьОбновлениеПКО(ПараметрыОбмена, ТекДокумент, ПараметрыОбмена.ТипДокументаОплаты, МенеджерВременныхТаблиц);
			КонецЕсли;
				
		ИначеЕсли ТекДокумент.ХозОперация = "Отпуск товара" тогда
			
			Если ПараметрыОбмена.ЗагрузкаОтгрузок тогда
				
				СтрДокумента 	= ПолучитьДокумент(МенеджерВременныхТаблиц, "Отгрузка", ТекДокумент);
				Документ 		= СтрДокумента.Документ;	
				
				Если НЕ Документ.Пустая() тогда
					Если ТекДокумент.НомерВерсии <> Документ.Б_НомерВерсии тогда
						Если НЕ ПараметрыОбмена.НеРедактироватьДокументыПришедшиеССайта тогда
							
							Если СтрДокумента.ЕстьСсылка тогда
								Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("На документ: " + Строка(Документ.Ссылка) + " есть ссылки в других документах. Документ будет пропущен.", ПараметрыОбмена);
							Иначе	
								СоздатьОбновитьДокумент(ПараметрыОбмена, "РеализацияТоваровУслуг", ТекДокумент, Ложь, Документ);
							КонецЕсли;	
							
						Иначе
							Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Стоит настройка, чтобы документы в 1С не обновлялись. Документ: " + Строка(Документ.Ссылка) + " будет пропущен.", ПараметрыОбмена);
						КонецЕсли;
					Иначе
						Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("С последней загрузки из БУС документ: " + Строка(Документ.Ссылка) + " не менялся. Документ будет пропущен.", ПараметрыОбмена);
					КонецЕсли;
					
				Иначе
					СоздатьОбновитьДокумент(ПараметрыОбмена, "РеализацияТоваровУслуг", ТекДокумент, Ложь, Документ);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	МенеджерВременныхТаблиц.Закрыть();
	
КонецФункции

Процедура СоздатьОбновлениеПКО(ПараметрыОбмена, ТекДокумент, ТипДокументаОплаты, МенеджерВременныхТаблиц)
	
	Если ПараметрыОбмена.ЗагрузкаОплат тогда
		
		ЗначениеРеквизита = ПолучитьЗначениеРеквизитаДокумента(ТекДокумент.ЗначенияРеквизитов, "Заказ оплачен");
		
		ДокументОплачен = Ложь;
		Если НЕ ЗначениеРеквизита = Неопределено тогда
			ДокументОплачен = XMLЗначение(Тип("Булево"), ЗначениеРеквизита);	
		КонецЕсли;
		
		ЗапросПКО = Новый Запрос;
		ЗапросПКО.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		ЗапросПКО.Текст = "ВЫБРАТЬ * 			
		|ИЗ
		|	ВремДокументы КАК ВремДокументы
		|ГДЕ
		|	ВремДокументы.ТипДокумента = ""Оплата""
		|	И ВремДокументы.Б_Идентификатор = &Идентификатор";
		ЗапросПКО.УстановитьПараметр("Идентификатор"	, ТекДокумент.Номер);
		
		
		Выборка = ЗапросПКО.Выполнить();
		
		Если ДокументОплачен тогда
			
			Если Выборка.Пустой() тогда
				
				СоздатьОбновитьДокумент(ПараметрыОбмена, ТипДокументаОплаты, ТекДокумент, Истина);
				
			Иначе
				ВыборкаДокументы = Выборка.Выбрать();
				Пока ВыборкаДокументы.Следующий() Цикл
					
					СоздатьОбновитьДокумент(ПараметрыОбмена, ТипДокументаОплаты, ТекДокумент, Ложь, ВыборкаДокументы.Ссылка);
					
				КонецЦикла;
			КонецЕсли;
		Иначе
			
			Если НЕ Выборка.Пустой() тогда
				
				мНастройкиДокумента	= ПолучитьРеквизитыТЧДокумента(ТипДокументаОплаты, ПараметрыОбмена.ДокументыЗагрузки);
				
				Если мНастройкиДокумента.Количество() > 0 тогда
					
					ОсновныеНастройкиДокумента = мНастройкиДокумента[0];
					ВыборкаДокументы = Выборка.Выбрать(); 
					
					Пока ВыборкаДокументы.Следующий() Цикл
						
						ЗаписьСтатусовИУдалениеЗагруженныхДокументов(ПараметрыОбмена, ТекДокумент, ОсновныеНастройкиДокумента, ВыборкаДокументы.Ссылка.ПолучитьОбъект(), Ложь, Истина);
						
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;    	
	
КонецПроцедуры

Процедура СоздатьОбновитьДокумент(ПараметрыОбмена, НазваниеДокумента, ДокументXML, НовыйДокумент, СсылкаНаДокумент = Неопределено)
	
	Если НовыйДокумент тогда
		Документ = Документы[НазваниеДокумента].СоздатьДокумент();	
	Иначе             
		Документ = СсылкаНаДокумент.ПолучитьОбъект();
		
		НаборЗаписей = РегистрыСведений.КатегорииОбъектов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.установить(СсылкаНаДокумент);
		НаборЗаписей.Очистить();
		
	КонецЕсли;     
	
	ВремТабТЧ = ПараметрыОбмена.ВсеСоответствияТабличныхЧастейДокументов.Скопировать();
	ВремТабТЧ.Свернуть("ТабличнаяЧасть, Документ, ПолеXML");
	
	мНастройкиДокумента	= ПолучитьРеквизитыТЧДокумента(НазваниеДокумента, ПараметрыОбмена.ДокументыЗагрузки);
	мРеквизитыДокумента = ПолучитьРеквизитыТЧДокумента(НазваниеДокумента, ПараметрыОбмена.ВсеСоответствияШапокДокументов);
	мТабличныеЧасти		= ПолучитьРеквизитыТЧДокумента(НазваниеДокумента, ВремТабТЧ); 
	мРеквизитыТЧ		= ПолучитьРеквизитыТЧДокумента(НазваниеДокумента, ПараметрыОбмена.ВсеСоответствияТабличныхЧастейДокументов);
	
	Если мНастройкиДокумента.Количество() = 0 тогда
		
		Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("У документа " + НазваниеДокумента + " не найдены основные параметры документа в настройках соответствий. Загрузка документа невозможна.", ПараметрыОбмена);
		
		Возврат;
		
	КонецЕсли;
	
	ОсновныеНастройкиДокумента = мНастройкиДокумента[0];
	
	Для Каждого ТекРеквизит из мРеквизитыДокумента Цикл
																																																										
		Если НЕ ПустаяСтрока(ТекРеквизит.Значение) тогда
			
			Документ[ТекРеквизит.НаименованиеРеквизита1С] = ПолучитьЗначениеРеквизитаДокументаПоСоответствию(ПараметрыОбмена, ДокументXML, Документ, ОсновныеНастройкиДокумента, ТекРеквизит);	
			
		КонецЕсли;
			
	КонецЦикла;
	
	ДокументОтменен = ПолучитьЗначениеРеквизитаДокумента(ДокументXML.ЗначенияРеквизитов, "Отменен");
	ДокументОтменен = ?((ДокументОтменен = Неопределено ИЛИ ДокументОтменен = "false"), Ложь, Истина);
	
	Если ОсновныеНастройкиДокумента.НумерацияДокументов =  "С сайта" тогда
		Документ.Номер = ДокументXML.Номер; 	
	Иначе
		Если НовыйДокумент тогда
			
			Документ.УстановитьНовыйНомер();	
			
		КонецЕсли;
	КонецЕсли;
	
	Для каждого ТекТабЧасть из мТабличныеЧасти Цикл
		
		Документ[ТекТабЧасть.ТабличнаяЧасть].Очистить();
		
		Если ТекТабЧасть.ПолеXML = "" тогда
			
			НовСтрока = Документ[ТекТабЧасть.ТабличнаяЧасть].Добавить();
			
			Для Каждого ТекРеквизитТЧ из мРеквизитыТЧ Цикл
				
				Если НЕ ПустаяСтрока(ТекРеквизитТЧ.Значение) тогда
					
					НовСтрока[ТекРеквизитТЧ.НаименованиеРеквизита1С] = ПолучитьЗначениеРеквизитаДокументаПоСоответствию(ПараметрыОбмена, ДокументXML, Документ, ОсновныеНастройкиДокумента, ТекРеквизитТЧ, , НовСтрока);	
					
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			Для каждого ТекСтрокаТЗ из ДокументXML[ТекТабЧасть.ПолеXML] Цикл
				
				Если ДокументXML[ТекТабЧасть.ПолеXML].Колонки.Найти("Количество") <> Неопределено тогда
					Если ТекСтрокаТЗ.Количество = 0 тогда
						Продолжить;	
					КонецЕсли;
				КонецЕсли;	
				
				//т.к. услуги с сайта не грузятся, то можно не смотреть тип товара, а сразу прописать
				Если ТекТабЧасть.ТабличнаяЧасть = "Товары" И ТекСтрокаТЗ.Ид = "ORDER_DELIVERY" тогда
					Продолжить;	
				КонецЕсли;
				
				Если ТекТабЧасть.ТабличнаяЧасть = "Услуги" И ТекСтрокаТЗ.Ид <> "ORDER_DELIVERY" тогда 
					Продолжить;	
				КонецЕсли;
				
				НовСтрока = Документ[ТекТабЧасть.ТабличнаяЧасть].Добавить();
				
				Для Каждого ТекРеквизитТЧ из мРеквизитыТЧ Цикл
					
					Если НЕ ПустаяСтрока(ТекРеквизитТЧ.Значение) И ТекРеквизитТЧ.ТабличнаяЧасть = ТекТабЧасть.ТабличнаяЧасть тогда
						
						НовСтрока[ТекРеквизитТЧ.НаименованиеРеквизита1С] = ПолучитьЗначениеРеквизитаДокументаПоСоответствию(ПараметрыОбмена, ДокументXML, Документ, ОсновныеНастройкиДокумента, ТекРеквизитТЧ, ТекСтрокаТЗ, НовСтрока);	
						
					КонецЕсли;
					
				КонецЦикла;
				
				Если (ТекТабЧасть.ТабличнаяЧасть = "Товары" ИЛИ ТекТабЧасть.ТабличнаяЧасть = "Услуги") И (НазваниеДокумента = "ЗаказПокупателя" или НазваниеДокумента = "РеализацияТоваровУслуг") тогда
					
					ПересчитатьСтрокуДокумента(Документ, НовСтрока);

				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НазваниеДокумента = "ЗаказПокупателя" или НазваниеДокумента = "РеализацияТоваровУслуг" тогда
		
		Если ДокументXML.Скидки <> Неопределено тогда
			СуммаСкидки = 0;
			Для Каждого СтрокаСкидки Из ДокументXML.Скидки Цикл
				
				Если ЗначениеЗаполнено(СтрокаСкидки.Сумма) Тогда
					
					СуммаСкидки = СуммаСкидки + СтрокаСкидки.Сумма;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если СуммаСкидки <> 0 Тогда
				
				Если Документ.Товары.Количество() > 0 Тогда
					РаспределитьСуммуПоКолонке(Документ, Документ.Товары, "Товары", -СуммаСкидки);
				Иначе
					РаспределитьСуммуПоКолонке(Документ, Документ.Услуги, "Услуги", -СуммаСкидки);
				КонецЕсли;
				
			КонецЕсли;  				
			
		КонецЕсли;
		
		Документ.СуммаДокумента = Документ.Товары.Итог("Сумма") + Документ.Услуги.Итог("Сумма");
		
	ИначеЕсли НазваниеДокумента = "ОплатаОтПокупателяПлатежнойКартой" тогда	
		Документ.Эквайрер 						= Документ.ДоговорЭквайринга.Эквайрер;	
		Документ.ДоговорВзаиморасчетовЭквайрера = Документ.ДоговорЭквайринга.ДоговорВзаиморасчетов;	
	КонецЕсли;
	
	Если ОсновныеНастройкиДокумента.РежимЗаписиДокументов = "Проводить оперативно" тогда
		ДокументСозданИзменен = ЗаписьИПроведениеДокумента(ПараметрыОбмена, Документ, ?(ДокументОтменен, Ложь, Истина), Истина);
	ИначеЕсли ОсновныеНастройкиДокумента.РежимЗаписиДокументов = "Проводить не оперативно" тогда
		ДокументСозданИзменен = ЗаписьИПроведениеДокумента(ПараметрыОбмена, Документ, ?(ДокументОтменен, Ложь, Истина), Ложь);
	Иначе
		ДокументСозданИзменен = ЗаписьИПроведениеДокумента(ПараметрыОбмена, Документ, Ложь, Ложь);
	КонецЕсли;
	
	Если ДокументСозданИзменен тогда 
		ЗаписьСтатусовИУдалениеЗагруженныхДокументов(ПараметрыОбмена, ДокументXML, ОсновныеНастройкиДокумента, Документ, НовыйДокумент, ДокументОтменен);
	КонецЕсли;
	
КонецПроцедуры


Функция ПолучитьДокумент(МенеджерВременныхТаблиц, ТипДокумента, ТекДокумент)
	
	Если ТипДокумента = "Заказ" тогда
		ВидДокумента = Документы.ЗаказПокупателя;
	ИначеЕсли ТипДокумента = "Отгрузка" тогда
		ВидДокумента = Документы.РеализацияТоваровУслуг;
	ИначеЕсли ТипДокумента = "ПКО" тогда
		ВидДокумента = Документы.ПриходныйКассовыйОрдер;
	КонецЕсли;	
	
	Документ = ВидДокумента.ПустаяСсылка();
	
	Результат = Новый Структура;
	Результат.Вставить("Документ", Документ);
	Результат.Вставить("ЕстьСсылка", Ложь);
	
	Если ЗначениеЗаполнено(ТекДокумент.Номер1С) и ЗначениеЗаполнено(ТекДокумент.Дата1С) тогда
		
		Документ = ВидДокумента.НайтиПоНомеру(ТекДокумент.Номер1С, ТекДокумент.Дата1С);	
				
		Результат.Документ 		= Документ;
		Результат.ЕстьСсылка 	= Ложь;
		
	КонецЕсли;
	
	Если Документ.Пустая() тогда	
		ЗапросЗ = Новый Запрос;
		ЗапросЗ.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		ЗапросЗ.Текст = "ВЫБРАТЬ * 			
		|ИЗ
		|	ВремДокументы КАК ВремДокументы
		|ГДЕ
		|	ВремДокументы.ТипДокумента = &ТипДокумента
		|	И ВремДокументы.Б_Идентификатор = &Идентификатор";
		ЗапросЗ.УстановитьПараметр("Идентификатор"	, ТекДокумент.Номер);
		ЗапросЗ.УстановитьПараметр("ТипДокумента"	, ТипДокумента);
		
		тзнВрем = ЗапросЗ.Выполнить().Выгрузить();
		Если тзнВрем.Количество() > 0 тогда
			Документ = тзнВрем[0].Ссылка; 	
							
			Результат.Документ 		= Документ;
			Результат.ЕстьСсылка 	= Ложь;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Документ) тогда
			
			ЗапросЗ = Новый Запрос;
			ЗапросЗ.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
			ЗапросЗ.Текст = "ВЫБРАТЬ
			|	Документ.Ссылка КАК Объект
			|ИЗ
			|	Документ." + ?(ТипДокумента = "Заказ", "ЗаказПокупателя", "РеализацияТоваровУслуг") + " КАК Документ
			|ГДЕ
			|	Документ.Б_Идентификатор = &Идентификатор";
			ЗапросЗ.УстановитьПараметр("Идентификатор"	, ТекДокумент.Номер);
			
			тзнВрем = ЗапросЗ.Выполнить().Выгрузить();
			Если тзнВрем.Количество() > 0 тогда
				
				Результат.Документ 		= тзнВрем[0].Объект;
				Результат.ЕстьСсылка 	= ложь;

			КонецЕсли;
			
		Конецесли;
		
	КонецЕсли;	
	
	Возврат Результат;	
	
КонецФункции


Процедура ПересчитатьСтрокуДокумента(Док, СтрокаТЧ)
	
	Если СтрокаТЧ.Номенклатура.ВидНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга тогда
		ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТЧ, Док, глЗначениеПеременной("глТекущийПользователь"),,истина, ,истина, "Услуги");
	Иначе
		ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТЧ, Док, глЗначениеПеременной("глТекущийПользователь"),,истина, ,истина, "Товары");
	КонецЕсли;
	
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТЧ, Док);
	
КонецПроцедуры


Функция ПолучитьЗначениеРеквизитаДокументаПоСоответствию(ПараметрыОбмена, ДокументXML, Документ, ОсновныеНастройкиДокумента, ТекущийРеквизит, СтрокаXML = Неопределено, СтрокаТабличнойЧасти = Неопределено)
	
	Если СтрокаТабличнойЧасти = Неопределено тогда
		лРеквизит = Документ.Метаданные().Реквизиты.Найти(ТекущийРеквизит.НаименованиеРеквизита1С);
	Иначе
		лРеквизит = Метаданные.НайтиПоТипу(Тип(СтрокаТабличнойЧасти)).Реквизиты.Найти(ТекущийРеквизит.НаименованиеРеквизита1С)	
	КонецЕсли;
	
	Если лРеквизит = Неопределено тогда
		
		Массив = Новый Массив;
		Массив.Добавить(ТипЗнч(Документ[ТекущийРеквизит.НаименованиеРеквизита1С]));
		лТипРеквизита = Новый ОписаниеТипов(Массив);
		
	Иначе
		
		лТипРеквизита = лРеквизит.Тип;
		
	КонецЕсли;
	
	мПростыеТипы = Новый Массив;
	мПростыеТипы.Добавить(Тип("Строка"));	
	мПростыеТипы.Добавить(Тип("Число"));	
	мПростыеТипы.Добавить(Тип("Булево"));	
	мПростыеТипы.Добавить(Тип("Дата"));	
	
	Результат = Неопределено;
	
	Если ТекущийРеквизит.ТипДанных = "Из поля XML документа" тогда
		
		Если ТекущийРеквизит.Значение = "Дата с сайта с учетом настройки обмена" тогда
			
			ДатаДокументаНаСайте 	= XMLЗначение(Тип("Дата"),ДокументXML.Дата + "T" + ДокументXML.Время);
			
			Если ОсновныеНастройкиДокумента.ДатаДокументов = "Текущая дата" тогда
				Результат = ТекущаяДата();
			Иначе
				Результат = ДатаДокументаНаСайте;
			КонецЕсли;
			
		ИначеЕсли ТекущийРеквизит.Значение = "Дата с сайта" тогда
			
			Результат 	= XMLЗначение(Тип("Дата"),ДокументXML.Дата + "T" + ДокументXML.Время);
			
		ИначеЕсли ТекущийРеквизит.Значение = "Дата 1С" тогда
			
			Результат =  XMLЗначение(Тип("Дата"),ДокументXML.Дата1С);
			
		ИначеЕсли ТекущийРеквизит.Значение = "Номер с сайта" тогда
			
			Результат =  ДокументXML.Номер;	
			
		ИначеЕсли ТекущийРеквизит.Значение = "Номер 1С" тогда
			
			Результат = ДокументXML.Номер1С;
			
		ИначеЕсли ТекущийРеквизит.Значение = "Номер версии с сайта" тогда
			
			Результат = ДокументXML.НомерВерсии;
			
		ИначеЕсли ТекущийРеквизит.Значение = "Пометка удаления" тогда
	
			Результат = ДокументXML.ПометкаУдаления;	
	
		ИначеЕсли ТекущийРеквизит.Значение = "Комментарий" тогда
			
			Результат = ФормированиеКомментарияДокумента(ДокументXML.Номер,  ДокументXML.Комментарий);	
			
		ИначеЕсли ТекущийРеквизит.Значение = "Контрагент" тогда
			
			Результат = ПолучитьКонтрагента(ПараметрыОбмена, ДокументXML.Контрагент.ЮрФизЛицо, ДокументXML);
			
		ИначеЕсли ТекущийРеквизит.Значение = "Договор контрагента" тогда
			
			Контрагент = ПолучитьКонтрагента(ПараметрыОбмена, ДокументXML.Контрагент.ЮрФизЛицо, ДокументXML);
			
			Результат = ПолучитьДоговорКонтрагента(ПараметрыОбмена, ДокументXML.Контрагент.ЮрФизЛицо, Документ, ДокументXML)
			
		ИначеЕсли ТекущийРеквизит.Значение = "Банковский счет организации" тогда
			
			Результат = Документ.Организация.ОсновнойБанковскийСчет	
			
		ИначеЕсли ТекущийРеквизит.Значение = "Склад" тогда
			
			Результат = ПолучитьСклад(ПараметрыОбмена, ДокументXML);
			
		ИначеЕсли ТекущийРеквизит.Значение = "Валюта" тогда
			
			Результат = ДокументXML.Валюта;	
			
		ИначеЕсли ТекущийРеквизит.Значение = "Курс взаиморасчетов" тогда
			
			Результат = ДокументXML.Курс;	
			
		ИначеЕсли ТекущийРеквизит.Значение = "Кратность" тогда
			
			Результат = 1;
			
		ИначеЕсли ТекущийРеквизит.Значение = "Адрес доставки" тогда
			
			Результат = ПолучитьЗначениеРеквизитаДокумента(ДокументXML.ЗначенияРеквизитов, "Адрес доставки");
			
		ИначеЕсли ТекущийРеквизит.Значение = "Учитывать НДС" тогда
			
			Результат = ДокументXML.НДСВСумме;
			
		ИначеЕсли ТекущийРеквизит.Значение = "Сумма включает НДС" тогда
			
			Результат = ДокументXML.НДСВСумме;
			
		ИначеЕсли ТекущийРеквизит.Значение = "Сумма" тогда
			
			Результат = ДокументXML.Сумма;
			
		ИначеЕсли ТекущийРеквизит.Значение = "Сумма НДС" тогда
			
			Результат = ДокументXML.СуммаНДС;
			
		ИначеЕсли ТекущийРеквизит.Значение = "Касса" тогда
			
			Результат = Справочники.Кассы.ПустаяСсылка();
			ЗначениеОплаты = ПолучитьЗначениеРеквизитаДокумента(ДокументXML.ЗначенияРеквизитов, "Метод оплаты ИД");
				
			ИдОплаты = "";
			Если НЕ ЗначениеОплаты = Неопределено тогда
				ИдОплаты = СокрЛП(ЗначениеОплаты);	
			КонецЕсли;
				
			Если ПараметрыОбмена.СоответствиеПлатежныхСистемИКасс <> Неопределено тогда
					
				НайденныеСтроки = ПараметрыОбмена.СоответствиеПлатежныхСистемИКасс.НайтиСтроки(Новый Структура("ИдПлатежнойСистемы, Организация", ИдОплаты, Документ.Организация));
				
				Если НайденныеСтроки.Количество() > 0 тогда
					Результат = НайденныеСтроки[0].Касса;
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ТекущийРеквизит.Значение = "Ставка НДС по первому товару" тогда
			
			Если ДокументXML.товары.Количество() > 0 тогда
				НДС = ДокументXML.товары[0].СтавкаНДСТовара;
				Результат          		= ?(НДС = Неопределено, Перечисления.СтавкиНДС.БезНДС, НДС);
			Иначе
				Результат          		= Перечисления.СтавкиНДС.БезНДС;
			КонецЕсли;
			
		ИначеЕсли ТекущийРеквизит.Значение = "Основание" тогда
			
			Результат = ПолучитьОснование(ДокументXML, лТипРеквизита);
			
		ИначеЕсли ТекущийРеквизит.Значение = "Договор эквайринга" тогда
			
			Результат = Справочники.ДоговорыЭквайринга.ПустаяСсылка();
			ЗначениеОплаты = ПолучитьЗначениеРеквизитаДокумента(ДокументXML.ЗначенияРеквизитов, "Метод оплаты ИД");
				
			ИдОплаты = "";
			Если НЕ ЗначениеОплаты = Неопределено тогда
				ИдОплаты = СокрЛП(ЗначениеОплаты);	
			КонецЕсли;
				
			Если ПараметрыОбмена.СоответствиеПлатежныхСистемИКасс <> Неопределено тогда
					
				НайденныеСтроки = ПараметрыОбмена.СоответствиеПлатежныхСистемИКасс.НайтиСтроки(Новый Структура("ИдПлатежнойСистемы, Организация", ИдОплаты, Документ.Организация));
				
				Если НайденныеСтроки.Количество() > 0 тогда
					Результат = НайденныеСтроки[0].ДоговорЭквайринга;
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ТекущийРеквизит.Значение = "Номенклатура" тогда
			
			СтрИнформацииОНоменклатуре = ПолучитьИнформациюОНоменклатуреДляДокумента(ПараметрыОбмена, СтрокаXML);
			
			Если СтрИнформацииОНоменклатуре.Номенклатура = Неопределено тогда
				Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("В документе: " + Строка(Документ) + " не найдена/создана номенклатура. ", ПараметрыОбмена);
				Результат = Справочники.Номенклатура.ПустаяСсылка();	
			Иначе
				Результат = СтрИнформацииОНоменклатуре.Номенклатура;	
			КонецЕсли;
			
		ИначеЕсли ТекущийРеквизит.Значение = "Характеристика номенклатуры" тогда
			
			СтрИнформацииОНоменклатуре = ПолучитьИнформациюОНоменклатуреДляДокумента(ПараметрыОбмена, СтрокаXML);
		
			Если СтрИнформацииОНоменклатуре.ХарактеристикаНоменклатуры = Неопределено тогда
				Результат = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();	
			Иначе
				Результат = СтрИнформацииОНоменклатуре.ХарактеристикаНоменклатуры;	
			КонецЕсли;
			
		ИначеЕсли ТекущийРеквизит.Значение = "Содержание номенклатуры" тогда
			
			Результат = СтрокаXML.Наименование;
			
		ИначеЕсли ТекущийРеквизит.Значение = "Ставка НДС" тогда
				
			Если ЗначениеЗаполнено(СтрокаXML.СтавкаНДСТовара) Тогда
				Результат = СтрокаXML.СтавкаНДСТовара;
			Иначе
				Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС) Тогда
					Результат = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ТекущийРеквизит.Значение = "Единица измерения" тогда
			
			СтрИнформацииОНоменклатуре = ПолучитьИнформациюОНоменклатуреДляДокумента(ПараметрыОбмена, СтрокаXML);
		
			Результат = СтрИнформацииОНоменклатуре.ЕдиницаИзмерения;	
			
		ИначеЕсли ТекущийРеквизит.Значение = "Количество" тогда
			
			Результат = СтрокаXML.Количество;
			
		ИначеЕсли ТекущийРеквизит.Значение = "Коэффициент" тогда
			
			Результат = СтрокаXML.Коэффициент;
			
			
		ИначеЕсли ТекущийРеквизит.Значение = "Цена" тогда
			
			Если НЕ ПараметрыОбмена.УстанавливатьРучнуюСкидкуВДокументе тогда
			
				Результат = 0;	
					
				Сумма = РассчитатьСуммуСУчетомСкидок(СтрокаXML);
				
				Если ЗначениеЗаполнено(СтрокаXML.Цена) Тогда
					Результат = СтрокаXML.Цена;
				КонецЕсли;
				
				Если Результат = 0 Тогда
					Результат = Сумма / СтрокаXML.Количество;
				КонецЕсли;
			Иначе	
				
				Сумма = РассчитатьСуммуБезУчетаСкидок(СтрокаXML);
				
				Результат = Сумма / СтрокаXML.Количество;
				
			КонецЕсли;	
			
		ИначеЕсли ТекущийРеквизит.Значение = "Процент ручной скидки" тогда
			
			Если НЕ ПараметрыОбмена.УстанавливатьРучнуюСкидкуВДокументе тогда
			
				Результат = 0;
				
			Иначе	
				
				СуммаБезСкидок = РассчитатьСуммуБезУчетаСкидок(СтрокаXML);
				
				лСкидка = 0;
				Если СтрокаXML.Скидки <> Неопределено тогда
					лСкидка = СтрокаXML.Скидки.Итог("Сумма");	
				КонецЕсли;
				
				Результат = лСкидка*100/СуммаБезСкидок;
				
			КонецЕсли;	
			
		ИначеЕсли ТекущийРеквизит.Значение = "Сумма позиции" тогда
			
			Результат = РассчитатьСуммуСУчетомСкидок(СтрокаXML);
			
		КонецЕсли;
		
	ИначеЕсли ТекущийРеквизит.ТипДанных = "Фиксированное значение" тогда
		
		Результат = ТекущийРеквизит.Значение;	
		
	ИначеЕсли ТекущийРеквизит.ТипДанных = "Из дополнительных свойств документа (по наименованию)" тогда
		
		лЗначениеДопСвойства = ПолучитьЗначениеРеквизитаДокумента(ДокументXML.ЗначенияРеквизитов, ТекущийРеквизит.Значение);

		Для каждого ТекТип из лТипРеквизита.Типы() Цикл
		
			Если мПростыеТипы.Найти(ТекТип) = Неопределено тогда
				
		    	лОбъект = Метаданные.НайтиПоТипу(ТекТип);
				
				Если лОбъект <> Неопределено тогда
				
					лПолноеИмяОбъектаПоиска = лОбъект.ПолноеИмя();
					
					Если Лев(лПолноеИмяОбъектаПоиска, 3) = "Пер" тогда
						
						Для каждого ТекЗначение из лОбъект.ЗначенияПеречисления Цикл
							
							Если ТекЗначение.Синоним = лЗначениеДопСвойства тогда
								
								Результат = Перечисления[лОбъект.Имя][ТекЗначение.Имя];
								
								Прервать;
								
							КонецЕсли;
							
						КонецЦикла;
						
					ИначеЕсли Лев(лПолноеИмяОбъектаПоиска, 3) = "Док" тогда
						
						Результат = Документы[лОбъект.Имя].НайтиПоНомеру(лЗначениеДопСвойства, ТекущаяДата());
								
						Прервать;
						
					ИначеЕсли Лев(лПолноеИмяОбъектаПоиска, 3) = "Спр" тогда
						
						Если лОбъект.Имя = "СоглашенияСКлиентами" И ДокументXML.Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо И ЗначениеЗаполнено(ПараметрыОбмена.КонтрагентФизлицо) тогда	
							Возврат ПараметрыОбмена.КонтрагентФизлицо; 	
						КонецЕсли;
						
						Результат = Справочники[лОбъект.Имя].НайтиПоНаименованию(лЗначениеДопСвойства);
						
					КонецЕсли;
				
				КонецЕсли;
				
		  Иначе
				
				Результат =	XMLЗначение(ТекТип, лЗначениеДопСвойства);	
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;			
			
	ИначеЕсли ТекущийРеквизит.ТипДанных = "Из дополнительных свойств документа (по ид)" тогда

		Для каждого ТекТип из лТипРеквизита.Типы() Цикл
			
			Попытка
				
				Если ТекТип = Тип("Справочник.СоглашенияСКлиентами") И ДокументXML.Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо И ЗначениеЗаполнено(ПараметрыОбмена.КонтрагентФизлицо) тогда	
					Возврат ПараметрыОбмена.КонтрагентФизлицо; 	
				КонецЕсли;
				
				Результат =	XMLЗначение(ТекТип, лЗначениеДопСвойства);	
				
				Прервать;
				
			Исключение
				
			КонецПопытки
	
		КонецЦикла;
	
	КонецЕсли;
	
	Возврат Результат; 
	
КонецФункции

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Функция ФормированиеКомментарияДокумента(Номер, Комментарий)
	
	Если Найти(Комментарий, "[Номер документа на сайте:") = 0 Тогда
		лКомментарий = "[Номер документа на сайте: " + Номер + "] " + Комментарий;	
	Иначе
		лКомментарий = Комментарий;	
	КонецЕсли;
	
	Возврат лКомментарий;

КонецФункции

Функция ПолучитьКонтрагента(ПараметрыОбмена, ЮрФизЛицо, ДокументXML)
	
	Если ЮрФизЛицо 	= Перечисления.ЮрФизЛицо.ФизЛицо И ЗначениеЗаполнено(ПараметрыОбмена.КонтрагентФизлицо) тогда	
		Возврат ПараметрыОбмена.КонтрагентФизлицо;
	КонецЕсли;
	
	Результат = Справочники.Контрагенты.ПустаяСсылка();
	Контрагент = Неопределено;
	ИнформацияОКонтрагенте = ДокументXML.Контрагент;
	
	Контрагент = ПолучитьКонтрагентаПоКоду(ИнформацияОКонтрагенте.Ид, "СправочникСсылка.Контрагенты", ИнформацияОКонтрагенте.Наименование);
	
	Если Контрагент = Неопределено тогда
		
		Если НЕ ПараметрыОбмена.СпособИдентификацииКонтрагентов = "НеИспользовать" Тогда
			
			Запрос = Новый Запрос();
			
			Запрос.УстановитьПараметр("Наименование", ИнформацияОКонтрагенте.Наименование);
			Запрос.УстановитьПараметр("ИНН", ИнформацияОКонтрагенте.ИНН);
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Контрагенты.Ссылка Как Контрагент
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|";
			
			Если ПараметрыОбмена.СпособИдентификацииКонтрагентов = "ИНН" Тогда
				Запрос.Текст = Запрос.Текст + " Контрагенты.ИНН = &ИНН ";
			Иначе
				Запрос.Текст = Запрос.Текст + " Контрагенты.Наименование = &Наименование ";
			КонецЕсли;
			тзнКонтрагента = Запрос.Выполнить().Выгрузить();
			Если тзнКонтрагента.Количество() > 0 тогда
				Контрагент = тзнКонтрагента[0].Контрагент; 	   
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Контрагент = Неопределено тогда
		
		Если Контрагент.ВерсияДанных 	= ИнформацияОКонтрагенте.НомерВерсии тогда
			Возврат Контрагент.Ссылка;	
		КонецЕсли;
		
		Если ПараметрыОбмена.НеРедактироватьКонтрагентовПришедшихССайта тогда
			Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("В настройках указано, что контрагенты не обновляются. Контрагент: " + ИнформацияОКонтрагенте.Наименование + " не будет обновлен.", ПараметрыОбмена);
			Возврат Контрагент.Ссылка;	
		Иначе
			Контрагент 	= Контрагент.ПолучитьОбъект();
		КонецЕсли;

	Иначе
		Контрагент = Справочники.Контрагенты.СоздатьЭлемент();
		Контрагент.Родитель 		= ПараметрыОбмена.ГруппаДляНовыхКонтрагентов;
		
		Контрагент.Б_Идентификатор 	= ИнформацияОКонтрагенте.Ид;
	КонецЕсли;	
	
	Контрагент.Б_НомерВерсии 		= ИнформацияОКонтрагенте.НомерВерсии;
	
	Контрагент.Наименование			= ИнформацияОКонтрагенте.Наименование;
	
	
	Если ИнформацияОКонтрагенте.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо И ПараметрыОбмена.ИспользоватьФИОДляФизЛиц тогда
		
		лПолноеНаименование = "";
		
		Если ЗначениеЗаполнено(ИнформацияОКонтрагенте.Фамилия) Тогда
			лПолноеНаименование = ИнформацияОКонтрагенте.Фамилия;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИнформацияОКонтрагенте.Имя) Тогда
			лПолноеНаименование = СокрЛП(лПолноеНаименование + " " + ИнформацияОКонтрагенте.Имя);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИнформацияОКонтрагенте.Отчество) Тогда
			лПолноеНаименование = СокрЛП(лПолноеНаименование + " " + ИнформацияОКонтрагенте.Отчество);
		КонецЕсли;
			
		Контрагент.НаименованиеПолное	= лПолноеНаименование;
	Иначе
		Контрагент.НаименованиеПолное	= ИнформацияОКонтрагенте.НаименованиеПолное;
	КонецЕсли;
	
	
	Контрагент.Покупатель 			= Истина;
	
	Контрагент.ЮрФизЛицо			= ИнформацияОКонтрагенте.ЮрФизЛицо;
	Контрагент.ИНН		 			= ИнформацияОКонтрагенте.ИНН;
	Контрагент.КПП					= ИнформацияОКонтрагенте.КПП;
	Контрагент.КодПоОКПО 			= ИнформацияОКонтрагенте.КодПоОКПО;
	Контрагент.ПометкаУдаления		= ИнформацияОКонтрагенте.ПометкаУдаления;
	
	Попытка
		Контрагент.Записать();
		Результат = Контрагент.Ссылка;
		ЗаполнитьПодчиненныеДанныеКонтрагента(ПараметрыОбмена, Результат, ДокументXML);	
	Исключение
		Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно(ОписаниеОшибки(), ПараметрыОбмена);

	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Процедура ЗаполнитьПодчиненныеДанныеКонтрагента(ПараметрыОбмена, КонтрагентСсылка, ДокументXML)

	тзнКонтактыхЛиц = ДокументXML.Контрагент.КонтактныеЛица;
	
	Если тзнКонтактыхЛиц <> Неопределено тогда
		
		Для каждого ТекКонтактноеЛицо из тзнКонтактыхЛиц Цикл
			
			КонтактноеЛицо = ПолучениеОбъектаПоКоду(ТекКонтактноеЛицо.Ид, "СправочникСсылка.КонтактныеЛицаКонтрагентов", "Справочник.КонтактныеЛицаКонтрагентов");
			
			Если КонтактноеЛицо = Неопределено тогда
				
				Элемент = Справочники.КонтактныеЛицаКонтрагентов.СоздатьЭлемент();
				Элемент.Б_Идентификатор = ТекКонтактноеЛицо.Ид;
				Элемент.Владелец 		= КонтрагентСсылка;
				Элемент.Наименование 	= ТекКонтактноеЛицо.Наименование;
				Элемент.Записать();
				
				КонтактноеЛицо = Элемент.Ссылка;	
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
			
	тзнКонтактактов = ДокументXML.Контрагент.Контакты;
	
	Если тзнКонтактактов <> Неопределено тогда
		
		Для каждого ТекКонтакт из тзнКонтактактов Цикл
			
			Если НЕ ЗначениеЗаполнено(ТекКонтакт.ТипВидКонтактнойИнформации) тогда
				Продолжить;	
			КонецЕсли;
			
			НаборКИ = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
			НаборКИ.отбор.Объект.Установить(КонтрагентСсылка);
			НаборКИ.отбор.Тип.Установить(ТекКонтакт.ТипВидКонтактнойИнформации.Тип);
			НаборКИ.отбор.Вид.Установить(ТекКонтакт.ТипВидКонтактнойИнформации);
			
			СтрокаКи = НаборКИ.Добавить();                            
			СтрокаКи.Объект = КонтрагентСсылка;
			СтрокаКи.Тип = ТекКонтакт.ТипВидКонтактнойИнформации.Тип;
			СтрокаКи.Вид = ТекКонтакт.ТипВидКонтактнойИнформации;
			
			СтрокаКи.Представление = ТекКонтакт.Представление;
			
			Если ТекКонтакт.ТипВидКонтактнойИнформации 		= Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента 
				ИЛИ ТекКонтакт.ТипВидКонтактнойИнформации 	= Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента 
				ИЛИ ТекКонтакт.ТипВидКонтактнойИнформации 	= Справочники.ВидыКонтактнойИнформации.АдресДоставкиКонтрагента тогда
				
					Если ТекКонтакт.АдресныеПоля <> Неопределено тогда
						Для Каждого СтрокаУточнения Из ТекКонтакт.АдресныеПоля Цикл
							Если  СтрокаУточнения.Типзначения = "Почтовый индекс" тогда
								СтрокаКи.Поле1	= СтрокаУточнения.Значение;	
							ИначеЕсли СтрокаУточнения.Типзначения = "Регион" тогда
								СтрокаКи.Поле2	= СтрокаУточнения.Значение;	
							ИначеЕсли СтрокаУточнения.Типзначения = "Район" тогда
								СтрокаКи.Поле3	= СтрокаУточнения.Значение;	
							ИначеЕсли СтрокаУточнения.Типзначения = "Населенный пункт" тогда
								СтрокаКи.Поле4	= СтрокаУточнения.Значение;	
							ИначеЕсли СтрокаУточнения.Типзначения = "Город" тогда
								СтрокаКи.Поле5	= СтрокаУточнения.Значение;	
							ИначеЕсли СтрокаУточнения.Типзначения = "Улица" тогда
								СтрокаКи.Поле6	= СтрокаУточнения.Значение;	
							ИначеЕсли СтрокаУточнения.Типзначения = "Дом" тогда
								СтрокаКи.Поле7	= СтрокаУточнения.Значение;	
							ИначеЕсли СтрокаУточнения.Типзначения = "Корпус" тогда
								СтрокаКи.Поле8	= СтрокаУточнения.Значение;	
							ИначеЕсли СтрокаУточнения.Типзначения = "Квартира" тогда
								СтрокаКи.Поле9	= СтрокаУточнения.Значение;	
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;  
					
				СтрокаКи.Представление = ?(ЗначениеЗаполнено(СтрокаКи.Представление), СтрокаКи.Представление, УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдреса(СтрокаКи));	
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаКи.Представление) тогда	
			
				НаборКИ.Записать();
				
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры


Функция ПолучитьДоговорКонтрагента(ПараметрыОбмена, ЮрФизЛицо, ДокОбъект, ДокументXML)
	
	Если ЮрФизЛицо 	= Перечисления.ЮрФизЛицо.ФизЛицо И ЗначениеЗаполнено(ПараметрыОбмена.ДоговорКонтрагентаФизлицо) тогда	
		Возврат ПараметрыОбмена.ДоговорКонтрагентаФизлицо;
	КонецЕсли;

	Результат = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	
	Если Не ЗначениеЗаполнено(ДокОбъект.Организация) Тогда
		Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Не удалось определить основной договор контрагента (не найдена организация).", ПараметрыОбмена);
		Возврат Результат;
	КонецЕсли;
	
	лНаименованиеДоговора = "";
	
	// ищем договр по контрагенту, организации и валюте
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Организация"	, ДокОбъект.Организация);
	Запрос.УстановитьПараметр("Контрагент"	, ДокОбъект.Контрагент);
	ТекстЗапроса = "ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка,
	|	ДоговорыКонтрагентов.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Организация = &Организация
	|	И ДоговорыКонтрагентов.ВедениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам)
	|	И ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
	|	И ДоговорыКонтрагентов.Владелец = &Контрагент";
	
	Если НЕ ПустаяСтрока(лНаименованиеДоговора) тогда			   
		ТекстЗапроса = ТекстЗапроса + "
		|	И ДоговорыКонтрагентов.Наименование = &Наименование";
		Запрос.УстановитьПараметр("Наименование"	, лНаименованиеДоговора);
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;			 
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТекущийДоговор = Неопределено;
	
	ВалютаВзаиморасчетов = ДокОбъект.ВалютаДокумента;
	
	Если НЕ ЗначениеЗаполнено(ВалютаВзаиморасчетов) Тогда
		ВалютаВзаиморасчетов = глЗначениеПеременной("ВалютаУправленческогоУчета");
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		ТекущийДоговор = Выборка.Ссылка;
		Если Выборка.ВалютаВзаиморасчетов = ВалютаВзаиморасчетов Тогда
			
			Результат = ТекущийДоговор;
			
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		
		Результат = СоздатьДоговорПоПараметрам(ПараметрыОбмена, ДокОбъект.Контрагент, ДокОбъект.Организация, ВалютаВзаиморасчетов);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СоздатьДоговорПоПараметрам(ПараметрыОбмена, Контрагент, Организация, ВалютаВзаиморасчетов)
	
	НайденныйДоговорОбъект = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
	НайденныйДоговорОбъект.Наименование = "Договор WEB - сайт";
	
	Если НЕ ЗначениеЗаполнено(ВалютаВзаиморасчетов) Тогда
		ВалютаВзаиморасчетов = глЗначениеПеременной("ВалютаУправленческогоУчета");
	КонецЕсли;
	
	НайденныйДоговорОбъект.ВалютаВзаиморасчетов = ВалютаВзаиморасчетов;
	НайденныйДоговорОбъект.Организация 			= Организация;
	НайденныйДоговорОбъект.Владелец           	= Контрагент;
	НайденныйДоговорОбъект.ВидУсловийДоговора 	= Перечисления.ВидыУсловийДоговоровВзаиморасчетов.БезДополнительныхУсловий;
	НайденныйДоговорОбъект.ВидДоговора 			= Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
	НайденныйДоговорОбъект.ВедениеВзаиморасчетов= Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам;
	НайденныйДоговорОбъект.ВестиПоДокументамРасчетовСКонтрагентом = Истина;
	
	Попытка
		НайденныйДоговорОбъект.Записать();
	Исключение
		
		Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Не удалось записать договор контрагента. " + ОписаниеОшибки(), ПараметрыОбмена);
		
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат НайденныйДоговорОбъект.Ссылка;
	
КонецФункции

Функция ПолучитьСклад(ПараметрыОбмена, ДокументXML)
	
	лСклад 		= Неопределено;
	
	ИнформацияОСкладе = ДокументXML.Склад;
	
	Если ИнформацияОСкладе <> Неопределено тогда
		лСклад = ПолучениеОбъектаПоКоду(ИнформацияОСкладе.Ид, "СправочникСсылка.Склады", "Справочник.Склады");
	КонецЕсли;
	
	Если  лСклад = Неопределено тогда
		лСклад = Справочники.Склады.ПустаяСсылка();
	КонецЕсли;
	
	Возврат лСклад;
	
КонецФункции

Функция ПолучитьОснование(ДокументXML, лТипРеквизита)
	
	Результат = Неопределено;
	
	Для каждого ТекТип из лТипРеквизита.Типы() Цикл
		
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ТекТип);
		
		ИмяДокумента = ОбъектМетаданных.Имя;
		
		Если Метаданные.Документы.Найти(ИмяДокумента) = Неопределено тогда
			Продолжить;
		КонецЕсли;
		
		ВидДокумента = Документы[ИмяДокумента];
		
		СоставОбщихРеквизитов = Метаданные.ОбщиеРеквизиты.Б_Идентификатор.Состав.Найти(ОбъектМетаданных);
		
		Если СоставОбщихРеквизитов <> Неопределено тогда
			
			Если СоставОбщихРеквизитов.Использование <> Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать тогда
				Продолжить;
			КонецЕсли;
		Иначе
			Продолжить;
		КонецЕсли;
		
		Результат = ВидДокумента.ПустаяСсылка();
		
		Если Результат.Пустая() тогда	
			ЗапросЗ = Новый Запрос;
			
			ЗапросЗ.Текст = "ВЫБРАТЬ
			|	ИскомыйДокумент.Ссылка
			|ИЗ
			|	Документ." + ИмяДокумента + " КАК ИскомыйДокумент
			|ГДЕ
			|	ИскомыйДокумент.Б_Идентификатор = &Идентификатор";
			ЗапросЗ.УстановитьПараметр("Идентификатор"	, ДокументXML.Номер);
			
			тзнВрем = ЗапросЗ.Выполнить().Выгрузить();
			Если тзнВрем.Количество() > 0 тогда
				Результат = тзнВрем[0].Ссылка;
			КонецЕсли;
		КонецЕсли;	

		Если НЕ Результат.Пустая() тогда
			Прервать;                          					
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДокументXML.Номер1С) и ЗначениеЗаполнено(ДокументXML.Дата1С) тогда
			Результат = ВидДокумента.НайтиПоНомеру(ДокументXML.Номер1С, ДокументXML.Дата1С);	
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьИнформациюОНоменклатуреДляДокумента(ПараметрыОбмена, СтрокаТовара)
	
	Результат = Новый Структура;
	Результат.Вставить("Номенклатура"				, Справочники.Номенклатура.ПустаяСсылка());
	Результат.Вставить("ХарактеристикаНоменклатуры"	, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	Результат.Вставить("ЕдиницаИзмерения"			, Справочники.ЕдиницыИзмерения.ПустаяСсылка());
	
	ИдТовара = СтрокаТовара.Ид;
	
	ПозицияРазделителя = Найти(ИдТовара, "#");
	Если ПозицияРазделителя > 0 Тогда
		ИдНоменклатуры = Лев(ИдТовара, ПозицияРазделителя - 1);
	Иначе
		ИдНоменклатуры = СтрокаТовара.Ид;
	КонецЕсли;
	Если ПозицияРазделителя > 0 Тогда
		ИдХарактеристики = Прав(ИдТовара, СтрДлина(ИдТовара) - ПозицияРазделителя);
	Иначе
		ИдХарактеристики = "";
	КонецЕсли;
	
	ЭтоНоваяНоменклатура = Ложь;
	Номенклатура = ПолучениеОбъектаПоКоду(ИдНоменклатуры, "СправочникСсылка.Номенклатура", "Справочник.Номенклатура");
	
	Если ЗначениеЗаполнено(ИдХарактеристики) тогда
		
		ХарактеристикаНоменклатуры = ПолучениеОбъектаПоКоду(ИдХарактеристики, "СправочникСсылка.ХарактеристикиНоменклатуры", "Справочник.ХарактеристикиНоменклатуры");
	
	КонецЕсли;
	
	Если Номенклатура = Неопределено И ИдХарактеристики <> ИдТовара тогда
		
		НоваяНоменклатура = Справочники.Номенклатура.СоздатьЭлемент();
		НоваяНоменклатура.Б_Идентификатор 	= ИдНоменклатуры; 
		НоваяНоменклатура.Родитель			= ПараметрыОбмена.ГруппаДляНовойНоменклатуры;
		
		НоваяНоменклатура.Наименование 		= СтрокаТовара.Наименование; 
		НоваяНоменклатура.СтавкаНДС 		= СтрокаТовара.СтавкаНДСТовара; 
		
		Если ЗначениеЗаполнено(ИдХарактеристики) тогда
			НоваяНоменклатура.ВестиУчетПоХарактеристикам = Истина;
		Конецесли;
		
		//Добавляем вид номенклатуры для товара
		Если СтрокаТовара.ЗначенияРеквизитов <> Неопределено тогда
			
			ВидНоменклатурыНаименование = ПолучитьЗначениеРеквизитаДокумента(СтрокаТовара.ЗначенияРеквизитов, "ВидНоменклатуры");
			ТипНоменклатурыНаименование = ПолучитьЗначениеРеквизитаДокумента(СтрокаТовара.ЗначенияРеквизитов, "ТипНоменклатуры");
			
			Если ЗначениеЗаполнено(ТипНоменклатурыНаименование) тогда						
				Если ТипНоменклатурыНаименование = "Товар" тогда
					ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар;
				ИначеЕсли ТипНоменклатурыНаименование = "Услуга" тогда
					ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга;
				ИначеЕсли ТипНоменклатурыНаименование = "Набор" тогда
					ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Набор;
				ИначеЕсли ТипНоменклатурыНаименование = "Комплект" тогда
					ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Комплект;
				КонецЕсли;
			Иначе
				ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар;
			КонецЕсли;
		Иначе
			ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар;
			ВидНоменклатурыНаименование = "";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВидНоменклатурыНаименование) тогда
			
			ВидНоменклатуры = Справочники.ВидыНоменклатуры.НайтиПоНаименованию(ВидНоменклатурыНаименование, Истина);
			
			Если НЕ ЗначениеЗаполнено(ВидНоменклатуры) тогда
				
				Выборка = Справочники.ВидыНоменклатуры.Выбрать();	
				Пока Выборка.Следующий() Цикл
					Если Выборка.ТипНоменклатуры = ТипНоменклатуры тогда
						ВидНоменклатуры = Выборка.Ссылка;	
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе
			Выборка = Справочники.ВидыНоменклатуры.Выбрать();	
			Пока Выборка.Следующий() Цикл
				Если Выборка.ТипНоменклатуры = ТипНоменклатуры тогда
					ВидНоменклатуры = Выборка.Ссылка;	
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		НоваяНоменклатура.ВидНоменклатуры = ВидНоменклатуры;	
		
		ТипТовара = НоваяНоменклатура.ВидНоменклатуры.ТипНоменклатуры;
		
		Если ТипТовара = Перечисления.ТипыНоменклатуры.Услуга тогда
			НоваяНоменклатура.Услуга = Истина;	
		ИначеЕсли ТипТовара = Перечисления.ТипыНоменклатуры.Набор тогда
			НоваяНоменклатура.Набор = Истина;	
		ИначеЕсли ТипТовара = Перечисления.ТипыНоменклатуры.Комплект тогда
			НоваяНоменклатура.Комплект = Истина;	
		КонецЕсли;
		
		//добавляем единицы измерения
		ЕдиницаИзмерения = СтрокаТовара.Единица;
		Если СтрокаТовара.Единица <> Неопределено тогда
			
			БазоваяЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду(ЕдиницаИзмерения.Код).Ссылка;
			
			Если НЕ ЗначениеЗаполнено(БазоваяЕдиницаИзмерения) тогда
				НоваяБазоваяЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();
				НоваяБазоваяЕдиницаИзмерения.Код 				= ЕдиницаИзмерения.Код;
				НоваяБазоваяЕдиницаИзмерения.Б_Идентификатор 	= ЕдиницаИзмерения.Ид;
				НоваяБазоваяЕдиницаИзмерения.Наименование 		= ?(ЕдиницаИзмерения.НаименованиеКраткое = "", ЕдиницаИзмерения.НаименованиеПолное, ЕдиницаИзмерения.НаименованиеКраткое) ;
				НоваяБазоваяЕдиницаИзмерения.НаименованиеПолное = ЕдиницаИзмерения.НаименованиеПолное;
				
				Попытка
					НоваяБазоваяЕдиницаИзмерения.Записать();
					БазоваяЕдиницаИзмерения = НоваяБазоваяЕдиницаИзмерения.Ссылка;
				Исключение
					Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Не удалось записать единицу измерения " + ЕдиницаИзмерения.НаименованиеКраткое + " "+ ОписаниеОшибки(), ПараметрыОбмена);
					БазоваяЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка();
				КонецПопытки;			
			КонецЕсли;
			
			НоваяНоменклатура.БазоваяЕдиницаИзмерения = БазоваяЕдиницаИзмерения;
			
			Попытка
				НоваяНоменклатура.Записать();
				Номенклатура = НоваяНоменклатура.Ссылка;
				ЭтоНоваяНоменклатура = Истина;
			Исключение
				Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Не удалось записать номенклатуру " + СтрокаТовара.Наименование + " "+ ОписаниеОшибки(), ПараметрыОбмена);
			КонецПопытки;
		Иначе
			Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("У номенклатуры с кодом: " + ИдНоменклатуры + "не найдена единица измерения в заказе. Номенклатура не будет создана.", ПараметрыОбмена);

		КонецЕсли;
		
	КонецЕсли;	
		
	ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(Номенклатура) И ЗначениеЗаполнено(Номенклатура.БазоваяЕдиницаИзмерения) тогда
		
		ВыборкаЕдиниц = Справочники.ЕдиницыИзмерения.Выбрать(,Номенклатура);
		Пока ВыборкаЕдиниц.Следующий() Цикл
			
			Если ВыборкаЕдиниц.ЕдиницаПоКлассификатору = Номенклатура.БазоваяЕдиницаИзмерения тогда 
				ЕдиницаИзмерения = ВыборкаЕдиниц.Ссылка;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ ЗначениеЗаполнено(ЕдиницаИзмерения) тогда
			
			ЕдиницаХраненияОстатков = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
			
			ЕдиницаХраненияОстатков.Наименование            = Номенклатура.БазоваяЕдиницаИзмерения.Наименование;
			ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору = Номенклатура.БазоваяЕдиницаИзмерения;
			ЕдиницаХраненияОстатков.Коэффициент             = СтрокаТовара.Коэффициент;
			ЕдиницаХраненияОстатков.Владелец                = Номенклатура.Ссылка;
			
			Попытка
				ЕдиницаХраненияОстатков.Записать();
				ЕдиницаИзмерения 	= ЕдиницаХраненияОстатков.Ссылка;
			Исключение
				Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Не удалось записать единицу измерения для товара " + СтрокаТовара.Наименование + " с коэффициентом 1. "+ ОписаниеОшибки(), ПараметрыОбмена);
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоНоваяНоменклатура тогда
		
		ОбновленнаяНоменклатура 						= Номенклатура.ПолучитьОбъект();
		ОбновленнаяНоменклатура.ЕдиницаХраненияОстатков = ЕдиницаИзмерения;
		ОбновленнаяНоменклатура.ЕдиницаДляОтчетов 		= ЕдиницаИзмерения;
		
		Попытка
			ОбновленнаяНоменклатура.Записать();
		Исключение
				Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно(ОписаниеОшибки(), ПараметрыОбмена);
		КонецПопытки;
	КонецЕсли;
	
	Если ХарактеристикаНоменклатуры = Неопределено И ЗначениеЗаполнено(ИдХарактеристики) И ЗначениеЗаполнено(Номенклатура) тогда
		
		Если Номенклатура.ВестиУчетПоХарактеристикам тогда
		
			НоваяХарактеристика = Справочники.ХарактеристикиНоменклатуры.СоздатьЭлемент();
			НоваяХарактеристика.Владелец = Номенклатура;
			НоваяХарактеристика.Наименование = СтрокаТовара.Наименование;
			
			Попытка
				НоваяХарактеристика.Записать();
				ХарактеристикаНоменклатуры = НоваяХарактеристика.Ссылка;
			Исключение
				
				Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Не удалось создать характеристику " + СтрокаТовара.Наименование + " "+ ОписаниеОшибки(), ПараметрыОбмена);

			КонецПопытки;
		Иначе
				Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Не удалось создать характеристику " + СтрокаТовара.Наименование + " т.к. у номенклатуры не ведется учет по характеристикам.", ПараметрыОбмена);
		КонецЕсли;
		
	КонецЕсли;
	
	Результат.Вставить("Номенклатура"				, Номенклатура);
	Результат.Вставить("ХарактеристикаНоменклатуры"	, ХарактеристикаНоменклатуры);
	Результат.Вставить("ЕдиницаИзмерения"			, ЕдиницаИзмерения);
	
	Возврат Результат;
	
КонецФункции


Функция ПолучениеОбъектаПоКоду(Код, ТипОбъекта, ИмяОбъекта = "") Экспорт
	
	Попытка
		Результат = XMLЗначение(Тип(ТипОбъекта), Код);
	Исключение
		Результат = Неопределено;
	КонецПопытки;
	
	Если Результат <> Неопределено тогда
		Результат = ?(СокрЛП(Результат.ВерсияДанных) = "", Неопределено, Результат);
	КонецЕсли;
	
	Если Результат = Неопределено и ИмяОбъекта <> "" тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Справочник.Ссылка
		|ИЗ
		|	" + ИмяОбъекта + " КАК Справочник
		|ГДЕ
		|	Справочник.Б_Идентификатор = &Идентификатор";
		запрос.УстановитьПараметр("Идентификатор",Код);
		тзнВрем = запрос.Выполнить().Выгрузить();
		Если тзнВрем.Количество() > 0 тогда
			Результат = тзнВрем[0].Ссылка; 	   
		КонецЕсли;
	КонецЕсли;
	
	Если Результат <> Неопределено тогда
		Результат = ?(СокрЛП(Результат.ВерсияДанных) = "", Неопределено, Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьКонтрагентаПоКоду(Код, ТипОбъекта, НаименованиеКонтрагента) Экспорт
	
	Попытка
		Результат = XMLЗначение(Тип(ТипОбъекта), Код);
	Исключение
		Результат = Неопределено;
	КонецПопытки;
	
	Если Результат <> Неопределено тогда
		Результат = ?(СокрЛП(Результат.ВерсияДанных) = "", Неопределено, Результат);
	КонецЕсли;
	
	Если Результат = Неопределено тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Справочник.Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Справочник
		|ГДЕ
		|	Справочник.Б_Идентификатор = &Идентификатор
		|	И Справочник.Наименование = &Наименование";
		
		Запрос.УстановитьПараметр("Идентификатор"	,Код);
		Запрос.УстановитьПараметр("Наименование"	,НаименованиеКонтрагента);
		
		тзнВрем = запрос.Выполнить().Выгрузить();
		
		Если тзнВрем.Количество() > 0 тогда
			Результат = тзнВрем[0].Ссылка; 	   
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗаписьИПроведениеДокумента(ПараметрыОбмена, Документ, ПроводитьДокумент, ПроводитьОперативно)
	
	Результат = Истина;
	
	Если ПроводитьДокумент тогда
		Если НЕ Документ.ПометкаУдаления тогда
			
			Попытка
				
				Если ПроводитьОперативно тогда
					Документ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
					Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Документ: " + Строка(Документ) + " оперативно проведен.", ПараметрыОбмена);
				Иначе
					Документ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);	
					Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Документ: " + Строка(Документ) + " проведен неоперативно.", ПараметрыОбмена);
				КонецЕсли; 
				
			Исключение
				
				Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Документ: " + Строка(Документ) + " не удалось провести. Будет попытка записать документ", ПараметрыОбмена);
				
				Попытка
					Документ.Записать(РежимЗаписиДокумента.Запись);	
					Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Документ: " + Строка(Документ) + " записан.", ПараметрыОбмена);
				Исключение
					Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("НЕ УДАЛОСЬ ЗАПИСАТЬ ДОКУМЕНТ: " + Строка(Документ), ПараметрыОбмена);
					
					Результат = Ложь;

				КонецПопытки;
				
			КонецПопытки;
			
		Иначе
			Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Помеченный на удаление документ: " + Строка(Документ) + " не может быть проведен. документ будет записан.", ПараметрыОбмена);
			Документ.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;	
	Иначе
		Попытка
			Документ.Записать(РежимЗаписиДокумента.Запись);	
			Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Документ: " + Строка(Документ) + " записан.", ПараметрыОбмена);
		Исключение
			Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("НЕ УДАЛОСЬ ЗАПИСАТЬ ДОКУМЕНТ: " + Строка(Документ), ПараметрыОбмена);
					
			Результат = Ложь;

		КонецПопытки;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаписьСтатусовИУдалениеЗагруженныхДокументов(ПараметрыОбмена, ДокументXML, ОсновныеНастройкиДокумента, Документ, НовыйДокумент, ДокументОтменен)
	
	Если Документ.Ссылка.Пустая() Тогда
		Возврат
	КонецЕсли;
	
	Если НЕ ДокументXML.ЗначенияРеквизитов = Неопределено тогда
		
		НаборЗаписей = РегистрыСведений.КатегорииОбъектов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.установить(Документ.Ссылка); 
		НовСтр = НаборЗаписей.Добавить();
		НовСтр.Объект 		= Документ.Ссылка;
		НовСтр.Категория 	= Справочники.КатегорииОбъектов.ЗаказСWEBСайта;
		
		Для каждого ТекЗначениеРеквизита из ДокументXML.ЗначенияРеквизитов Цикл
			
			Если ТекЗначениеРеквизита.Наименование = "Заказ оплачен" И ТекЗначениеРеквизита.Значение = "true" тогда
				НовСтр = НаборЗаписей.Добавить();
				НовСтр.Объект 		= Документ.Ссылка;
				НовСтр.Категория 	= Справочники.КатегорииОбъектов.СостояниеЗаказаНаWEBСайтеОплачен;
				
			ИначеЕсли ТекЗначениеРеквизита.Наименование = "Доставка разрешена" И ТекЗначениеРеквизита.Значение = "true" тогда
				НовСтр = НаборЗаписей.Добавить();
				НовСтр.Объект 		= Документ.Ссылка;
				НовСтр.Категория 	= Справочники.КатегорииОбъектов.СостояниеЗаказаНаWEBСайтеДоставкаРазрешена;
			ИначеЕсли ТекЗначениеРеквизита.Наименование = "Отменен" И ТекЗначениеРеквизита.Значение = "true" тогда
				НовСтр = НаборЗаписей.Добавить();
				НовСтр.Объект 		= Документ.Ссылка;
				НовСтр.Категория 	= Справочники.КатегорииОбъектов.СостояниеЗаказаНаWEBСайтеОтменен;
			ИначеЕсли ТекЗначениеРеквизита.Наименование = "Финальный статус" И ТекЗначениеРеквизита.Значение = "true" тогда
				НовСтр = НаборЗаписей.Добавить();
				НовСтр.Объект 		= Документ.Ссылка;
				НовСтр.Категория 	= Справочники.КатегорииОбъектов.СостояниеЗаказаНаWEBСайтеЗавершен;
			КонецЕсли;	
		КонецЦикла;
			
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
	Если ОсновныеНастройкиДокумента.Документ = "ЗаказПокупателя" тогда
		
		МенеджерВременныхТаблицСвойств 	= Новый МенеджерВременныхТаблиц;
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблицСвойств;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СвойстваОбъектов.Ссылка,
		|	СвойстваОбъектов.ТипЗначения,
		|	СвойстваОбъектов.Наименование КАК Наименование
		|ПОМЕСТИТЬ ВремДопРеквизиты
		|ИЗ
		|	ПланВидовХарактеристик.СвойстваОбъектов КАК СвойстваОбъектов
		|ГДЕ
		|	НЕ СвойстваОбъектов.ПометкаУдаления
		|	И СвойстваОбъектов.НазначениеСвойства = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документ_ЗаказПокупателя)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Наименование";
		Запрос.Выполнить();
		
		Для каждого ТекЗначениеРеквизита из ДокументXML.ЗначенияРеквизитов Цикл
			
			СвойствоСтрокой = ТекЗначениеРеквизита.Наименование;
			Значение = ТекЗначениеРеквизита.Значение;
			
			
			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблицСвойств;
			Запрос.Текст ="ВЫБРАТЬ *
			|ИЗ
			|	ВремДопРеквизиты КАК ВремДопРеквизиты
			|ГДЕ
			|	ВремДопРеквизиты.Наименование = &Наименование";
			Запрос.УстановитьПараметр("Наименование", СвойствоСтрокой);
			
			Свойство = НеОпределено;
			
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				Если Выборка.ТипЗначения = Новый ОписаниеТипов("Строка") Тогда
					Свойство = Выборка.Ссылка;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если Свойство = НеОпределено Тогда
				
				СвойствоОбъект 	= ПланыВидовХарактеристик.СвойстваОбъектов.СоздатьЭлемент();
				СвойствоОбъект.Наименование 		= СвойствоСтрокой;
				СвойствоОбъект.ТипЗначения 			= Новый ОписаниеТипов("Строка");
				СвойствоОбъект.Б_Идентификатор 		= "СвойствоЗаказа";
				СвойствоОбъект.НазначениеСвойства 	= ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документ_ЗаказПокупателя;
				СвойствоОбъект.Записать();
				Свойство = СвойствоОбъект.Ссылка;
				
			КонецЕсли;
			
			НоваяЗапись = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
			НоваяЗапись.Объект 		= Документ.Ссылка;
			НоваяЗапись.Значение 	= Значение;
			НоваяЗапись.Свойство 	= Свойство;
			НоваяЗапись.Записать();
			
		КонецЦикла;
		
		МенеджерВременныхТаблицСвойств.Закрыть();
		
	КонецЕсли;
	
	Если Не НовыйДокумент и ДокументОтменен Тогда
		
		Документ.Б_НомерВерсии = ДокументXML.НомерВерсии;	
		
		Если ОсновныеНастройкиДокумента.ДействияСОтмененнымиДокументами = "Помечать на удаление" тогда
			ДействияСОтмененнымиДокументами	= 0;
		ИначеЕсли ОсновныеНастройкиДокумента.ДействияСОтмененнымиДокументами = "Отменять проведение" тогда
			ДействияСОтмененнымиДокументами	= 1;
		ИначеЕсли ОсновныеНастройкиДокумента.ДействияСОтмененнымиДокументами = "Закрывать" тогда
			ДействияСОтмененнымиДокументами	= 2;
		Иначе
			ДействияСОтмененнымиДокументами	= 3;
		КонецЕсли;
		
		Если ДействияСОтмененнымиДокументами = 3 Тогда // Ничего
			
		ИначеЕсли ДействияСОтмененнымиДокументами = 0 Тогда // Удалять
			Если НЕ Документ.ПометкаУдаления Тогда
				Документ.ПометкаУдаления = Истина;
				Попытка
					Документ.Записать(РежимЗаписиДокумента.ОтменаПроведения);
					Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Помечен на удаление документ: " + Строка(Документ), ПараметрыОбмена);
				Исключение
					Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Ошибка при установке пометки на удаление документа: " + Строка(Документ) + Символы.ПС + ОписаниеОшибки(), ПараметрыОбмена);
				КонецПопытки;
			КонецЕсли;
		ИначеЕсли ДействияСОтмененнымиДокументами = 2 Тогда // Отменяем
			Информация = "";
			
			Если ОсновныеНастройкиДокумента.Документ = "ЗаказПокупателя" тогда

				
				Если ЗакрытьЗаказы(ПараметрыОбмена, Документ, Информация) Тогда
					Если НЕ ПустаяСтрока(Информация) Тогда
						Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Сформирован и проведен документ " + Информация, ПараметрыОбмена);
					КонецЕсли;	
				Иначе	
					Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно(Информация + Символы.ПС + ОписаниеОшибки(), ПараметрыОбмена);
				КонецЕсли;
				
			КонецЕсли;
		ИначеЕсли ДействияСОтмененнымиДокументами = 1 Тогда // отменять
			Если Документ.Проведен Тогда
				Попытка
					Документ.Записать(РежимЗаписиДокумента.ОтменаПроведения);
					Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Отменено проведение у документа: " + Строка(Документ), ПараметрыОбмена);
				Исключение
					Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Ошибка при отмене проведения документа: " + Строка(Документ) + Символы.ПС + ОписаниеОшибки(), ПараметрыОбмена);
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПланыОбмена.УдалитьРегистрациюИзменений(Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьМассивУзлов(), Документ.Ссылка);
	
КонецПроцедуры

Функция ПолучитьБанковскийСчетКонтрагента(ПараметрыОбмена, ДокОбъект, БанковскиеСчета)
	
	Результат = Справочники.БанковскиеСчета.ПустаяСсылка();
	
	Если БанковскиеСчета <> Неопределено тогда
		
		Для каждого ТекБанковскийСчет из БанковскиеСчета Цикл
			
			НомерСчета = СтрЗаменить(ТекБанковскийСчет.НомерСчета, " ", "");
			Если ПустаяСтрока(НомерСчета) Тогда
				Продолжить;
			КонецЕсли;
			
			Банк 		= СоздатьНайтиБанк(ПараметрыОбмена, ТекБанковскийСчет.Банк);    
			БанкКорр 	= СоздатьНайтиБанк(ПараметрыОбмена, ТекБанковскийСчет.БанкДляРасчетов);    
			
			Запрос 		= Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	БанковскиеСчета.Ссылка
			|ИЗ
			|	Справочник.БанковскиеСчета КАК БанковскиеСчета
			|ГДЕ
			|	БанковскиеСчета.Владелец = &Владелец
			|	И БанковскиеСчета.НомерСчета = &НомерСчета
			|	И БанковскиеСчета.Банк = &Банк
			|	И БанковскиеСчета.БанкДляРасчетов = &БанкКорр");
			Запрос.УстановитьПараметр("Владелец", ДокОбъект.Контрагент);
			Запрос.УстановитьПараметр("НомерСчета", НомерСчета);
			Запрос.УстановитьПараметр("Банк", Банк);
			Запрос.УстановитьПараметр("БанкКорр", БанкКорр);
			
			тзнСчетов = запрос.Выполнить().Выгрузить();
			Если тзнСчетов.Количество() > 0 тогда
				Возврат тзнСчетов[0].Ссылка;	
			КонецЕсли;
			
			СчетОбъект = Справочники.БанковскиеСчета.СоздатьЭлемент();
			СчетОбъект.Банк 			= Банк;
			СчетОбъект.БанкДляРасчетов 	= БанкКорр;
			СчетОбъект.ВидСчета 		= "Расчетный";
			СчетОбъект.ВалютаДенежныхСредств = Константы.ВалютаРегламентированногоУчета.Получить();
			СчетОбъект.Владелец 		= ДокОбъект.Контрагент;
			СчетОбъект.Наименование 	= Банк.Наименование + " (" + СчетОбъект.ВидСчета + ")";
			СчетОбъект.НомерСчета 		= НомерСчета;
			
			Попытка
				СчетОбъект.Записать();
				Результат = СчетОбъект.Ссылка;
			Исключение
				Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно(ОписаниеОшибки(), ПараметрыОбмена);
				Продолжить;
			КонецПопытки;
			
			Если НЕ ЗначениеЗаполнено(ДокОбъект.Контрагент.ОсновнойБанковскийСчет) Тогда
				СчетСсылка 			= СчетОбъект.Ссылка;
				КонтрагентОбъект 	= ДокОбъект.Контрагент.ПолучитьОбъект();
				КонтрагентОбъект.ОсновнойБанковскийСчет = СчетСсылка;
				Попытка
					КонтрагентОбъект.Записать();
				Исключение
					Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно(ОписаниеОшибки(), ПараметрыОбмена);
					Продолжить;
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СоздатьНайтиБанк(ПараметрыОбмена, Банк)
	
	Результат = Справочники.Банки.ПустаяСсылка();
	Если Банк <> Неопределено тогда
		БИК = СтрЗаменить(Банк.БИК, " ", "");
		Если ПустаяСтрока(БИК) Тогда
			Возврат Результат;
		КонецЕсли;
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Банки.Ссылка
		|ИЗ
		|	Справочник.Банки КАК Банки
		|ГДЕ
		|	Банки.Код = &БИК");
		Запрос.УстановитьПараметр("БИК", БИК);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			БанкОбъект = Справочники.Банки.СоздатьЭлемент();
			БанкОбъект.Код = БИК;
			БанкОбъект.КоррСчет = СтрЗаменить(Банк.СчетКорреспондентский, " ", "");
			БанкОбъект.Наименование = СокрЛП(Банк.Наименование);
			БанкОбъект.Адрес = СокрЛП(Банк.Адрес);
			Попытка
				БанкОбъект.Записать();
			Исключение
				Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно(ОписаниеОшибки(), ПараметрыОбмена);
				Возврат Результат;
			КонецПопытки;
			Результат = БанкОбъект.Ссылка;
		Иначе
			Результат = РезультатЗапроса.Выгрузить()[0][0];
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Функция РассчитатьСуммуСУчетомСкидок(СтрокаТовара);
	
	Сумма = СтрокаТовара.Сумма;
	СуммаСкидки = 0;
	Если СтрокаТовара.Скидки <> Неопределено тогда
		Для Каждого СтрокаСкидки Из СтрокаТовара.Скидки Цикл
			
			Если ЗначениеЗаполнено(СтрокаСкидки.Сумма) И НЕ СтрокаСкидки.УчтеноВСумме Тогда
				
				СуммаСкидки = СуммаСкидки + СтрокаСкидки.Сумма;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Сумма = Сумма - СуммаСкидки;
	
	Возврат Сумма;
	
КонецФункции

Функция РассчитатьСуммуБезУчетаСкидок(СтрокаТовара);
	
	Сумма = СтрокаТовара.Сумма;
	СуммаСкидки = 0;
	Если СтрокаТовара.Скидки <> Неопределено тогда
		Для Каждого СтрокаСкидки Из СтрокаТовара.Скидки Цикл
			
			Если ЗначениеЗаполнено(СтрокаСкидки.Сумма) И СтрокаСкидки.УчтеноВСумме Тогда
				
				СуммаСкидки = СуммаСкидки + СтрокаСкидки.Сумма;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Сумма = Сумма + СуммаСкидки;
	
	Возврат Сумма;
	
КонецФункции

Процедура РаспределитьСуммуПоКолонке(ДокументОбъект, Товары, ИмяТабЧасти, СуммаРаспределения)	
	
	МассивДанныхКолонки = Товары.ВыгрузитьКолонку("Сумма");
	
	МассивРаспределения = ОбщегоНазначения.РаспределитьПропорционально(СуммаРаспределения, МассивДанныхКолонки);
	
	Если МассивРаспределения = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	мТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
	
	Индекс = 0;
	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		
		СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Сумма + МассивРаспределения[Индекс];
		ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, мТекущийПользователь ,,истина, ,истина, ИмяТабЧасти);
		
		Индекс = Индекс + 1;
	КонецЦикла;
	
КонецПроцедуры

Функция ЗакрытьЗаказы(ПараметрыОбмена, ЗаказПокупателя, Информация)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЗакрытиеЗаказовПокупателейЗаказы.Ссылка,
	|	ЗакрытиеЗаказовПокупателейЗаказы.ЗаказПокупателя
	|ИЗ
	|	Документ.ЗакрытиеЗаказовПокупателей.Заказы КАК ЗакрытиеЗаказовПокупателейЗаказы
	|ГДЕ
	|	ЗакрытиеЗаказовПокупателейЗаказы.Ссылка.Проведен
	|	И ЗакрытиеЗаказовПокупателейЗаказы.ЗаказПокупателя = &ЗаказПокупателя");
	
	Запрос.УстановитьПараметр("ЗаказПокупателя", ЗаказПокупателя.ссылка);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		МассивЗакрытыхЗаказов = Новый Массив;
	Иначе
		МассивЗакрытыхЗаказов = Результат.Выгрузить().ВыгрузитьКолонку("ЗаказПокупателя");
	КонецЕсли;
	
	Док = Документы.ЗакрытиеЗаказовПокупателей.СоздатьДокумент();
	Док.ВидОперации		= Перечисления.ВидыОперацийЗакрытиеЗаказовПокупателей.ЗакрытиеЗаказов;
	Док.Дата 			= ТекущаяДата();
	Док.Комментарий 	= "Создан автоматически при обмене с сайтом";
	Док.Ответственный 	= глЗначениеПеременной("глТекущийПользователь");
	Док.Подразделение 	= ЗаказПокупателя.Подразделение;

	
	Если НЕ МассивЗакрытыхЗаказов.Найти(ЗаказПокупателя.Ссылка) = НеОпределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	НовСтрока = Док.Заказы.Добавить();
	
	НовСтрока.ЗаказПокупателя = ЗаказПокупателя.Ссылка;
	
	НовСтрока.ПричинаЗакрытияЗаказа = ПараметрыОбмена.ПричинаОтменыЗаказа;
	
	Если Док.Заказы.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Попытка
		Док.Записать(РежимЗаписиДокумента.Проведение);
		Информация = Строка(Док);
	Исключение
		Информация = "Не удалось провести документ " + Док + " по причине: " + ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции
