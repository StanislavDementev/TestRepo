

			///////////////////////////////////////////////////////////////////
			//		    ПРОЦЕДУРЫ И ФУНКЦИИ ПО РАБОТЕ С ВЕРСИЯМИ МОДУЛЕЙ    //
			/////////////////////////////////////////////////////////////////

Функция ПолучитьСлужебноеНазваниеКонфигурации() Экспорт
	
	Возврат "UT 10.3";
	//Возврат "UT 11";
	
КонецФункции

Функция ПолучитьЛокализациюКонфигурации() Экспорт
	//UKR
	//BEL
	//KAZ
	Возврат "RUS";
	
КонецФункции

Функция РазобратьФайлСАктуальнымиВерсиямиМодулей(ИмяФайла) Экспорт
	
	ТзнВерсииМодулей = Новый ТаблицаЗначений;
	ТзнВерсииМодулей.Колонки.Добавить("НаименованиеКонфигурации");
	ТзнВерсииМодулей.Колонки.Добавить("РелизКонфигурации");
	ТзнВерсииМодулей.Колонки.Добавить("НаименованиеМодуля");
	ТзнВерсииМодулей.Колонки.Добавить("ВерсияМодуля");
	ТзнВерсииМодулей.Колонки.Добавить("Локализация");
	ТзнВерсииМодулей.Колонки.Добавить("Ссылка");
	ТзнВерсииМодулей.Колонки.Добавить("История");
		
	Чтение = новый ЧтениеXML;
	Чтение.ОткрытьФайл(сокрЛП(ИмяФайла));
	Modules 		= Ложь;
	Location        = Ложь;
	Link       		= Ложь;
	Module 	 		= Ложь;
	Name1C 			= Ложь;
	Version1C 		= Ложь;
	NameModule 		= Ложь;
	VersionModule 	= Ложь;
	
	History 		= Ложь;
	HModule 		= Ложь;
	HVersionModule 	= Ложь;
	HDescriptions 	= Ложь;

	Пока Чтение.Прочитать() Цикл
		
		Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента И НЕ History И Чтение.Имя = "Modules" Тогда
			Modules = Истина;
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента И НЕ History И Чтение.Имя = "Modules" тогда
			Modules = Ложь;
		КонецЕсли;
		
		Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента И НЕ History И Чтение.Имя = "Module" И Modules Тогда
			Module = Истина;
			НовСтрока = ТзнВерсииМодулей.Добавить();
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента И НЕ History И Чтение.Имя = "Module" И Modules Тогда 	
			Module = Ложь;
		КонецЕсли;
		
		Если Modules И Module И НЕ History тогда
			
			Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента И Чтение.Имя = "Name1C" Тогда
				Name1C = Истина;
			ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента И Чтение.Имя = "Name1C" тогда
				Name1C = Ложь;
			КонецЕсли;
			
			Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента И Чтение.Имя = "Version1C" Тогда
				Version1C = Истина;
			ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента И Чтение.Имя = "Version1C" тогда
				Version1C = Ложь;
			КонецЕсли;
			
			Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента И Чтение.Имя = "NameModule" Тогда
				NameModule = Истина;
			ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента И Чтение.Имя = "NameModule" тогда
				NameModule = Ложь;
			КонецЕсли;
			
			Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента И Чтение.Имя 	= "VersionModule" Тогда
				VersionModule = Истина;
			ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента И Чтение.Имя = "VersionModule" тогда
				VersionModule = Ложь;
			КонецЕсли;
			
			Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента И Чтение.Имя 	= "Location" Тогда
				Location = Истина;
			ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента И Чтение.Имя = "Location" тогда
				Location = Ложь;
			КонецЕсли;
			
			Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента И Чтение.Имя 	= "Link" Тогда
				Link = Истина;
			ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента И Чтение.Имя = "Link" тогда
				Link = Ложь;
			КонецЕсли;
			
			Если Name1C И Чтение.Имя = "#text" тогда
				НовСтрока.НаименованиеКонфигурации = Чтение.Значение;
			КонецЕсли;
			
			Если Version1C И Чтение.Имя = "#text" тогда
				НовСтрока.РелизКонфигурации = Чтение.Значение;
			КонецЕсли;
			
			Если NameModule И Чтение.Имя = "#text" тогда
				НовСтрока.НаименованиеМодуля = Чтение.Значение;
			КонецЕсли;
			
			Если VersionModule И Чтение.Имя = "#text" тогда
				НовСтрока.ВерсияМодуля = Чтение.Значение;
			КонецЕсли;
			
			Если Location И Чтение.Имя = "#text" тогда
				НовСтрока.Локализация = Чтение.Значение;
			КонецЕсли;
			
			Если Link И Чтение.Имя = "#text" тогда
				НовСтрока.Ссылка = Чтение.Значение;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента И Чтение.Имя 	= "History" Тогда
			
			History = Истина;
			
			тзнИстории = Новый ТаблицаЗначений;
			тзнИстории.Колонки.Добавить("ВерсияМодуля"); 
			тзнИстории.Колонки.Добавить("Описание"); 
			
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента И Чтение.Имя = "History" тогда
			
			History = Ложь;
			
			НовСтрока.История = тзнИстории;
			
		КонецЕсли;
			
		Если  Modules И Module И History тогда
			
			Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента И Чтение.Имя 	= "Module" Тогда
				
				HModule = Истина;
				
				НовИстрия = тзнИстории.Добавить();	

			ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента И Чтение.Имя = "Module" тогда
				HModule = Ложь;
			КонецЕсли;
			
			Если  Modules И Module И History И HModule тогда
				
				Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента И Чтение.Имя 	= "VersionModule" Тогда
					HVersionModule = Истина;
				ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента И Чтение.Имя = "VersionModule" тогда
					HVersionModule = Ложь;
				КонецЕсли;
				
				Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента И Чтение.Имя 	= "Descriptions" Тогда
					HDescriptions = Истина;
				ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента И Чтение.Имя = "Descriptions" тогда
					HDescriptions = Ложь;
				КонецЕсли;
				
				Если HVersionModule И Чтение.Имя = "#text" тогда
					НовИстрия.ВерсияМодуля = Чтение.Значение;
				КонецЕсли;
				
				Если HDescriptions И Чтение.Имя = "#text" тогда
					НовИстрия.Описание = Чтение.Значение;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТзнВерсииМодулей;
	
КонецФункции

Функция РазобратьВерсиюМодуля4(ВерсияМодуля)
		
	СтруктураРазбора = Новый Структура;
	СтруктураРазбора.Вставить("МажорнаяВерсия"	, 0);
	СтруктураРазбора.Вставить("МинорнаяВерсия"	, 0);
	СтруктураРазбора.Вставить("Релиз"			, 0);
	СтруктураРазбора.Вставить("Сборка"			, 0);

	ДлинаВерсии = СтрДлина(ВерсияМодуля);	
	
	Ряд = 1;
	Версия = "";
	Для Пер = 1 по ДлинаВерсии Цикл
		
		Сим = Сред(ВерсияМодуля, Пер,1);
		
		Если Сим = "." тогда
			
			Если Ряд = 1 тогда
				СтруктураРазбора.МажорнаяВерсия = Число(Версия); 	
			ИначеЕсли Ряд = 2 тогда
				СтруктураРазбора.МинорнаяВерсия = Число(Версия); 	
			ИначеЕсли Ряд = 3 тогда
				СтруктураРазбора.Релиз 			= Число(Версия); 	
			КонецЕсли;
			
			Ряд 	= Ряд + 1;
			Версия 	= "";
			
		Иначе
			Версия 	= Версия + Сим;	
			
			Если Пер = ДлинаВерсии тогда
				СтруктураРазбора.Сборка 		= Число(Версия); 	
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураРазбора;
	
КонецФункции

Функция ПроверитьАктуальностьТекущегоМодуля4(ВерсияТекущегоМодуля, ВерсияАктуальногоМодуля) Экспорт
	
	Результат = Истина;
	
	РазобранаяВерсияТекущегоМодуля 		= РазобратьВерсиюМодуля4(ВерсияТекущегоМодуля);
	РазобранаяВерсияАктуальногоМодуля 	= РазобратьВерсиюМодуля4(ВерсияАктуальногоМодуля);
	
	Если  РазобранаяВерсияТекущегоМодуля.МажорнаяВерсия < РазобранаяВерсияАктуальногоМодуля.МажорнаяВерсия тогда
		Результат = Ложь;
	ИначеЕсли РазобранаяВерсияТекущегоМодуля.МажорнаяВерсия = РазобранаяВерсияАктуальногоМодуля.МажорнаяВерсия тогда
		
		Если  РазобранаяВерсияТекущегоМодуля.МинорнаяВерсия < РазобранаяВерсияАктуальногоМодуля.МинорнаяВерсия тогда
			Результат = Ложь;	
		ИначеЕсли  РазобранаяВерсияТекущегоМодуля.МинорнаяВерсия = РазобранаяВерсияАктуальногоМодуля.МинорнаяВерсия тогда

			Если  РазобранаяВерсияТекущегоМодуля.Релиз < РазобранаяВерсияАктуальногоМодуля.Релиз тогда
				Результат = Ложь;	
			ИначеЕсли  РазобранаяВерсияТекущегоМодуля.Релиз = РазобранаяВерсияАктуальногоМодуля.Релиз тогда
				Если  РазобранаяВерсияТекущегоМодуля.Сборка < РазобранаяВерсияАктуальногоМодуля.Сборка тогда
					Результат = Ложь;	
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции

Функция Версия() Экспорт
	Возврат "5.0.0.5";
КонецФункции

Функция ПроверкаОбновленияДанныхМодуляОбменаССайтом(ОсновныеПараметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Версия = Версия();
	
	ПредыдущаяВерсия = Константы.Б_НомерВерсииМодуляОбменаССайтом.Получить();
	
	ПервыйЗапуск = НЕ ПредыдущаяВерсия = Версия;
	
	Если НЕ ПервыйЗапуск Тогда
		Возврат Истина;
	КонецЕсли;
	
	
	Пока Константы.Б_НомерВерсииМодуляОбменаССайтом.Получить() <> Версия Цикл
		
		ПредыдущаяВерсия = Константы.Б_НомерВерсииМодуляОбменаССайтом.Получить();
		
		Если ПредыдущаяВерсия = "" Тогда
			
			Результат = ОбновлениеДоВерсии5_0_0_1(ОсновныеПараметры);
			
			Если Результат = Истина тогда
				Константы.Б_НомерВерсииМодуляОбменаССайтом.Установить("5.0.0.1");
			Иначе
				Возврат Результат;
			КонецЕсли;
		ИначеЕсли ПредыдущаяВерсия = "5.0.0.1" тогда
			СообщитьПодробно("Обновление с версии 5.0.0.1 до 5.0.0.2.", ОсновныеПараметры);	
		    Константы.Б_НомерВерсииМодуляОбменаССайтом.Установить("5.0.0.2");
		ИначеЕсли ПредыдущаяВерсия = "5.0.0.2" тогда
			СообщитьПодробно("Обновление с версии 5.0.0.2 до 5.0.0.3.", ОсновныеПараметры);	
		    Константы.Б_НомерВерсииМодуляОбменаССайтом.Установить("5.0.0.3");
		ИначеЕсли ПредыдущаяВерсия = "5.0.0.3" тогда
			СообщитьПодробно("Обновление с версии 5.0.0.3 до 5.0.0.4.", ОсновныеПараметры);	
		    Константы.Б_НомерВерсииМодуляОбменаССайтом.Установить("5.0.0.4");
		ИначеЕсли ПредыдущаяВерсия = "5.0.0.4" Тогда
			
			Результат = ОбновлениеДоВерсии5_0_0_5(ОсновныеПараметры);
			
			Если Результат = Истина тогда
				Константы.Б_НомерВерсииМодуляОбменаССайтом.Установить("5.0.0.5");
			Иначе
				Возврат Результат;
			КонецЕсли;

		Иначе 
		    Константы.Б_НомерВерсииМодуляОбменаССайтом.Установить(Версия);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ОбновлениеДоВерсии5_0_0_1(ОсновныеПараметры)
	
	СообщитьПодробно("Начало обновления до версии 4.0.0.1.", ОсновныеПараметры);	
	
	МассивРегистров = Новый Массив;
	МассивРегистров.Добавить("РИ_ИдентификаторыНоменклатурыБитрикс");
	МассивРегистров.Добавить("РИ_ИдентификаторыХарактеристикНоменклатурыБитрикс");
	МассивРегистров.Добавить("РИ_ИдентификаторыСвойствНоменклатурыБитрикс");
	МассивРегистров.Добавить("РИ_ИдентификаторыЗначенийСвойствНоменклатурыБитрикс");
	МассивРегистров.Добавить("РИ_ИдентификаторыКонтрагентовБитрикс");
	             
	Попытка
	
		Для каждого ТекЗначение из МассивРегистров Цикл
			
			Регистр = Метаданные.РегистрыСведений.Найти(ТекЗначение);
			Если Регистр <> Неопределено тогда
				
				СообщитьПодробно("Перенос идентификторов Битрикс из регистра сведений " + ТекЗначение + " в общие реквизиты соответствующего объекта.", ОсновныеПараметры);	
				Выборка = РегистрыСведений[ТекЗначение].Выбрать();
				
				Пока Выборка.Следующий() Цикл
					
					Если Выборка.Объект.Б_Идентификатор = "" тогда 
					
						Объект = Выборка.Объект.ПолучитьОбъект();
						Объект.Б_Идентификатор = Выборка.Идентификатор;
						Объект.Записать();
					Конецесли;
					
				КонецЦикла;
				
			КонецЕсли;
				
		КонецЦикла;
	
		СообщитьПодробно("Обновление до версии 4.0.0.1 завершено.", ОсновныеПараметры);
		Возврат Истина;
		
	Исключение
		
		СообщитьПодробно("Обновление до версии 4.0.0.1 завершено с ошибками. Продолжение обмена невозможно.", ОсновныеПараметры);
		Возврат Ложь;
		
	КонецПопытки;

КонецФункции


Функция ОбновлениеДоВерсии5_0_0_5(ОсновныеПараметры)
	
	СообщитьПодробно("Начало обновления до версии 5.0.0.5.", ОсновныеПараметры);	
	
	Попытка
		
		Выборка = ПланыОбмена.Б_ОбменССайтом.Выбрать();
		
		Пока Выборка.Следующий() Цикл 
			
			Если Выборка.Ссылка <> ПланыОбмена.Б_ОбменССайтом.ЭтотУзел() тогда
				лУзелОбмена = Выборка.ПолучитьОбъект();
				лСохраненныеНастройки = лУзелОбмена.СохраненныеНастройки.Получить();
				
				Если НЕ лСохраненныеНастройки.ИнформацияОНоменклатуре.Свойство("ВыгружатьКартинкиИФайлыПредложений") тогда
					лСохраненныеНастройки.ИнформацияОНоменклатуре.Вставить("ВыгружатьКартинкиИФайлыПредложений", Ложь);
				КонецЕсли;
				
				лУзелОбмена.СохраненныеНастройки = Новый ХранилищеЗначения(лСохраненныеНастройки);
				лУзелОбмена.Записать();
			КонецЕсли;
			
		КонецЦикла;
		
		СообщитьПодробно("Обновление до версии 5.0.0.5 завершено.", ОсновныеПараметры);
		Возврат Истина;
		
	Исключение
		
		СообщитьПодробно("Обновление до версии 5.0.0.5 завершено с ошибками. Продолжение обмена невозможно.", ОсновныеПараметры);
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции



			///////////////////////////////////////////////////////////////////
			//		    ПРОЦЕДУРЫ И ФУНКЦИИ С ПОДПИСКОЙ НА СОБЫТИЯ          //
			/////////////////////////////////////////////////////////////////

Процедура ЗарегистрироватьИзмененияПриКопированииСправочниковДокументов(Источник, Отказ) Экспорт
	
	лМетаданные = Источник.Метаданные();
	ПризнакИспользованияОР 	= Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать;
	
	Если Метаданные.ОбщиеРеквизиты.Б_Идентификатор.Состав.Найти(лМетаданные).Использование = ПризнакИспользованияОР тогда
		Источник.Б_Идентификатор = "";
	КонецЕсли;
	
	Если Метаданные.ОбщиеРеквизиты.Б_НомерВерсии.Состав.Найти(лМетаданные).Использование = ПризнакИспользованияОР тогда
		Источник.Б_НомерВерсии = "";
	КонецЕсли;
	
	Если Метаданные.ОбщиеРеквизиты.Б_ДатаДокумента.Состав.Найти(лМетаданные).Использование = ПризнакИспользованияОР тогда
		Источник.Б_ДатаДокумента = "";
	КонецЕсли;
	
КонецПроцедуры
			
Процедура ЗарегистрироватьИзмененияПередЗаписьюРегистраСведенийДляОбменаССайтами(Источник, Отказ, Замещение) Экспорт
	ЗарегистрироватьИзменения(Источник);
КонецПроцедуры

Процедура ЗарегистрироватьИзмененияПриЗаписиСправочникаДокументаДляОбменаССайтами(Источник, Отказ) Экспорт
	ЗарегистрироватьИзменения(Источник);
КонецПроцедуры

Процедура ПриУдаленииПроведенияДокументовДляОбменаССайтомОбработкаУдаленияПроведения(Источник, Отказ) Экспорт
	
	ЗарегистрироватьИзменения(Источник);
	
КонецПроцедуры

функция ПолучитьМассивУзлов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Б_ОбменССайтом.Ссылка КАК Ссылка
	|ИЗ
	|	ПланОбмена.Б_ОбменССайтом КАК Б_ОбменССайтом
	|ГДЕ
	|	(Б_ОбменССайтом.Ссылка <> &ЭтотУзел)	
	|";
	Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.Б_ОбменССайтом.ЭтотУзел());
	МассивУзлов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

	Возврат МассивУзлов; 
	
КонецФункции

// Выборочно регистрирует изменения по узлам планов обмена с сайтом
//
//
// Параметры:
// Объект		- Объект метаданных - источник события
//   
Процедура ЗарегистрироватьИзменения(Объект)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТипОбъекта = ТипЗнч(Объект);
	ТипОбъектаДокумент = Метаданные.Документы.Содержит(Объект.Метаданные());
	
	ИзмененияЗарегестрированы = Ложь;
	
	// Регистрация типовых справочников
	Если ТипОбъекта = Тип("СправочникОбъект.ИнформационныеКарты") 
		ИЛИ ТипОбъекта = Тип("ПланВидовХарактеристикОбъект.СвойстваОбъектов")     
		ИЛИ ТипОбъекта = Тип("ДокументОбъект.УстановкаСкидокНоменклатуры") Тогда
		
		ИзмененияЗарегестрированы = Истина;
		
		МассивУзлов = ПолучитьМассивУзлов();

		ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Объект.Ссылка);
		
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.Номенклатура")
		ИЛИ ТипОбъекта = Тип("СправочникОбъект.Контрагенты")   		 
		ИЛИ ТипОбъекта = Тип("СправочникОбъект.КлассификаторЕдиницИзмерения") тогда
		
		ИзмененияЗарегестрированы = Истина;
		
		МассивУзлов = ПолучитьМассивУзлов();

		ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Объект.Ссылка);
		
		ПроверитьОбъектНаУчастиеВСвойствахИДобавитьСвойствоВУзел(МассивУзлов, ТипЗнч(Объект.Ссылка));	
		
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.ФизическиеЛица") 
		ИЛИ ТипОбъекта = Тип("СправочникОбъект.ЗначенияСвойствОбъектов")
		ИЛИ ТипОбъекта = Тип("СправочникОбъект.Организации")
		ИЛИ ТипОбъекта = Тип("СправочникОбъект.Пользователи")
		ИЛИ ТипОбъекта = Тип("СправочникОбъект.Подразделения")
		ИЛИ ТипОбъекта = Тип("СправочникОбъект.КлассификаторСтранМира")
		ИЛИ ТипОбъекта = Тип("СправочникОбъект.Валюты")
		ИЛИ ТипОбъекта = Тип("СправочникОбъект.КонтактныеЛица")
		ИЛИ ТипОбъекта = Тип("СправочникОбъект.Склады")
		ИЛИ ТипОбъекта = Тип("СправочникОбъект.КонтактныеЛицаКонтрагентов") 
		ИЛИ ТипОбъекта = Тип("СправочникОбъект.НоменклатурныеГруппы") Тогда
		
		МассивУзлов = ПолучитьМассивУзлов();
		
		ПроверитьОбъектНаУчастиеВСвойствахИДобавитьСвойствоВУзел(МассивУзлов, ТипЗнч(Объект.Ссылка));	
		
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.ХранилищеДополнительнойИнформации") Тогда
		
		ИзмененияЗарегестрированы = Истина;
		
		Если ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.Номенклатура") Тогда
			
			МассивУзлов = ПолучитьМассивУзлов();
	
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Объект.Объект);
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Объект.Ссылка);
			
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.Б_ХарактеристикиНоменклатурыПрисоединенныеФайлы") Тогда
		
		ИзмененияЗарегестрированы = Истина;
		
		МассивУзлов = ПолучитьМассивУзлов();
	
		Если ТипЗнч(Объект.Владелец) = Тип("СправочникСсылка.ХарактеристикиНоменклатуры") Тогда 
			
			МассивУзлов = ПолучитьМассивУзлов();
	
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Объект.Владелец.Владелец);
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Объект.Ссылка);
			
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.ХарактеристикиНоменклатуры")Тогда			
		
		ИзмененияЗарегестрированы = Истина;
		
		Если ТипЗнч(Объект.Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда 
			
			МассивУзлов = ПолучитьМассивУзлов();
	
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Объект.Владелец);
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Объект);
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.ЦеновыеГруппы") Тогда
		
		ИзмененияЗарегестрированы = Истина;
		
		МассивУзлов = ПолучитьМассивУзлов();

		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Номенклатура.Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.ЦеноваяГруппа В ИЕРАРХИИ(&ЦеноваяГруппа)");
		
		Запрос.УстановитьПараметр("ЦеноваяГруппа", Объект.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Выборка.Ссылка);
			
		КонецЦикла;
		
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.ВидыДисконтныхКарт") Тогда
		
		ИзмененияЗарегестрированы = Истина;
		
		МассивУзловТовары = ПолучитьМассивУзлов();
		
		Запрос = Новый запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИнформационныеКарты.Ссылка КАК КартаЛояльности
		|ИЗ
		|	Справочник.ИнформационныеКарты КАК ИнформационныеКарты
		|ГДЕ
		|	ИнформационныеКарты.ВидДисконтнойКарты = &ВидКарты";
		Запрос.УстановитьПараметр("ВидКарты",Объект.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Выборка.КартаЛояльности);
		КонецЦикла;
		
		ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Объект.Ссылка);
		
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ОтменаСкидокНоменклатуры") Тогда
		
		ИзмененияЗарегестрированы = Истина;
		
		МассивУзловТовары = ПолучитьМассивУзлов();
		
		Для Каждого ТекСтрока из  Объект.Документы Цикл
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, ТекСтрока.УстановкаСкидокНоменклатуры);
		КонецЦикла;
		
	КонецЕсли;
	
	//Регистрация регистров
	Если ТипОбъекта = Тип("РегистрСведенийНаборЗаписей.ЗначенияСвойствОбъектов") Тогда
		
		ИзмененияЗарегестрированы = Истина;
		
		МассивУзлов = ПолучитьМассивУзлов();

		Для каждого Запись Из Объект Цикл
			
			ТипДанных = ТипЗнч(Запись.Объект);
			
			Если ТипДанных = Тип("СправочникСсылка.Номенклатура") Тогда
				ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Запись.Объект);
			ИначеЕсли ТипДанных = Тип("СправочникСсылка.ХарактеристикиНоменклатуры") Тогда
				Если Запись.Объект.ПолучитьОбъект() <> Неопределено Тогда
					ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Запись.Объект.Владелец);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		
	ИначеЕсли ТипОбъекта = Тип("РегистрСведенийНаборЗаписей.НазначенияСвойствОбъектов") Тогда
		
		ИзмененияЗарегестрированы = Истина;
		
		МассивУзлов = ПолучитьМассивУзлов();

		Для каждого Запись Из Объект Цикл
			
			ТипДанных = ТипЗнч(Запись.Объект);
			
			Если ТипДанных = Тип("СправочникСсылка.Номенклатура") Тогда
				ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Запись.Объект);
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ТипОбъекта = Тип("РегистрНакопленияНаборЗаписей.ТоварыНаСкладах")
		ИЛИ ТипОбъекта = Тип("РегистрНакопленияНаборЗаписей.ТоварыВРознице")
		ИЛИ ТипОбъекта = Тип("РегистрНакопленияНаборЗаписей.ТоварыВНТТ")
		ИЛИ ТипОбъекта = Тип("РегистрНакопленияНаборЗаписей.ТоварыВРезервеНаСкладах")
		ИЛИ ТипОбъекта = Тип("РегистрНакопленияНаборЗаписей.ТоварыКПередачеСоСкладов")
		ИЛИ ТипОбъекта = Тип("РегистрСведенийНаборЗаписей.ЦеныНоменклатуры") 
		ИЛИ ТипОбъекта = Тип("РегистрСведенийНаборЗаписей.КомплектующиеНоменклатуры") Тогда
		
		ИзмененияЗарегестрированы = Истина;
		
		МассивУзлов = ПолучитьМассивУзлов();
	
		Для каждого Запись Из Объект Цикл
			
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Запись.Номенклатура);
			
		КонецЦикла;
		
	ИначеЕсли ТипОбъекта = Тип("РегистрСведенийНаборЗаписей.ШтрихКоды") Тогда
		
		ИзмененияЗарегестрированы = Истина;
		
		МассивУзлов = ПолучитьМассивУзлов();
	
		Для каждого Запись Из Объект Цикл
			
			Если ТипЗнч(Запись.Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
				ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Запись.Владелец);
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ТипОбъекта = Тип("РегистрНакопленияНаборЗаписей.ЗаказыПокупателей") Тогда
		
		ИзмененияЗарегестрированы = Истина;
		
		МассивУзлов = ПолучитьМассивУзлов();
	
		Для каждого Запись Из Объект Цикл
			
			Если ТипЗнч(Запись.ЗаказПокупателя) = Тип("ДокументСсылка.ЗаказПокупателя")
				И ЗначениеЗаполнено(Запись.ЗаказПокупателя) Тогда
				
				ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Запись.ЗаказПокупателя);
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ТипОбъекта = Тип("РегистрНакопленияНаборЗаписей.ВзаиморасчетыСКонтрагентами") Тогда
		
		ИзмененияЗарегестрированы = Истина;
		
		МассивУзлов = ПолучитьМассивУзлов();
	
		Для каждого Запись Из Объект Цикл
			
			Если ТипЗнч(Запись.Сделка) = Тип("ДокументСсылка.ЗаказПокупателя")
				И ЗначениеЗаполнено(Запись.Сделка) Тогда
				
				ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Запись.Сделка);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Регистрация документов
	Если ТипОбъекта = Тип("ДокументОбъект.ЗаказПокупателя")Тогда
		
		ИзмененияЗарегестрированы = Истина;
		
		МассивУзлов = ПолучитьМассивУзлов();
	
		ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Объект.Ссылка);
		
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.РеализацияТоваровУслуг") тогда
		
		ИзмененияЗарегестрированы = Истина;
		
		МассивУзлов = ПолучитьМассивУзлов();
	
		Если ЗначениеЗаполнено(Объект.Сделка) тогда
			Если ТипЗнч(Объект.Сделка) = Тип("ДокументОбъект.ЗаказПокупателя") тогда
			    Если ЗначениеЗаполнено(Объект.Сделка.Б_Идентификатор) тогда
					ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Объект.Сделка);
			    КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипОбъектаДокумент Тогда
		
		ИзмененияЗарегестрированы = Истина;
		
		МетаданныеДокумента = Объект.Метаданные();
		
		Если ЕстьТабЧастьДокумента("Товары", МетаданныеДокумента) Тогда
			
			МассивУзлов = ПолучитьМассивУзлов();

			Для каждого СтрокаТЧ Из Объект.Товары Цикл
				Если ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
					ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, СтрокаТЧ.Номенклатура);
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ЕстьТабЧастьДокумента("Заказы", МетаданныеДокумента) Тогда
			
			МассивУзлов = ПолучитьМассивУзлов();

			Для каждого Заказ Из Объект.Заказы Цикл
				Если МетаданныеДокумента.Имя = "ЗакрытиеВнутреннихЗаказов" Тогда
					ИмяРеквизитаТЧ = "ВнутреннийЗаказ";
				Иначе
					ИмяРеквизитаТЧ = "ЗаказПокупателя";
				КонецЕсли;
				Для каждого СтрокаТЧ Из Заказ[ИмяРеквизитаТЧ].Товары Цикл
					Если ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
						ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, СтрокаТЧ.Номенклатура);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ИзмененияЗарегестрированы тогда
		// Регистрация пользовательских справочников
		Попытка
			Выборка = планыОбмена.Б_ОбменССайтом.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				Если Выборка.ОбменПользовательскимиСправочниками Тогда
					
					СохраненныеНастройки = Выборка.СохраненныеНастройки.Получить();
					
					ВремТзн = СохраненныеНастройки.ПользовательскиеСправочники.ВыгружаемыеПоляСправочников.Скопировать();
					ВремТзн.Свернуть("Справочник");

					Для Каждого ТекСправочник из ВремТзн Цикл
						
						Если ТипОбъекта = Тип("СправочникОбъект." + ТекСправочник.Справочник) тогда
							
							ПланыОбмена.ЗарегистрироватьИзменения(Выборка.Ссылка, Объект.Ссылка);
							
						КонецЕсли;
							
					КонецЦикла;
					
				КонецЕсли;
			КонецЦикла;
		Исключение
			Сообщить("Не удалось зарегистрировать изменение для элемента " + Строка(Объект.Ссылка) + ". Элемент не будет отправлен на сайт Битрикс в режиме изенений.");
			Сообщить(ОписаниеОшибки()); 
		КонецПопытки;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);   
	
КонецПроцедуры

Функция ЕстьТабЧастьДокумента(ИмяТабЧасти, МетаданныеДокумента) 

	Если МетаданныеДокумента.ТабличныеЧасти.Найти(ИмяТабЧасти) = Неопределено Тогда
		Возврат Ложь;
	Иначе
		
		Если МетаданныеДокумента.ТабличныеЧасти[ИмяТабЧасти].Реквизиты.Найти("Номенклатура") = Неопределено тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;
	КонецЕсли; 

КонецФункции // ЕстьТабЧастьДокумента()

Функция ПроверитьОбъектНаУчастиеВСвойствахИДобавитьСвойствоВУзел(МассивУзловТовары, ТипОбъекта)
	
	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ
	|	СвойстваОбъектов.ТипЗначения,
	|	СвойстваОбъектов.Ссылка КАК Свойство
	|ИЗ
	|	ПланВидовХарактеристик.СвойстваОбъектов КАК СвойстваОбъектов";
	
	ВыборкаСвойств = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаСвойств.Следующий() Цикл
		
		Если ВыборкаСвойств.ТипЗначения.СодержитТип(ТипОбъекта) тогда
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, ВыборкаСвойств.Свойство);
		КонецЕсли;
		
	КонецЦикла;
	 
КонецФункции



			///////////////////////////////////////////////////////////////////
			//		    ПРОЦЕДУРЫ И ФУНКЦИИ ПО РАБОТЕ С LONG PULLING        //
			/////////////////////////////////////////////////////////////////
			
Процедура ВыполнениеLongPullingФоновыхЗаданий() Экспорт
	
	Если НЕ Сред(СтрокаСоединенияИнформационнойБазы(), 1,4) = "File" тогда
		ВыполнениеLongPulling(Ложь);
	КонецЕсли;
	
КонецПроцедуры
			
Процедура ВыполнениеLongPulling(Клиент = Ложь) Экспорт
	
	Если НЕ Клиент тогда
		НашеРегламентноеЗадание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.Б_ЗаданиеОбменССайтомОнлайн);
		НашеРасписание 			= НашеРегламентноеЗадание.Расписание;
	КонецЕсли;
	
	Выборка = ПланыОбмена.Б_ОбменССайтом.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ОбменВРеальномВремени тогда
			НужныйПлан = Выборка.Ссылка;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НужныйПлан <> Неопределено тогда
		
		Параметры = Новый Структура;
		ДобавитьНастройкиУзлаВПараметры(НужныйПлан, Параметры);
		                
		Продолжаем = Истина;
		
		Пока Продолжаем Цикл
			
			Если НЕ Клиент тогда
				
				ПустаяДата 	= Дата("01.01.0001 0:00:00");
				
				ТекДата  	= НачалоДня(ТекущаяДата());
				ТекВремя 	= ТекущаяДата() - ТекДата;
				
				лВремяНачала= НашеРасписание.ВремяНачала 	- ПустаяДата;
				лВремяКонца = НашеРасписание.ВремяКонца 	- ПустаяДата;
				
				Если  (ТекВремя < лВремяНачала И ЗначениеЗаполнено(НашеРасписание.ВремяНачала)) 
					ИЛИ (ТекущаяДата() < НашеРасписание.ДатаНачала И ЗначениеЗаполнено(НашеРасписание.ВремяНачала))
					ИЛИ (ТекущаяДата() > НашеРасписание.ДатаКонца И ЗначениеЗаполнено(НашеРасписание.ДатаКонца))
					ИЛИ (ТекВремя > лВремяКонца И ЗначениеЗаполнено(НашеРасписание.ВремяКонца)) тогда
					
					Продолжаем = Ложь;
					
				КонецЕсли;
			КонецЕсли;
			
			НастройкиПодключения = Новый Структура;
			
			Если ПолучитьНастройкиПодключения(НастройкиПодключения, Параметры, Параметры.АдресСайта + "?type=listen") Тогда
				
				Результат = ВыполнитьLongPullingРеккурсивно(Параметры, НастройкиПодключения);
				
			КонецЕсли;
			
			#Если Клиент Тогда
				ОбработкаПрерыванияПользователя();
			#КонецЕсли
		
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ВыполнитьLongPullingРеккурсивно(ПараметрыОбмена, НастройкиПодключения)
	
	Соединение = Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьСоединениеССервером(НастройкиПодключения, ПараметрыОбмена);
	
	Если Соединение = Неопределено Тогда
		
		Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Авторизация не выполнена.", ПараметрыОбмена);	
		Возврат Ложь;
		
	КонецЕсли;
	
	ИмяФайлаОтвета = ПолучитьИмяВременногоФайла();
	
	Попытка
		
		ОтветСервера = Соединение.Получить(НастройкиПодключения.АдресСкрипта, ИмяФайлаОтвета);
	Исключение
		
		Б_ОбщиеПроцедурыИФункцииОбменаССайтом.СообщитьПодробно("Не удалось получить данные с сервера на этом подключении в реал-тайм обмене. ", ПараметрыОбмена)
		
	КонецПопытки;
	
	Попытка
		УдалитьФайлы(КаталогВременныхФайлов(), ИмяФайлаОтвета);
	Исключение
	КонецПопытки;
	
	Если ОтветСервера <> Неопределено тогда
		
		Если ОтветСервера.КодСостояния = 200 тогда
			
			Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ВыполнитьОбмен(ПараметрыОбмена.ссылка);
			
		ИначеЕсли ОтветСервера.КодСостояния = 302 тогда
			
			Переадресация = ОтветСервера.заголовки.получить("Location");			
			
			НастройкиПодключенияПереадресации = Новый Структура;
			
			Если Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьНастройкиПодключения(НастройкиПодключенияПереадресации, ПараметрыОбмена, Переадресация) Тогда
				
				Результат = ВыполнитьLongPullingРеккурсивно(ПараметрыОбмена, НастройкиПодключенияПереадресации);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции
                                                         


			///////////////////////////////////////////////////////////////////
			//		    ПРОЦЕДУРЫ И ФУНКЦИИ С РАБОТОЙ XDTO          		//
			/////////////////////////////////////////////////////////////////

Функция ПолучениеТипОбъектаXDTO(ПараметрыОбмена, Объект, Сложный = Ложь, ВладелецТип = Неопределено) Экспорт
	
	Если Сложный тогда
		
		Возврат	ВладелецТип.Свойства.Получить(Объект).Тип;
		
	иначе
		
		Возврат ПараметрыОбмена.МояФабрикаXDTO.Тип(ПараметрыОбмена.ПространствоИмен,Объект);
		
	КонецЕсли;
	
КонецФункции

Процедура ДобавитьЗначениеРеквизитаXDTO(ПараметрыОбмена, ЗначенияРеквизитов, ТипpЗначенияРеквизита, ИмяРеквизита, Значение) Экспорт
	
	ЗначениеРеквизита 	= ПараметрыОбмена.МояФабрикаXDTO.Создать(ТипpЗначенияРеквизита);
	
	ЗначениеРеквизита.Наименование 	= ИмяРеквизита;
	ЗначениеРеквизита.Значение.добавить(XMLСтрока(Значение));
	
	ЗначенияРеквизитов.ЗначениеРеквизита.Добавить(ЗначениеРеквизита);
	
КонецПроцедуры

Функция ПолучитьАдресXDTO(ПараметрыОбмена, ПредставлениеАдреса) Экспорт
	
	XDTOАдресТип 				= ПолучениеТипОбъектаXDTO(ПараметрыОбмена, "Адрес");
	XDTOАдресноеПолеТип 		= ПолучениеТипОбъектаXDTO(ПараметрыОбмена, "АдресноеПоле", Истина, XDTOАдресТип);
	
	XDTOАдрес					= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOАдресТип);
	
	XDTOАдрес.Представление 	= ПредставлениеАдреса.Представление;
	
	Если ЗначениеЗаполнено(ПредставлениеАдреса.Поле1) тогда
		ДобавитьАдресноеПолеXDTO(ПараметрыОбмена, XDTOАдрес, XDTOАдресноеПолеТип, "Почтовый индекс", ПредставлениеАдреса.Поле1);	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПредставлениеАдреса.Поле1) тогда
		ДобавитьАдресноеПолеXDTO(ПараметрыОбмена, XDTOАдрес, XDTOАдресноеПолеТип, "Страна", ПредставлениеАдреса.Поле1);	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПредставлениеАдреса.Поле2) тогда
		ДобавитьАдресноеПолеXDTO(ПараметрыОбмена, XDTOАдрес, XDTOАдресноеПолеТип, "Регион", ПредставлениеАдреса.Поле2);	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПредставлениеАдреса.Поле3) тогда
		ДобавитьАдресноеПолеXDTO(ПараметрыОбмена, XDTOАдрес, XDTOАдресноеПолеТип, "Район", ПредставлениеАдреса.Поле3);	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПредставлениеАдреса.Поле4) тогда
		ДобавитьАдресноеПолеXDTO(ПараметрыОбмена, XDTOАдрес, XDTOАдресноеПолеТип, "Город", ПредставлениеАдреса.Поле4);	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПредставлениеАдреса.Поле5) тогда
		ДобавитьАдресноеПолеXDTO(ПараметрыОбмена, XDTOАдрес, XDTOАдресноеПолеТип, "Населенный пункт", ПредставлениеАдреса.Поле5);	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПредставлениеАдреса.Поле6) тогда
		ДобавитьАдресноеПолеXDTO(ПараметрыОбмена, XDTOАдрес, XDTOАдресноеПолеТип, "Улица", ПредставлениеАдреса.Поле6);	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПредставлениеАдреса.Поле7) тогда
		ДобавитьАдресноеПолеXDTO(ПараметрыОбмена, XDTOАдрес, XDTOАдресноеПолеТип, "Дом", ПредставлениеАдреса.Поле7);	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПредставлениеАдреса.Поле8) тогда
		ДобавитьАдресноеПолеXDTO(ПараметрыОбмена, XDTOАдрес, XDTOАдресноеПолеТип, "Корпус", ПредставлениеАдреса.Поле8);	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПредставлениеАдреса.Поле9) тогда
		ДобавитьАдресноеПолеXDTO(ПараметрыОбмена, XDTOАдрес, XDTOАдресноеПолеТип, "Квартира", ПредставлениеАдреса.Поле9);	
	КонецЕсли;
	
	Возврат XDTOАдрес; 
	
КонецФункции

Процедура ДобавитьАдресноеПолеXDTO(ПараметрыОбмена, XDTOАдрес, XDTOАдресноеПолеТип, ТипПоля, Значение) Экспорт
	
	XDTOАдресноеПоле			= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOАдресноеПолеТип);
	XDTOАдресноеПоле.Тип      	= ТипПоля;
	XDTOАдресноеПоле.Значение 	= Значение;  	
	XDTOАдрес.АдресноеПоле.Добавить(XDTOАдресноеПоле);	
	
КонецПроцедуры

Функция ПолучитьКонтактнуюИнформациюXDTO(ПараметрыОбмена, XDTOКонтактТип, ВидКонтакта, ПредставлениеКонтакта) Экспорт

	XDTOКонтакт				= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOКонтактТип);

	XDTOКонтакт.Тип 		= ВидКонтакта;
	XDTOКонтакт.Значение 	= ПредставлениеКонтакта;
	
	Возврат XDTOКонтакт;
	
КонецФункции

Функция ПолучитьXDTOКоммерческаяИнформация(ПараметрыОбмена, XDTOКоммерческаяИнформацияТип) Экспорт
	
	XDTOКоммерческаяИнформация 					= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOКоммерческаяИнформацияТип); 
	XDTOКоммерческаяИнформация.ВерсияСхемы 		= ПараметрыОбмена.ВерсияСхемы;
	XDTOКоммерческаяИнформация.ДатаФормирования = XMLСтрока(ТекущаяДата());
	
	возврат XDTOКоммерческаяИнформация;
	
КонецФункции

Функция ЭтоСписокXDTO(ОбъектXDTO) Экспорт
	
	Если ТипЗнч(ОбъектXDTO) = Тип("СписокXDTO") тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ОбъектXDTOСодержитСвойство(ОбъектXDTO, Свойство) Экспорт
	
	ЕстьСвойство = ОбъектXDTO.Свойства().Получить(Свойство) <> Неопределено
		И ОбъектXDTO[Свойство] <> Неопределено;
		
	Возврат ЕстьСвойство;
	
КонецФункции

Функция СвойствоXDTOЗаполнено(СвойствоXDTO)Экспорт
	
	СвойствоЗаполнено = Истина;
	
	Если ТипЗнч(СвойствоXDTO) = Тип("ОбъектXDTO")
		ИЛИ ТипЗнч(СвойствоXDTO) = Тип("СписокXDTO")
		ИЛИ НЕ ЗначениеЗаполнено(СвойствоXDTO) Тогда
		
		СвойствоЗаполнено = Ложь;
		
	КонецЕсли;
	
	Возврат СвойствоЗаполнено;
	
КонецФункции

Функция ДанныеЗаказовВXDTO(ПараметрыОбмена, СтрокаXML) Экспорт
	
	ОбъектXML = Новый ЧтениеXML;
	
	Попытка
		
		ОбъектXML.УстановитьСтроку(СтрокаXML);
		
	Исключение
		
		СообщитьПодробно("Не удалось прочитать XML.", ПараметрыОбмена);	
		
		Возврат Неопределено;
		
	КонецПопытки;
	
	Попытка
		КоммерческаяИнформацияXDTO = ПараметрыОбмена.МояФабрикаXDTO.ПрочитатьXML(ОбъектXML);
	Исключение
		
		СообщитьПодробно("Не удалось прочитать XML.", ПараметрыОбмена);	
		
		Возврат Неопределено;
		
	КонецПопытки;
	
	Возврат КоммерческаяИнформацияXDTO;
	
КонецФункции

Функция ПолучитьМассивОбъектовСпискаXDTO(СписокXDTO) Экспорт
	
	МассивОбъектовXDTO = Новый Массив;
	
	Если ТипЗнч(СписокXDTO) = Тип("СписокXDTO") Тогда
		
		Для каждого ОбъектXDTO Из СписокXDTO Цикл 
			МассивОбъектовXDTO.Добавить(ОбъектXDTO);
		КонецЦикла;
		
	Иначе
		МассивОбъектовXDTO.Добавить(СписокXDTO);
	КонецЕсли;
	
	Возврат МассивОбъектовXDTO;
	
КонецФункции

Функция ПолучитьЗначениеПоСвойству(ОбъектXDTO, Свойство, ТипСвойства) Экспорт
	
	Результат = "";
	
	Если ОбъектXDTOСодержитСвойство(ОбъектXDTO, Свойство)Тогда
		Если СвойствоXDTOЗаполнено(ОбъектXDTO[Свойство]) тогда
			Результат = XMLЗначение(Тип(ТипСвойства), ОбъектXDTO[Свойство]);	
		КонецЕсли;
	КонецЕсли;		
	
	Возврат Результат;	
	
КонецФункции

Функция ОбработатьЗначенияРеквизитовXDTO(ПараметрыОбмена, ЗначенияРеквизитовXDTO)Экспорт 
	
	тзнЗначенияРеквизитов = Новый ТаблицаЗначений;
	тзнЗначенияРеквизитов.Колонки.Добавить("Наименование");
	тзнЗначенияРеквизитов.Колонки.Добавить("Значение");
	
	
	Если ОбъектXDTOСодержитСвойство(ЗначенияРеквизитовXDTO, "ЗначениеРеквизита") Тогда
		
		ЗначениеРеквизитаXDTO = ЗначенияРеквизитовXDTO.ЗначениеРеквизита;
		
		Если ЭтоСписокXDTO(ЗначениеРеквизитаXDTO) тогда
			Для каждого ТекЗначениеРеквизита из ЗначениеРеквизитаXDTO Цикл
				
				НовСтр 				= тзнЗначенияРеквизитов.Добавить();
				НовСтр.Наименование = ТекЗначениеРеквизита.Наименование;
				НовСтр.Значение	 	= ТекЗначениеРеквизита.Значение;
				
			КонецЦикла;
		Иначе
			НовСтр 				= тзнЗначенияРеквизитов.Добавить();
			НовСтр.Наименование = ЗначениеРеквизитаXDTO.Наименование;
			НовСтр.Значение	 	= ЗначениеРеквизитаXDTO.Значение;
			
		КонецЕсли;	
		
	Конецесли;

    Возврат тзнЗначенияРеквизитов;
	
КонецФункции

Функция ОбработатьЗначенияСкидокXDTO(ПараметрыОбмена, СкидкиXDTO)Экспорт 
	
	тзнСкидок = Новый ТаблицаЗначений;
	тзнСкидок.Колонки.Добавить("Наименование");
	тзнСкидок.Колонки.Добавить("Процент");
	тзнСкидок.Колонки.Добавить("Сумма");
	тзнСкидок.Колонки.Добавить("УчтеноВСумме");
	
	
	Если ОбъектXDTOСодержитСвойство(СкидкиXDTO, "Скидка") Тогда
		
		СкидкаXDTO = СкидкиXDTO.Скидка;
		
		Если ЭтоСписокXDTO(СкидкаXDTO) тогда
			Для каждого ТекЗначениеСкидки из СкидкаXDTO Цикл
				
				НовСтр 				= тзнСкидок.Добавить();
				НовСтр.Наименование = ПолучитьЗначениеПоСвойству(ТекЗначениеСкидки, "Наименование"	, "Строка"); 
				НовСтр.Процент	 	= ПолучитьЗначениеПоСвойству(ТекЗначениеСкидки, "Процент"		, "Число"); 
				НовСтр.Сумма 		= ПолучитьЗначениеПоСвойству(ТекЗначениеСкидки, "Сумма"			, "Число"); 
				НовСтр.УчтеноВСумме	= ПолучитьЗначениеПоСвойству(ТекЗначениеСкидки, "УчтеноВСумме"	, "Булево"); 
				
			КонецЦикла;
		Иначе
			НовСтр 				= тзнСкидок.Добавить();
			НовСтр.Наименование = ПолучитьЗначениеПоСвойству(СкидкаXDTO, "Наименование"	, "Строка"); 
			НовСтр.Процент	 	= ПолучитьЗначениеПоСвойству(СкидкаXDTO, "Процент"		, "Число"); 
			НовСтр.Сумма 		= ПолучитьЗначениеПоСвойству(СкидкаXDTO, "Сумма"		, "Число"); 
			НовСтр.УчтеноВСумме	= ПолучитьЗначениеПоСвойству(СкидкаXDTO, "УчтеноВСумме"	, "Булево"); 
			
		КонецЕсли;	
		
	Конецесли;

    Возврат тзнСкидок;
	
КонецФункции



			///////////////////////////////////////////////////////////////////
			//		    ПРОЦЕДУРЫ И ФУНКЦИИ С РАБОТОЙ HTTP          		//
			/////////////////////////////////////////////////////////////////
			
Процедура ДобавитьПараметрыПротоколаОбменаВСтруктуру(СтруктураПараметров)
	
	СтруктураПараметров.Вставить("ПараметрЗапросаHTTP_Инициализация"			, "&mode=init");
	СтруктураПараметров.Вставить("ПараметрЗапросаHTTP_ПередачаФайла"			, "&mode=file&filename=");
	СтруктураПараметров.Вставить("ПараметрЗапросаHTTP_ИмпортФайлаСервером"		, "&mode=import&filename=");
	СтруктураПараметров.Вставить("ПараметрЗапросаHTTP_ПолучитьДанные"			, "&mode=query");
	СтруктураПараметров.Вставить("ПараметрЗапросаHTTP_УспешноеЗавершениеИмпорта", "&mode=success");
	СтруктураПараметров.Вставить("ПараметрЗапросаHTTP_ДеактивацияДанныхПоДате"	, "&mode=deactivate");
	
	СтруктураПараметров.Вставить("ОтветСервера_ZIPРазрешен"								, "zip=yes");
	СтруктураПараметров.Вставить("ОтветСервера_ОграничениеРазмераФрагментаФайлаОбмена"	, "file_limit=");
	СтруктураПараметров.Вставить("ОтветСервера_УспешноеЗавершениеТекущейОперации"		, "success");
	СтруктураПараметров.Вставить("ОтветСервера_АварийноеЗавершениеТекущейОперации"		, "failure");
	СтруктураПараметров.Вставить("ОтветСервера_ВыполнениеТекущейОперации"				, "progress");
	
КонецПроцедуры	

Функция ПолучитьРезультатТестовогоПодключенияКСайту(ПараметрыОбмена) Экспорт
	
	НастройкиПодключения = Новый Структура;
	ТипСоединения = "catalog";
	
	Если НЕ ПолучитьНастройкиПодключения(НастройкиПодключения, ПараметрыОбмена) Тогда
		
		Возврат "Ошибка при получении параметров подключения к сайту.";
		
	КонецЕсли;
	
	Соединение = ПолучитьСоединениеССервером(НастройкиПодключения, ПараметрыОбмена);
	
	Если Соединение = Неопределено Тогда
		
		Возврат "Ошибка при установке соединения с сайтом.";
		
	КонецЕсли;
	
	ОтветСервера = "";
	
	Успешно = АвторизацияВыполнена(Соединение, НастройкиПодключения, ОтветСервера, ПараметрыОбмена, ТипСоединения);
	
	Если Успешно Тогда
		Возврат "Соединение с сайтом успешно установлено.";
	Иначе
		Возврат "Не удалось установить соединение.";
	КонецЕсли;
	
КонецФункции

Функция ПолучитьНастройкиПодключения(НастройкиПодключения, ПараметрыОбмена,АдресПереадресации = "") Экспорт
	
	НастройкиПодключения.Вставить("Пользователь", ПараметрыОбмена.ИмяПользователя);
	НастройкиПодключения.Вставить("Пароль", ПараметрыОбмена.Пароль);
	
	Если НЕ АдресСайтаРазобран(НастройкиПодключения, ПараметрыОбмена, АдресПереадресации) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НастройкаПроксиСервера = ПолучениеФайловИзИнтернета.ПолучитьНастройкиПроксиНаСервере1СПредприятие();
	
	Если НастройкаПроксиСервера <> Неопределено
		И НастройкаПроксиСервера["ИспользоватьПрокси"] = Ложь Тогда
		НастройкаПроксиСервера = Неопределено;
	КонецЕсли;
	
	Протокол = ?(НастройкиПодключения.ЗащищенноеСоединение, "https", "http");
	Прокси = ?(НастройкаПроксиСервера = Неопределено, Неопределено, ПолучитьПрокси(НастройкаПроксиСервера, Протокол));
	
	НастройкиПодключения.Вставить("Прокси", Прокси);
	
	Возврат Истина;
КонецФункции

Функция ПолучитьПрокси(НастройкаПроксиСервера, Протокол) Экспорт
	
	Если НастройкаПроксиСервера <> Неопределено Тогда
		ИспользоватьПрокси = НастройкаПроксиСервера.Получить("ИспользоватьПрокси");
		ИспользоватьСистемныеНастройки = НастройкаПроксиСервера.Получить("ИспользоватьСистемныеНастройки");
		Если ИспользоватьПрокси Тогда
			Если ИспользоватьСистемныеНастройки Тогда
				// Системные настройки прокси-сервера
				Прокси = Новый ИнтернетПрокси(Истина);
			Иначе
				// Ручные настройки прокси-сервера
				Прокси = Новый ИнтернетПрокси;
				Прокси.Установить(Протокол, НастройкаПроксиСервера["Сервер"], НастройкаПроксиСервера["Порт"]);
				Прокси.НеИспользоватьПроксиДляЛокальныхАдресов = НастройкаПроксиСервера["НеИспользоватьПроксиДляЛокальныхАдресов"];
				Прокси.Пользователь = НастройкаПроксиСервера["Пользователь"];
				Прокси.Пароль       = НастройкаПроксиСервера["Пароль"];
			КонецЕсли;
		Иначе
			// Не использовать прокси-сервер	
			Прокси = Новый ИнтернетПрокси(Ложь);
		КонецЕсли;
	Иначе
		Прокси = Неопределено;
	КонецЕсли;
	
	Возврат Прокси;
	
КонецФункции

Функция ПолучитьСоединениеССервером(ПараметрыПодключения, ПараметрыОбмена) Экспорт
	
		Соединение = НеОпределено;
		
		Попытка
			
			СисИнфо = Новый СистемнаяИнформация;
			
			Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СисИнфо.ВерсияПриложения, "8.3.3.721") < 0  тогда	
				Выполнить("Соединение = Новый HTTPСоединение(ПараметрыПодключения.Сервер, ПараметрыПодключения.Порт, ПараметрыПодключения.Пользователь, ПараметрыПодключения.Пароль, ПараметрыПодключения.Прокси, ПараметрыПодключения.ЗащищенноеСоединение)");
			Иначе
				
				Выполнить("Если НЕ ПараметрыПодключения.ЗащищенноеСоединение тогда
				|	ssl = Неопределено;
				|Иначе
				|	
				|	ssl = Новый ЗащищенноеСоединениеOpenSSL(
				|	Неопределено,
				|	Неопределено); 
				|КонецЕсли;
				|Соединение = Новый HTTPСоединение(ПараметрыПодключения.Сервер, ПараметрыПодключения.Порт, ПараметрыПодключения.Пользователь, ПараметрыПодключения.Пароль, ПараметрыПодключения.Прокси, ,ssl)");	
			КонецЕсли;	
			
		Исключение
			
			СообщитьПодробно(" Не удалось установить соединение с сервером. Проверьте правильность адреса сервера, порт, имя пользователя и пароль.", ПараметрыОбмена);	
			
			Соединение = Неопределено;
			
		Конецпопытки;
		
	Возврат Соединение;
	
КонецФункции

Функция АвторизацияВыполнена(Соединение, ПараметрыПодключения, 
	ОтветСервера, ПараметрыОбмена, ТипСоединения = "catalog") Экспорт
	
	Соединение = ПолучитьСоединениеССервером(ПараметрыПодключения, ПараметрыОбмена);
	
	Если Соединение = Неопределено Тогда
		
		СообщитьПодробно("Авторизация не выполнена.", ПараметрыОбмена);	
		Возврат Ложь;
	КонецЕсли;
	
	ОтветСервера = ПолучитьДанныеССервера(Соединение, ПараметрыПодключения.АдресСкрипта + "?type=" + ТипСоединения + "&mode=checkauth", , ПараметрыОбмена);
	
	Если ОтветСервера = Неопределено Тогда 
		
		СообщитьПодробно("Авторизация не выполнена. Ответ с сервера не пришел.", ПараметрыОбмена);	
		Возврат Ложь;
	КонецЕсли;
	
	Если СокрЛП(НРег(СтрПолучитьСтроку(ОтветСервера, 1))) <> "success" Тогда
		
		СообщитьПодробно("Авторизация не выполнена." + Символы.ПС + "Не удалось установить соединение с сервером. Проверьте имя пользователя и пароль.", ПараметрыОбмена);	
		СообщитьПодробно("Ответ сервера: " + ОтветСервера, ПараметрыОбмена);	
		
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция АдресСайтаРазобран(НастройкиПодключения, ПараметрыОбмена, АдресПереадресации = "")
	
	АдресСайта = ?(АдресПереадресации = "", СокрЛП(ПараметрыОбмена.АдресСайта) , СокрЛП(АдресПереадресации)); 
	
	Сервер = ""; 
	
	Порт = 0;
	
	АдресСкрипта = "";
	
	ЗащищенноеСоединение = Ложь;
	
	Если НЕ ПустаяСтрока(АдресСайта) Тогда
		
		АдресСайта = СтрЗаменить(АдресСайта, "\", "/");
		АдресСайта = СтрЗаменить(АдресСайта, " ", "");
		
		Если НРег(Лев(АдресСайта, 7)) = "http://" Тогда
			АдресСайта = Сред(АдресСайта, 8);
		ИначеЕсли НРег(Лев(АдресСайта, 8)) = "https://" Тогда
			АдресСайта = Сред(АдресСайта, 9);
			ЗащищенноеСоединение = Истина;
		КонецЕсли;
		
		ПозицияСлэша = Найти(АдресСайта, "/");
		
		Если ПозицияСлэша > 0 Тогда
			Сервер = Лев(АдресСайта, ПозицияСлэша - 1);
			АдресСкрипта = Прав(АдресСайта, СтрДлина(АдресСайта) - ПозицияСлэша);
		Иначе	
			Сервер = АдресСайта;
			АдресСкрипта = "";
		КонецЕсли;
		
		ПозицияДвоеточия = Найти(Сервер, ":");
		ПортСтрока = "0";
		Если ПозицияДвоеточия > 0 Тогда
			СерверСПортом = Сервер;
			Сервер = Лев(СерверСПортом, ПозицияДвоеточия - 1);
			ПортСтрока = Прав(СерверСПортом, СтрДлина(СерверСПортом) - ПозицияДвоеточия);
		КонецЕсли;
		
		Попытка
			
			Порт = Число(ПортСтрока);
			
		Исключение
			
			СообщитьПодробно("Не удалось получить номер порта: " + ПортСтрока + Символы.ПС + "Проверьте правильность ввода адреса сайта.", ПараметрыОбмена);	
			
			Возврат Ложь;
			
		КонецПопытки;
		
		Если Порт = 0 Тогда
			Порт = ?(ЗащищенноеСоединение, 443, 80);
		КонецЕсли;
		
	КонецЕсли;
	
	НастройкиПодключения.Вставить("Сервер", Сервер); 
	НастройкиПодключения.Вставить("Порт", Порт);
	НастройкиПодключения.Вставить("АдресСкрипта", АдресСкрипта);
	НастройкиПодключения.Вставить("ЗащищенноеСоединение", ЗащищенноеСоединение);
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьДанныеССервера(Соединение, ПараметрыЗапроса = "", Заголовки = "", ПараметрыОбмена) Экспорт
	
	ИмяФайлаОтвета = ПолучитьИмяВременногоФайла();
	
	Попытка
		
		Соединение.Получить(СокрЛП(ПараметрыЗапроса), ИмяФайлаОтвета, СокрЛП(Заголовки));
		
	Исключение
		
		СообщитьПодробно("Не удалось получить данные с сервера. Проверьте правильность адреса сервера, порт, имя пользователя и пароль," + Символы.ПС + "а также настройки подключения к Интернет.", ПараметрыОбмена)
		
	КонецПопытки;
	
	ФайлОтвета = Новый Файл(ИмяФайлаОтвета);
	ОтветСервера = НеОпределено;
	
	Если ФайлОтвета.Существует() Тогда
		ЧтениеТекста = Новый ЧтениеТекста(ИмяФайлаОтвета);          
		ТекстОтвета = ЧтениеТекста.Прочитать();
		
		Если НЕ ПустаяСтрока(ТекстОтвета) Тогда
			ОтветСервера = ТекстОтвета;
		Иначе
			СообщитьПодробно("Получение данных с сервера: Получен пустой ответ сервера.", ПараметрыОбмена);	
		КонецЕсли;
		
	Иначе
		
		СообщитьПодробно("Получение данных с сервера: Ответ сервера не получен.", ПараметрыОбмена);	
	КонецЕсли;
	
	Попытка
		УдалитьФайлы(КаталогВременныхФайлов(), ИмяФайлаОтвета);
	Исключение
	КонецПопытки;
	
	Возврат ОтветСервера;
	
КонецФункции

Функция ПолучитьРезультатОтправкиФайлаНаСервер(ПараметрыОбмена,ПолноеИмяФайла, Соединение, ПараметрыЗапроса="", Заголовки="")
	
	ОтветСервера = Неопределено;
	ИмяФайлаОтвета = ПолучитьИмяВременногоФайла();
	
	Попытка
		Соединение.ОтправитьДляОбработки(ПолноеИмяФайла, СокрЛП(ПараметрыЗапроса), ИмяФайлаОтвета, СокрЛП(Заголовки));
	Исключение
		
		СообщитьПодробно(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ПараметрыОбмена);	
	КонецПопытки;
	
	ФайлОтвета = Новый Файл(ИмяФайлаОтвета);
	
	Если ФайлОтвета.Существует() Тогда
		
		ЧтениеТекста = Новый ЧтениеТекста(ИмяФайлаОтвета);          
		ТекстОтвета = ЧтениеТекста.Прочитать();
		
		Если НЕ ПустаяСтрока(ТекстОтвета) Тогда
			ОтветСервера = ТекстОтвета;
		Иначе
			СообщитьПодробно("Получение данных с сервера: Получен пустой ответ сервера.", ПараметрыОбмена);	
		КонецЕсли;
		
	Иначе
		
		СообщитьПодробно("Отправка файла на сервер: Ответ сервера не получен.", ПараметрыОбмена);	
		
	КонецЕсли;
	
	Попытка
		УдалитьФайлы(КаталогВременныхФайлов(), ИмяФайлаОтвета);
	Исключение
	КонецПопытки;
	
	Возврат ОтветСервера;
	
КонецФункции



			///////////////////////////////////////////////////////////////////
			//		   	 ПРОЦЕДУРЫ И ФУНКЦИИ С ПО РАБОТЕ С ФС        		//
			/////////////////////////////////////////////////////////////////

Функция ПолучитьПутьДляПлатформы(ПлатформаWindows, Путь) Экспорт
	
	Если ПлатформаWindows Тогда
		ЧтоМенять = "/";
		НаЧтоМенять = "\";
	Иначе
		ЧтоМенять = "\";
		НаЧтоМенять = "/";
	КонецЕсли;
	
	Путь = СтрЗаменить(Путь, ЧтоМенять, НаЧтоМенять);
	
	Возврат Путь;
	
КонецФункции

Функция СуществуетФайл(ИмяФайла) Экспорт
	ВыбФайл = Новый Файл(ИмяФайла);
	Если ВыбФайл.Существует()  Тогда  
		Возврат Истина;
	КонецЕсли;  
	Возврат Ложь;
КонецФункции

Функция КаталогОчищен(Каталог, ПараметрыОбмена) Экспорт
	
	Попытка
		
		УдалитьФайлы(Каталог, "*.*");
		
	Исключение
		
		СообщитьПодробно("Не удалось очистить каталог обмена: (" + Каталог + ")", ПараметрыОбмена);	
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции



			///////////////////////////////////////////////////////////////////
			//		   	 ПРОЦЕДУРЫ И ФУНКЦИИ С ЛОГИРОВАНИЕМ         		//
			/////////////////////////////////////////////////////////////////

Процедура СообщитьПодробно(пСобытие, ОсновныеПараметры = Неопределено, Логирование = Истина, ЗаписьВЖурналРегистрации = Ложь) Экспорт
	
	#Если Клиент Тогда
		Сообщить(пСобытие);
	#КонецЕсли
	
	Если ЗаписьВЖурналРегистрации тогда
		ЗаписьЖурналаРегистрации("СобытияОбменаДанныхМодуляБитрикс", УровеньЖурналаРегистрации.Информация,,, пСобытие);
    КонецЕсли;
	
	Если Логирование и НЕ ОсновныеПараметры = Неопределено Тогда
		
		Если ОсновныеПараметры.ИмяФайлаЛога <> "" тогда
			
			Текст = Новый ЗаписьТекста(ОсновныеПараметры.ИмяФайлаЛога, КодировкаТекста.ANSI,,истина);
			Текст.ЗаписатьСтроку(Строка(ТекущаяДата()) + "--" + пСобытие);
			Текст.Закрыть(); 
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры 

Процедура ОтображениеСостояния(ТекстСостояния)
	
	#Если Клиент Тогда
		Состояние(ТекстСостояния);
	#КонецЕсли
	
КонецПроцедуры



			///////////////////////////////////////////////////////////////////
			//		     ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ         				//
			/////////////////////////////////////////////////////////////////

Процедура ЗаданиеОбменССайтом(КодНастройки) Экспорт
	
	Если НЕ ЗначениеЗаполнено(КодНастройки) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбмена = ПланыОбмена.Б_ОбменССайтом.НайтиПоКоду(КодНастройки);
	
	Если НЕ ЗначениеЗаполнено(ПараметрыОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыОбмена.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбмен(ПараметрыОбмена);
	
КонецПроцедуры

Функция ПолучитьВерсиюОбъекта(ПараметрыОбмена, Версия, ТипОбъекта) Экспорт
	
	 лВерсия = Версия;
	
	Если ТипОбъекта = "Товаров" И ПараметрыОбмена.ПринудительнаяПолноеОбновлениеДанныхТовара тогда
		лВерсия = Версия + ПараметрыОбмена.ПрефиксВерсии;	
		Возврат лВерсия;
	КонецЕсли;
	
	Если ПараметрыОбмена.НастройкаВерсионностиВыгружаемыхДанных <> Неопределено тогда
		НайденноеЗначение = ПараметрыОбмена.НастройкаВерсионностиВыгружаемыхДанных.НайтиПоЗначению(ТипОбъекта);
		
		Если НайденноеЗначение <> Неопределено тогда
			Если НайденноеЗначение.Пометка тогда
				лВерсия = Версия + ПараметрыОбмена.ПрефиксВерсии;	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат лВерсия;
	
КонецФункции

//процедура используется много где, поэтому Вид отбора лучше не трогать 
Процедура ЗаполнитьОтборПоТаблицеЗначений(Отбор, ТЗ, ВидОтбора = "") Экспорт 

	Для каждого ЭлементОтбора Из ТЗ Цикл
	
		СтрокаТаблицы = Неопределено;
		
		Для каждого стр Из Отбор Цикл
			
			Если стр.Представление = ЭлементОтбора.Представление
				И стр.ТипЗначения = ЭлементОтбора.ТипЗначения Тогда
				Если ПустаяСтрока(стр.Представление)
					И ПустаяСтрока(стр.ПутьКданным) Тогда
					
					Продолжить;
					
				КонецЕсли;
				СтрокаТаблицы = стр;
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПустаяСтрока(ЭлементОтбора.ПутьКданным) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы = Неопределено Тогда
			
			Если ВидОтбора = "ОбщаяИнформация" тогда
				
				Если ЭлементОтбора.Имя = "СвойствоНоменклатуры" тогда
					Продолжить;
				КонецЕсли;
			ИначеЕсли ВидОтбора = "Свойства" тогда	
				Если ЭлементОтбора.Имя <> "СвойствоНоменклатуры" тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			СтрокаТаблицы = Отбор.Добавить(ЭлементОтбора.ПутьКданным, ЭлементОтбора.Имя, ЭлементОтбора.Представление);		
			
		КонецЕсли;
	
		СтрокаТаблицы.ВидСравнения = ЭлементОтбора.ВидСравнения;
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ЭлементОтбора, "Значение, ЗначениеПо, ЗначениеС, Использование");

	КонецЦикла;

КонецПроцедуры 



			///////////////////////////////////////////////////////////////////
			//			       ПРОЦЕДУРЫ И ФУНКЦИИ ОБМЕНА                   //
			/////////////////////////////////////////////////////////////////
			
Процедура ВыполнитьОбмен(Настройка, ПринудительнаяПолноеОбновлениеДанныхТовара = Ложь) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Настройка) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОсновныеПараметры = Новый Структура;
	НастройкиУспешноДобавлены = ДобавитьНастройкиУзлаВПараметры(Настройка, ОсновныеПараметры, ПринудительнаяПолноеОбновлениеДанныхТовара);
	
	Если НЕ НастройкиУспешноДобавлены тогда
		Возврат;
	КонецЕсли;
	
	СообщитьПодробно("______________________________________________________________________", ОсновныеПараметры);	
	СообщитьПодробно("Начало обмена узла " + Строка(Настройка), ОсновныеПараметры, Истина, Истина);	
	
	//Проверяем, необходимо ли сделать обновление базы.
	
	Если НЕ ПроверкаОбновленияДанныхМодуляОбменаССайтом(ОсновныеПараметры) тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ОсновныеПараметры.ВыгружатьНаСайт Тогда
		
		ОписаниеОшибки = "";
		
		НастройкиПодключения = Новый Структура;
		
		Если НЕ ПолучитьНастройкиПодключения(НастройкиПодключения, ОсновныеПараметры) Тогда
			
			СообщитьПодробно(ОписаниеОшибки, ОсновныеПараметры);	
			
			Возврат;
			
		КонецЕсли;
		
		ДобавитьПараметрыПротоколаОбменаВСтруктуру(НастройкиПодключения);
		
		ОсновныеПараметры.Вставить("НастройкиПодключения", НастройкиПодключения);
		
	КонецЕсли;
	
	//Обмен
	КаталогВыгрузки = "";
	
	Если НЕ ОсновныеПараметры.ВыгружатьНаСайт Тогда
		КаталогВыгрузки = ОсновныеПараметры.КаталогВыгрузки;
	КонецЕсли;
	
	Если ПустаяСтрока(КаталогВыгрузки) Тогда
		КаталогВыгрузки = КаталогВременныхФайлов();
	Иначе
		КаталогВыгрузки = ОсновныеПараметры.КаталогВыгрузки;
		ПоследнийСимвол = Прав(КаталогВыгрузки, 1);
		Если НЕ ПоследнийСимвол = "\" Тогда
			КаталогВыгрузки = КаталогВыгрузки + "\";
		КонецЕсли;
	КонецЕсли;
	
	ПодкаталогБезопасностиКаталогаВыгрузки = "webdata\";
	КаталогНаДиске = КаталогВыгрузки + ПодкаталогБезопасностиКаталогаВыгрузки + СокрЛП(ОсновныеПараметры.Ссылка.Код);
	КаталогНаДиске = ПолучитьПутьДляПлатформы(ОсновныеПараметры.ПлатформаWindows, КаталогНаДиске);
	
	Попытка
		СоздатьКаталог(КаталогНаДиске);
	Исключение
		
		СообщитьПодробно(ОписаниеОшибки(), ОсновныеПараметры);	
		
		Возврат;
		
	КонецПопытки;
	
	Если НЕ КаталогОчищен(КаталогНаДиске, ОсновныеПараметры) Тогда
		
		СообщитьПодробно("Не удалось очистить каталог: " + КаталогНаДиске + ". Продолжение выгрузки невозможно." , ОсновныеПараметры);	
		
		Возврат;
		
	КонецЕсли;
	
	ОсновныеПараметры.Вставить("КаталогНаДиске"	, КаталогНаДиске);
	ОсновныеПараметры.ФайлЗагрузки = ПолучитьПутьДляПлатформы(ОсновныеПараметры.ПлатформаWindows, ОсновныеПараметры.ФайлЗагрузки);
	
	ОсновныеПараметры.Вставить("ПодкаталогФайлов"	, "import_files");
	ОсновныеПараметры.Вставить("НаименованиеНалога"	, "НДС");
	ОсновныеПараметры.Вставить("НаименованиеСкидки"	, НСтр("ru = 'Скидка'"));
	
	Если НЕ ОсновныеПараметры.ПродолжитьОтправкуНеудачноЗакончившихсяПакетовПриСледующемОбмене тогда
		
		СообщитьПодробно("Очистка регистра пакетов обмена.", ОсновныеПараметры);	

		НаборЗаписей = РегистрыСведений.Б_ПакетныйОбмен.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.НастройкаОбмена.Установить(ОсновныеПараметры.Ссылка);
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать(Истина);
		СообщитьПодробно("Очистка регистра пакетов обмена завершена.", ОсновныеПараметры);	
		
	КонецЕсли;
	
	Если ОсновныеПараметры.ОбменТоварами Тогда
				
		СообщитьПодробно("Выгрузка информации по товарам.", ОсновныеПараметры);	
		
		// Выгрузка общей информации
		Если ОсновныеПараметры.ПродолжитьОтправкуНеудачноЗакончившихсяПакетовПриСледующемОбмене тогда
			
			СообщитьПодробно("Выгрузка неотправленного пакета общей информации для товарам.", ОсновныеПараметры);	
			
			Б_ПроцедурыИФункцииВыгрузкиДанныхНаСайт.ФормированиеФайловXMLОбменаДанных(ОсновныеПараметры, "ОбщаяИнформация", Истина);
			
			СообщитьПодробно("Выгрузка неотправленного пакета общей информации для ЗАВЕРШЕНА", ОсновныеПараметры);	
			
		КонецЕсли;
		
		Б_ПроцедурыИФункцииВыгрузкиДанныхНаСайт.ФормированиеПакетовДанных(ОсновныеПараметры			, "ОбщаяИнформация");
		Б_ПроцедурыИФункцииВыгрузкиДанныхНаСайт.ФормированиеФайловXMLОбменаДанных(ОсновныеПараметры	, "ОбщаяИнформация");
		
		Если ОсновныеПараметры.ВыгружатьСвойства тогда
		
		
			Если ОсновныеПараметры.ПродолжитьОтправкуНеудачноЗакончившихсяПакетовПриСледующемОбмене тогда
				
				СообщитьПодробно("Выгрузка неотправленных пакетов данных о  свойствах.", ОсновныеПараметры);	
				
				Б_ПроцедурыИФункцииВыгрузкиДанныхНаСайт.ФормированиеФайловXMLОбменаДанных(ОсновныеПараметры, "Свойства", Истина);
				
				СообщитьПодробно("Выгрузка неотправленных пакетов данных о свойствах ЗАВЕРШЕНА", ОсновныеПараметры);	
				
			КонецЕсли;
				
			Б_ПроцедурыИФункцииВыгрузкиДанныхНаСайт.ФормированиеПакетовДанных(ОсновныеПараметры, "Свойства");
			Б_ПроцедурыИФункцииВыгрузкиДанныхНаСайт.ФормированиеФайловXMLОбменаДанных(ОсновныеПараметры, "Свойства");
			
		КонецЕсли;		
		
		Если ОсновныеПараметры.ПродолжитьОтправкуНеудачноЗакончившихсяПакетовПриСледующемОбмене тогда
			
			СообщитьПодробно("Выгрузка неотправленных пакетов данных о товарах и предложениях.", ОсновныеПараметры);	
			
			Б_ПроцедурыИФункцииВыгрузкиДанныхНаСайт.ФормированиеФайловXMLОбменаДанных(ОсновныеПараметры, "Товары", Истина);
			
			СообщитьПодробно("Выгрузка неотправленных пакетов данных  о товарах и предложениях ЗАВЕРШЕНА", ОсновныеПараметры);	
			
		КонецЕсли;
		
		СообщитьПодробно("Выгрузка информации  о товарах и предложениях.", ОсновныеПараметры);	
			
		Б_ПроцедурыИФункцииВыгрузкиДанныхНаСайт.ФормированиеПакетовДанных(ОсновныеПараметры, "Товары");
		Б_ПроцедурыИФункцииВыгрузкиДанныхНаСайт.ФормированиеФайловXMLОбменаДанных(ОсновныеПараметры, "Товары");
			
		СообщитьПодробно("Выгрузка информации  о товарах и предложениях ЗАВЕРШЕНА", ОсновныеПараметры);	
		
	КонецЕсли;
	
	Если ОсновныеПараметры.ВыгрузкаСкидок Тогда 
		
		Если ОсновныеПараметры.ПродолжитьОтправкуНеудачноЗакончившихсяПакетовПриСледующемОбмене тогда
			
			СообщитьПодробно("Выгрузка информации по скидкам.", ОсновныеПараметры);	
				
				Б_ПроцедурыИФункцииВыгрузкиДанныхНаСайт.ФормированиеФайловXMLОбменаДанных(ОсновныеПараметры, "Скидки", Истина);
			
			СообщитьПодробно("Выгрузка информации по скидкам ЗАВЕРШЕНА", ОсновныеПараметры);	
			
		КонецЕсли;
		
		СообщитьПодробно("Выгрузка информации по скидкам", ОсновныеПараметры);	
		
			Б_ПроцедурыИФункцииВыгрузкиДанныхНаСайт.ФормированиеПакетовДанных(ОсновныеПараметры, "Скидки");
			Б_ПроцедурыИФункцииВыгрузкиДанныхНаСайт.ФормированиеФайловXMLОбменаДанных(ОсновныеПараметры, "Скидки");
		
		СообщитьПодробно("Выгрузка информации по скидкам ЗАВЕРШЕНА", ОсновныеПараметры);	
		
	КонецЕсли;
	
	Если ОсновныеПараметры.ВыгрузкаКартЛояльности Тогда 
				
		Если ОсновныеПараметры.ПродолжитьОтправкуНеудачноЗакончившихсяПакетовПриСледующемОбмене тогда
			
			СообщитьПодробно("Выгрузка информации по дисконтным картам.", ОсновныеПараметры);	
				
				Б_ПроцедурыИФункцииВыгрузкиДанныхНаСайт.ФормированиеФайловXMLОбменаДанных(ОсновныеПараметры, "КартыЛояльности", Истина);
			
			СообщитьПодробно("Выгрузка информации по дисконтным картам ЗАВЕРШЕНА", ОсновныеПараметры);	
			
		КонецЕсли;
		
		СообщитьПодробно("Выгрузка информации по дисконтным картам.", ОсновныеПараметры);	
		
			Б_ПроцедурыИФункцииВыгрузкиДанныхНаСайт.ФормированиеПакетовДанных(ОсновныеПараметры, "КартыЛояльности");
			Б_ПроцедурыИФункцииВыгрузкиДанныхНаСайт.ФормированиеФайловXMLОбменаДанных(ОсновныеПараметры, "КартыЛояльности", Истина);
			
		СообщитьПодробно("Выгрузка информации по дисконтным картам ЗАВЕРШЕНА", ОсновныеПараметры);	

	КонецЕсли;
	
	Если ОсновныеПараметры.ВыгрузкаКонтрагентов Тогда
			
		Если ОсновныеПараметры.ПродолжитьОтправкуНеудачноЗакончившихсяПакетовПриСледующемОбмене тогда
				
			СообщитьПодробно("Выгрузка неотправленных пакетов о информации по контрагентам.", ОсновныеПараметры);	
				
			Б_ПроцедурыИФункцииВыгрузкиДанныхНаСайт.ФормированиеФайловXMLОбменаДанных(ОсновныеПараметры, "Контрагенты", Истина);
			
			СообщитьПодробно("Выгрузка неотправленных пакетов и информации по контрагентам ЗАВЕРШЕНА", ОсновныеПараметры);	
				
		КонецЕсли;
			
		СообщитьПодробно("Выгрузка информации по контрагентам.", ОсновныеПараметры);	
			
		Б_ПроцедурыИФункцииВыгрузкиДанныхНаСайт.ФормированиеПакетовДанных(ОсновныеПараметры, "Контрагенты");
		Б_ПроцедурыИФункцииВыгрузкиДанныхНаСайт.ФормированиеФайловXMLОбменаДанных(ОсновныеПараметры, "Контрагенты");
			
		СообщитьПодробно("Выгрузка информации по контрагентам ЗАВЕРШЕНА", ОсновныеПараметры);	
			
	КонецЕсли;

	Если ОсновныеПараметры.ОбменДокументами Тогда
		
		СообщитьПодробно("Загрузка информации по заказам.", ОсновныеПараметры);	
		
		Б_ПроцедурыИФункцииЗагрузкиДанныхИзСайта.ЗагрузкаДокументов(ОсновныеПараметры);

		СообщитьПодробно("Загрузка информации по заказам ЗАВЕРШЕНА", ОсновныеПараметры);	
		
		
		Если ОсновныеПараметры.ПродолжитьОтправкуНеудачноЗакончившихсяПакетовПриСледующемОбмене тогда
			
			СообщитьПодробно("Выгрузка неотправленных пакетов о информации по заказам.", ОсновныеПараметры);	
				
			Б_ПроцедурыИФункцииВыгрузкиДанныхНаСайт.ФормированиеФайловXMLОбменаДанных(ОсновныеПараметры, "Заказы", Истина);
			
			СообщитьПодробно("Выгрузка неотправленных пакетов о информации по заказам ЗАВЕРШЕНА", ОсновныеПараметры);	
			
		КонецЕсли;
		
		СообщитьПодробно("Выгрузка информации по заказам.", ОсновныеПараметры);	
			
		Б_ПроцедурыИФункцииВыгрузкиДанныхНаСайт.ФормированиеПакетовДанных(ОсновныеПараметры, "Заказы");
		Б_ПроцедурыИФункцииВыгрузкиДанныхНаСайт.ФормированиеФайловXMLОбменаДанных(ОсновныеПараметры, "Заказы");
		
		СообщитьПодробно("Выгрузка информации по заказам ЗАВЕРШЕНА", ОсновныеПараметры);	
		
	КонецЕсли;
	
	Если ОсновныеПараметры.ВыгрузкаПользовательскихСправочников Тогда 
		
		Если ОсновныеПараметры.ПродолжитьОтправкуНеудачноЗакончившихсяПакетовПриСледующемОбмене тогда
			
			СообщитьПодробно("Выгрузка информации по пользовательским справочникам.", ОсновныеПараметры);	
				
			Б_ПроцедурыИФункцииВыгрузкиДанныхНаСайт.ФормированиеФайловXMLОбменаДанных(ОсновныеПараметры, "ПользовательскиеСправочники", Истина);
			
			СообщитьПодробно("Выгрузка информации по пользовательским справочникам ЗАВЕРШЕНА", ОсновныеПараметры);	
			
		КонецЕсли;
		
		СообщитьПодробно("Выгрузка информации по пользовательским справочникам", ОсновныеПараметры);	
		
		Б_ПроцедурыИФункцииВыгрузкиДанныхНаСайт.ФормированиеПакетовДанных(ОсновныеПараметры, "ПользовательскиеСправочники");
		Б_ПроцедурыИФункцииВыгрузкиДанныхНаСайт.ФормированиеФайловXMLОбменаДанных(ОсновныеПараметры, "ПользовательскиеСправочники");
		
		СообщитьПодробно("Выгрузка информации по пользовательским справочникам ЗАВЕРШЕНА", ОсновныеПараметры);	
		
	КонецЕсли;
	
	Если ОсновныеПараметры.ВыполнятьПолнуюВыгрузкуПринудительно тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	Б_ПакетныйОбмен.Объект
		|ИЗ
		|	РегистрСведений.Б_ПакетныйОбмен КАК Б_ПакетныйОбмен
		|ГДЕ
		|	Б_ПакетныйОбмен.НастройкаОбмена = &Узел";
		Запрос.УстановитьПараметр("Узел", ОсновныеПараметры.Ссылка);
		ВремТзн = Запрос.Выполнить().Выгрузить();			   
		
		Если ВремТзн.Количество()=0 Тогда
			
			УзелОбъект = Настройка.ПолучитьОбъект();
			УзелОбъект.ВыполнятьПолнуюВыгрузкуПринудительно = Ложь;
			УзелОбъект.Записать();
			
		КонецЕсли;
	КонецЕсли;
	
	Если ОсновныеПараметры.ВыгружатьЛогНаСайт И ОсновныеПараметры.ВыгружатьНаСайт И ОсновныеПараметры.ИмяФайлаЛога <> "" тогда
		
		СообщитьПодробно("Выгрузка текущего лог файла на сайт.", ОсновныеПараметры, Истина, Истина);	
		
		ВыгрузитьЛогФайлНаСайт(ОсновныеПараметры);
		
	КонецЕсли;
	
	УдалитьФайлы(ОсновныеПараметры.ФайлСхемы);
	СообщитьПодробно("Завершение обмена " + Строка(Настройка), ОсновныеПараметры, Истина, Истина);	
	СообщитьПодробно("______________________________________________________________________", ОсновныеПараметры);	
	ОтображениеСостояния("");	
	
КонецПроцедуры   



Функция ПолучитьМассивРеквизитов5ВерсииМодуля()
	
	МассивРеквизитов = Новый Массив;
	
	МассивРеквизитов.Добавить("АдресСайта");
	МассивРеквизитов.Добавить("ВыгружатьЛогНаСайт");
	МассивРеквизитов.Добавить("ВыгружатьНаСайт");
	МассивРеквизитов.Добавить("ВыполнятьПолнуюВыгрузкуПринудительно");
	МассивРеквизитов.Добавить("ИдентификаторРегламентногоЗадания");
	МассивРеквизитов.Добавить("ИмяПользователя");
	МассивРеквизитов.Добавить("ИспользоватьРегламентныеЗадания");
	МассивРеквизитов.Добавить("Код");
	МассивРеквизитов.Добавить("КаталогВыгрузки");
	МассивРеквизитов.Добавить("КаталогЛога");
	МассивРеквизитов.Добавить("Комментарий");
	МассивРеквизитов.Добавить("НастройкаВерсионностиВыгружаемыхДанных");
	МассивРеквизитов.Добавить("ОбменВРеальномВремени");
	МассивРеквизитов.Добавить("Пароль");
	МассивРеквизитов.Добавить("ПродолжитьОтправкуНеудачноЗакончившихсяПакетовПриСледующемОбмене");
	МассивРеквизитов.Добавить("ТаймаутМеждуПовторамиНеудачноОтправленныхПакетах");
	МассивРеквизитов.Добавить("ФайлЗагрузки");
	МассивРеквизитов.Добавить("ХранитьФайлыОбменаНаСайте");
	МассивРеквизитов.Добавить("ЧислоПовторовПриНеудачноОтправленныхПакетах");
	МассивРеквизитов.Добавить("Идентификатор");
	МассивРеквизитов.Добавить("ВыгружатьТолькоИзменения");
	МассивРеквизитов.Добавить("СохраненнаяТаблицаКаталогов");
	МассивРеквизитов.Добавить("СохраненнаяТаблицаОтборовКаталогов");
	МассивРеквизитов.Добавить("СохраненныеНастройки");
	МассивРеквизитов.Добавить("ОбменДокументами");
	МассивРеквизитов.Добавить("ОбменТоварами");
	МассивРеквизитов.Добавить("ОбменПользовательскимиСправочниками");
	
	Возврат МассивРеквизитов;
	
КонецФункции
			
Функция ДобавитьНастройкиУзлаВПараметры(УзелОбмена, Параметры, ПринудительнаяПолноеОбновлениеДанныхТовара = Ложь) Экспорт
	
	МассивРеквизитов = ПолучитьМассивРеквизитов5ВерсииМодуля();

	//добавляем реквизиты узла обмена
	Для каждого ТекРеквизит из УзелОбмена.Метаданные().Реквизиты Цикл
		
		Если МассивРеквизитов.Найти(ТекРеквизит.Имя) = Неопределено тогда
			Продолжить;
		КонецЕсли;         
		
		Параметры.Вставить(ТекРеквизит.Имя, УзелОбмена[ТекРеквизит.Имя]);
	КонецЦикла;
			
	//общие настройки
	СоздатьКаталог(КаталогВременныхФайлов() + СокрЛП(УзелОбмена.Код));

	лфайлСхемыXSD 	= КаталогВременныхФайлов() + СокрЛП(УзелОбмена.Код) +"\SchemaXSD_Exchange.XSD";
	СхемаXSD  		= ПланыОбмена.Б_ОбменССайтом.ПолучитьМакет("СхемаXSDОбмена");
	СхемаXSD.Записать(лфайлСхемыXSD);

	Параметры.Вставить("ПространствоИмен", "urn:1C.ru:commerceml_2");
	Параметры.Вставить("МояФабрикаXDTO", );
	           
	Параметры.Вставить("ВерсияСхемы"		, "2.09");
	Параметры.Вставить("ФайлСхемы"			, лфайлСхемыXSD);
	
	Параметры.Вставить("ФорматСуммы"		, "ЧЦ=18; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=");
	Параметры.Вставить("ФорматКоличества"	, "ЧРД=.; ЧН=; ЧГ=");
	
	Параметры.Вставить("Ссылка"				, УзелОбмена);
	Параметры.Вставить("ПрефиксВерсии"		, Строка(Формат(ТекущаяДата()-НачалоДня(ТекущаяДата()), "ЧГ=0"))); 
	
	Параметры.Вставить("УчетнаяПолитика"	, ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(ТекущаяДата(), Ложь, , , Ложь));
	
	Если Параметры.ОбменТоварами Тогда
		
		Параметры.Вставить("ТаблицаКаталогов"		, Параметры.СохраненнаяТаблицаКаталогов.Получить());
		Параметры.Вставить("ТаблицаОтборовКаталогов", Параметры.СохраненнаяТаблицаОтборовКаталогов.Получить());
		
	КонецЕсли;	
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ПлатформаWindows = СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86
	ИЛИ СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64;
	
	Параметры.Вставить("ПлатформаWindows", ПлатформаWindows);
	
	ДатаФормирования = ТекущаяДата();
	Параметры.Вставить("ДатаФормирования", ДатаФормирования);
																																																					
	//добавляем расширения картинок
	РазрешенныеТипыКартинок = Новый Массив;
	РазрешенныеТипыКартинок.Добавить("gif");
	РазрешенныеТипыКартинок.Добавить("jpg");
	РазрешенныеТипыКартинок.Добавить("jpeg");
	РазрешенныеТипыКартинок.Добавить("png");
	РазрешенныеТипыКартинок.Добавить(".gif");
	РазрешенныеТипыКартинок.Добавить(".jpg");
	РазрешенныеТипыКартинок.Добавить(".jpeg");
	РазрешенныеТипыКартинок.Добавить(".png");
	РазрешенныеТипыКартинок.Добавить("");
	Параметры.Вставить("РасширенияКартинок", РазрешенныеТипыКартинок);
	
	Параметры.Вставить("ПолнаяВыгрузка"	, (НЕ Параметры.ВыгружатьТолькоИзменения ИЛИ Параметры.ВыполнятьПолнуюВыгрузкуПринудительно));
	
	Если Параметры.ВыполнятьПолнуюВыгрузкуПринудительно ИЛИ ПринудительнаяПолноеОбновлениеДанныхТовара тогда
		Параметры.Вставить("ПринудительнаяПолноеОбновлениеДанныхТовара", Истина);   		
	Иначе
		Параметры.Вставить("ПринудительнаяПолноеОбновлениеДанныхТовара", Ложь);   		
	КонецЕсли;
	
	Параметры.НастройкаВерсионностиВыгружаемыхДанных = УзелОбмена.НастройкаВерсионностиВыгружаемыхДанных.Получить();  	
	
	Параметры.Вставить("ДатаДеактивацииПриПакетнойВыгрузке"		, Неопределено);
	
	//добавляем  данные для логирования
	Если Параметры.КаталогЛога = "" тогда
		
		Сообщить("Для настройки не задан каталог хранения лога. Лог будет храниться в каталоге выгрузки файлов.");
		
		Параметры.КаталогЛога = Параметры.КаталогВыгрузки;
		
		Если Параметры.КаталогЛога = "" тогда
			Сообщить("Не удалось указать каталог выгрузки в качестве каталога хранения лога. Ведение лога невозможно.");
		КонецЕсли;
		
	КонецЕсли;
	
	ИмяФайлаЛога = "";
	Если НЕ ПустаяСтрока(Параметры.КаталогЛога) Тогда
			
		Если НЕ СуществуетФайл(Параметры.КаталогЛога + "\reports") тогда
			СоздатьКаталог(Параметры.КаталогЛога + "\reports");	
		КонецЕсли;
			
		ИмяФайлаЛога = Параметры.КаталогЛога + "\reports\" + "Exchange_" + "(" + УзелОбмена.Наименование +  ")" +  СокрЛП(Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd")) + ".txt";
		
	КонецЕсли;
	
	Параметры.Вставить("ИмяФайлаЛога", ИмяФайлаЛога);
	
	///////////////////////////////////////
	// КЭШИРОВАНИЕ ОБЩЕЙ ИНФОРМАЦИИ     //
	/////////////////////////////////////

	тзнКэшДанных = новый ТаблицаЗначений;
	тзнКэшДанных.Колонки.Добавить("ИдКаталога");
	тзнКэшДанных.Колонки.Добавить("ОбщийСписокСкладов");
	тзнКэшДанных.Колонки.Добавить("ОбщийСписокТиповЦен");
	тзнКэшДанных.Колонки.Добавить("ОбщийСписокЕдиницИзмерений");
	////////////////////////////////////////////
	тзнКэшДанных.Колонки.Добавить("ИмяДанных");
	тзнКэшДанных.Колонки.Добавить("Значение");
	
	Параметры.Вставить("КэшДанных", тзнКэшДанных);
	
	///////////////////////////////////////
	// ПАРАМЕТРЫ ОБЪЕКТОВ               //
	/////////////////////////////////////
	
	СтрСохраненныхНастроек = Параметры.СохраненныеНастройки.Получить();	
	
	Если СтрСохраненныхНастроек = Неопределено тогда
		Сообщить("При переходе с 4 на 5 версию модуля обмена, скорее всего не была запущена обработка перехода. Она лежит в каталоге вместе с модулем обмена.");
		Возврат Ложь;
	КонецЕсли;
	
	Попытка		
	    ДобавитьСтруктурыНастроекВПараметры(Параметры, СтрСохраненныхНастроек.ИнформацияОНоменклатуре);
		Параметры.НастройкаСвойствТоваровИХарактеристик = ПланыОбмена.Б_ОбменССайтом.ОбновитьСвойстваВТаблицеЗначений(Параметры.НастройкаСвойствТоваровИХарактеристик);
		
	    ДобавитьСтруктурыНастроекВПараметры(Параметры, СтрСохраненныхНастроек.ПользовательскиеСправочники);
	    ДобавитьСтруктурыНастроекВПараметры(Параметры, СтрСохраненныхНастроек.Скидки);
	    ДобавитьСтруктурыНастроекВПараметры(Параметры, СтрСохраненныхНастроек.КартыЛояльности);
	    ДобавитьСтруктурыНастроекВПараметры(Параметры, СтрСохраненныхНастроек.Контрагенты);
		  
	    ДобавитьСтруктурыНастроекВПараметры(Параметры, СтрСохраненныхНастроек.Заказы);
	    ДобавитьСтруктурыНастроекВПараметры(Параметры, Параметры.СохраненныеНастройкиЗагружаемыхДокументов);
		
		//проверка корректности значений параметров объектов
		Параметры.КоличествоТоваровВПакете  			= ?(Параметры.КоличествоТоваровВПакете 				= 0, 1, Параметры.КоличествоТоваровВПакете);
		Параметры.КоличествоЗаказовВПакете 				= ?(Параметры.КоличествоЗаказовВПакете 				= 0, 1, Параметры.КоличествоЗаказовВПакете);
		Параметры.КоличествоКонтрагентовВПакете 		= ?(Параметры.КоличествоКонтрагентовВПакете 		= 0, 1, Параметры.КоличествоКонтрагентовВПакете);
		Параметры.КоличествоЭлементовСправочникаВПакете = ?(Параметры.КоличествоЭлементовСправочникаВПакете = 0, 1, Параметры.КоличествоЭлементовСправочникаВПакете);
		Параметры.КоличествоКартЛояльностиВПакете 		= ?(Параметры.КоличествоКартЛояльностиВПакете 		= 0, 1, Параметры.КоличествоКартЛояльностиВПакете);
		Параметры.КоличествоПредложенийВПакете 			= ?(Параметры.КоличествоПредложенийВПакете 			= 0, 1, Параметры.КоличествоПредложенийВПакете);
		Параметры.КоличествоСвойствВПакете 				= ?(Параметры.КоличествоСвойствВПакете 				= 0, 1, Параметры.КоличествоСвойствВПакете);
		Параметры.КоличествоСкидокВПакете 				= ?(Параметры.КоличествоСкидокВПакете 				= 0, 1, Параметры.КоличествоСкидокВПакете);
	Исключение
		Сообщить("При переходе с 4 на 5 версию модуля обмена, скорее всего не была запущена обработка перехода. Она лежит в каталоге вместе с модулем обмена.");
		Возврат Ложь;
	КонецПопытки;
	
	//Проверяем важные реквизиты	
	
	Если НЕ СтрСохраненныхНастроек.ИнформацияОНоменклатуре.Свойство("ВыгружатьКартинкиИФайлыПредложений") тогда
		Параметры.Вставить("ВыгружатьКартинкиИФайлыПредложений", Ложь);
	КонецЕсли;
	
	Возврат Истина;
	

КонецФункции

Процедура Таймаут(ДлительностьСек) Экспорт
	
	Начало = ТекущаяДата();
	Сч = 0;
	
	Пока Истина Цикл
		
		Сч = Сч + 1;
		
		Если Сч % 10000 = 0 Тогда
			Если ТекущаяДата() - Начало > ДлительностьСек Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьСтруктурыНастроекВПараметры(Параметры, СтруктураНастроек)
	
	Для Каждого ТекКлюч из СтруктураНастроек Цикл
		
		Если НЕ Параметры.Свойство(ТекКлюч.Ключ) тогда
			Параметры.Вставить(ТекКлюч.Ключ, ТекКлюч.Значение);	
		КонецЕсли;
  	КонецЦикла;
	
	
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Функция ВыгрузитьДанныеНаСайт(ПараметрыОбмена, ИмяКаталога, ПолноеИмяФайла,
			МассивПодкаталогов = Неопределено,
			ОжидатьЗавершенияИмпортаФайловСервером = Ложь,
			ТипСоединения = "catalog") Экспорт
	
	ОтветСервера = "";
	Соединение = Неопределено;
	НастройкиПодключения = ПараметрыОбмена.НастройкиПодключения;
	
	АдресДляРаботы = НастройкиПодключения.АдресСкрипта + "?type=" + ТипСоединения; 
	
	СообщитьПодробно("Отправка запроса на авторизацию.", ПараметрыОбмена);
	
	Успешно = АвторизацияВыполнена(Соединение, НастройкиПодключения, ОтветСервера, ПараметрыОбмена, ТипСоединения);
	
	Если Не Успешно Тогда
		СообщитьПодробно("Выгрузка на сайт не выполнена.", ПараметрыОбмена);	
		Возврат Ложь;
	КонецЕсли;
	
	КукиИмя				= СтрПолучитьСтроку(ОтветСервера, 2);
	КукиЗначение		= СтрПолучитьСтроку(ОтветСервера, 3);
	
	Попытка
		Токен			= "&" + СтрПолучитьСтроку(ОтветСервера, 4);
	Исключение
		
		Токен = "";
		СообщитьПодробно("CSRF токен не поддерживается. Для того, чтобы поддерживался - необходимо обновить БУС.", ПараметрыОбмена);	
		
	КонецПопытки;
	
	//Если у нас полная выгрузка, то получаем дату, до которой не загруженные элементы будут деактивированы.
	
	Если НЕ ПараметрыОбмена.ВыгружатьТолькоИзменения И ТипСоединения = "catalog" тогда
		
		Если ПараметрыОбмена.ДатаДеактивацииПриПакетнойВыгрузке = Неопределено тогда
			Попытка
				ПараметрыОбмена.ДатаДеактивацииПриПакетнойВыгрузке	=  "&" + СтрПолучитьСтроку(ОтветСервера, 5);
			Исключение
				
			КонецПопытки;
			
		КонецЕсли;
	КонецЕсли;
	
	ЗаголовкиЗапросов	= "Cookie: " + КукиИмя + "=" + КукиЗначение;
	
	СообщитьПодробно("Отправка запроса на инициализацию, для определения версии обмена данных.", ПараметрыОбмена);
	
	ОтветСервера = ПолучитьДанныеССервера(Соединение, АдресДляРаботы + НастройкиПодключения.ПараметрЗапросаHTTP_Инициализация + Токен + "&version=" + ПараметрыОбмена.ВерсияСхемы, ЗаголовкиЗапросов, ПараметрыОбмена);
	
	Если ОтветСервера = Неопределено Тогда 
		СообщитьПодробно("Выгрузка на сайт не выполнена. Ответ не пришел", ПараметрыОбмена);	
		Возврат Ложь;
	КонецЕсли;
	
	ZIPФайлыРазрешены = Ложь;
	ОграничениеРазмераФрагментаФайлаОбмена = 0;
	
	Если (ТипСоединения = "catalog" И СтрЧислоСтрок(ОтветСервера) < 2) тогда
		СообщитьПодробно("Выгрузка на сайт информации о товарах не выполнена." + Символы.ПС + " Не удалось прочитать ответ сервера. Параметры обмена не получены.", ПараметрыОбмена);	
		СообщитьПодробно("Ответ сервера: " + ОтветСервера, ПараметрыОбмена);	
		Возврат Ложь;
		
	КонецЕсли;
	
	Если(ТипСоединения = "sale"  И (СтрЧислоСтрок(ОтветСервера) < 4)) Тогда
		
		СообщитьПодробно("Выгрузка на сайт заказов не выполнена." + Символы.ПС + " Не удалось прочитать ответ сервера. Параметры обмена не получены.", ПараметрыОбмена);	
		СообщитьПодробно("Ответ сервера: " + ОтветСервера, ПараметрыОбмена);	
		Возврат Ложь;
		
	КонецЕсли;
	
	ZIPФайлыРазрешены = СокрЛП(НРег(СтрПолучитьСтроку(ОтветСервера, 1))) = НастройкиПодключения.ОтветСервера_ZIPРазрешен;
	
	Попытка 
		
		ОграничениеРазмераФрагментаФайлаОбмена = Число(СтрЗаменить(СокрЛП(НРег(СтрПолучитьСтроку(ОтветСервера, 2))), НастройкиПодключения.ОтветСервера_ОграничениеРазмераФрагментаФайлаОбмена, ""));
		
	Исключение
		
		СообщитьПодробно("Ошибка получения параметров обмена (ограничение размера файла)!", ПараметрыОбмена);	
		СообщитьПодробно("Ответ сервера: " + ОтветСервера, ПараметрыОбмена);	
		ОграничениеРазмераФрагментаФайлаОбмена = -1;
		
	КонецПопытки;
	
	КаталогДляВыгрузки = ИмяКаталога;
	
	МассивИсходныхXMLФайлов = Новый Массив;
	МассивИсходныхXMLФайлов.Добавить(Новый Файл(ПолноеИмяФайла));
	
	Если ZIPФайлыРазрешены Тогда
		
		СписокФайловДляОтправки = ПолучитьСписокZIPАрхивов(ПараметрыОбмена, КаталогДляВыгрузки, МассивПодкаталогов);
		
	Иначе
		
		СписокФайловДляОтправки = ПолучитьСписокФайловДляОтправки(КаталогДляВыгрузки, МассивПодкаталогов);
		
	КонецЕсли;
	
	Если СписокФайловДляОтправки.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ОграничениеРазмераФрагментаФайлаОбмена > 0 Тогда
		СписокФайловДляОтправки = ПолучитьСписокФрагментовФайлов(СписокФайловДляОтправки, ОграничениеРазмераФрагментаФайлаОбмена);
	КонецЕсли;
	
	ВсегоФайлов = СписокФайловДляОтправки.Количество();
	
	Для Каждого ТекФайл Из СписокФайловДляОтправки цикл
		
		ОтветСервера = ПолучитьРезультатОтправкиФайлаНаСервер(ПараметрыОбмена, ТекФайл.Значение, Соединение, АдресДляРаботы + НастройкиПодключения.ПараметрЗапросаHTTP_ПередачаФайла + ТекФайл.Представление + Токен, ЗаголовкиЗапросов);
		Если ZIPФайлыРазрешены Тогда
			Попытка
				УдалитьФайлы(ТекФайл.Значение);
			Исключение
			КонецПопытки;                                                        
		КонецЕсли;
		
		Если ОтветСервера = Неопределено Тогда
			
			СообщитьПодробно("Не удалось получить ответ сервера. Файл не отправлен.", ПараметрыОбмена);	
			
			Возврат Ложь;
		КонецЕсли;
		
		СостояниеОбмена = СокрЛП(НРег(СтрПолучитьСтроку(ОтветСервера,1)));
		
		Если СостояниеОбмена = НастройкиПодключения.ОтветСервера_АварийноеЗавершениеТекущейОперации Тогда
			
			СообщитьПодробно("Произошла ошибка на стороне сервера. Файл не отправлен." + " (" + ТекФайл.Значение + ")." + Символы.ПС + "Ответ сервера: " + Символы.ПС + ОтветСервера, ПараметрыОбмена);	
			
			Возврат Ложь;
			
		ИначеЕсли СостояниеОбмена = НастройкиПодключения.ОтветСервера_УспешноеЗавершениеТекущейОперации Тогда
			
			Если СтрЧислоСтрок(ОтветСервера) > 1 Тогда
			СообщитьПодробно("Получен расширенный статус успешного завершения сеанса." + Символы.ПС + "Ответ сервера: " + Символы.ПС + ОтветСервера, ПараметрыОбмена);	
				
			КонецЕсли;
			
		Иначе
			
			СообщитьПодробно("Произошла ошибка на стороне сервера. Не получен статус завершения операции. Файл не отправлен" + " (" + ТекФайл.Значение + ")." + Символы.ПС + "Ответ сервера: " + Символы.ПС + ОтветСервера, ПараметрыОбмена);	
			СообщитьПодробно("Ответ сервера: " + ОтветСервера, ПараметрыОбмена);	
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	/////////////////////////////////////////////////////
	
	ИмпортУспешноЗавершен = Ложь;
	
	Если ОжидатьЗавершенияИмпортаФайловСервером Тогда
		
		Для Каждого ТекФайл Из МассивИсходныхXMLФайлов Цикл
			
			ИмпортПродолжается = Истина;
			ТекущееСостояние = "";
			
			Пока ИмпортПродолжается Цикл
				
				ИмпортПродолжается = Ложь;
				
				ОтветСервера = ПолучитьДанныеССервера(Соединение, АдресДляРаботы + НастройкиПодключения.ПараметрЗапросаHTTP_ИмпортФайлаСервером + ТекФайл.Имя + Токен, ЗаголовкиЗапросов, ПараметрыОбмена);
				
				Если ОтветСервера = Неопределено Тогда 
					
					Успешно = Ложь;
					СообщитьПодробно(ТекФайл.Имя + ": Не удалось получить текущее состояние процесса обмена. Данные обмена отправлены, но не загружены.", ПараметрыОбмена);	
					
				ИначеЕсли СтрЧислоСтрок(ОтветСервера) = 0 Тогда
					
					Успешно = Ложь;
					СообщитьПодробно(ТекФайл.Имя + ": Не удалось прочитать данные о текущем состоянии процесса обмена. Данные обмена отправлены, но не загружены.", ПараметрыОбмена);	
				Иначе
					
					СостояниеОбмена = СокрЛП(НРег(СтрПолучитьСтроку(ОтветСервера, 1)));
					
					Если СостояниеОбмена = НастройкиПодключения.ОтветСервера_АварийноеЗавершениеТекущейОперации Тогда
						
						Успешно = Ложь;
						СообщитьПодробно(ТекФайл.Имя + ": Произошла ошибка на стороне сервера."	+ Символы.ПС + "Ответ сервера" + ": " + Символы.ПС + ОтветСервера, ПараметрыОбмена);	
						
					ИначеЕсли СостояниеОбмена = НастройкиПодключения.ОтветСервера_УспешноеЗавершениеТекущейОперации Тогда
						
						ИмпортУспешноЗавершен = Истина;
						СообщитьПодробно(ТекФайл.Имя + ": Данные успешно обработаны сервером." + Символы.ПС + "Ответ сервера" + ": " + ОтветСервера, ПараметрыОбмена);	
					ИначеЕсли СостояниеОбмена = НастройкиПодключения.ОтветСервера_ВыполнениеТекущейОперации Тогда
						
						ИмпортПродолжается = Истина;
						ОтображениеСостояния(ОтветСервера);
						
						лСообщениеСервера = ?(СтрЧислоСтрок(ОтветСервера) >1, СтрПолучитьСтроку(ОтветСервера,2), ОтветСервера);
						СообщитьПодробно("Процес выполнения обмена: " + лСообщениеСервера, ПараметрыОбмена);
						
					Иначе
						
						Успешно = Ложь;
						СообщитьПодробно(ТекФайл.Имя + ": Произошла ошибка на стороне сервера. Получен неизвестный статус импорта." + Символы.ПС + "Ответ сервера" + ": " + Символы.ПС + ОтветСервера, ПараметрыОбмена);	
						СообщитьПодробно("Ответ сервера: " + ОтветСервера, ПараметрыОбмена);	
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если НЕ ИмпортУспешноЗавершен Тогда
				
				ОтображениеСостояния("");

				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОтображениеСостояния("");
	
	Возврат Успешно;
	
КонецФункции

Функция ВыгрузитьЛогФайлНаСайт(ПараметрыОбмена)
	
	ТипСоединения = "catalog";
	ОтветСервера = "";
	Соединение = Неопределено;
	
	НастройкиПодключения = ПараметрыОбмена.НастройкиПодключения;
	
	АдресДляРаботы = НастройкиПодключения.АдресСкрипта + "?type=" + ТипСоединения; 
	
	СообщитьПодробно("Отправка запроса на авторизацию.", ПараметрыОбмена);
	
	Успешно = АвторизацияВыполнена(Соединение, НастройкиПодключения, ОтветСервера, ПараметрыОбмена, ТипСоединения);
	
	Если Не Успешно Тогда
		СообщитьПодробно("Выгрузка на сайт не выполнена.", ПараметрыОбмена);	
		Возврат Ложь;
	КонецЕсли;
	
	КукиИмя				= СтрПолучитьСтроку(ОтветСервера, 2);
	КукиЗначение		= СтрПолучитьСтроку(ОтветСервера, 3);
	
	Попытка
		Токен			= "&" + СтрПолучитьСтроку(ОтветСервера, 4);
	Исключение
		
		Токен = "";
		СообщитьПодробно("CSRF токен не поддерживается. Для того, чтобы поддерживался - необходимо обновить БУС.", ПараметрыОбмена);	
		
	КонецПопытки;
	
	ЗаголовкиЗапросов	= "Cookie: " + КукиИмя + "=" + КукиЗначение;
	
	ПолноеИмяФайлаАрхива = ПолучитьПутьДляПлатформы(ПараметрыОбмена.ПлатформаWindows, ПараметрыОбмена.КаталогЛога + "\reports\" + "Exchange_" + "(" + ПараметрыОбмена.ссылка.Наименование +  ")" +  СокрЛП(Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd")) + ".zip");
	ЗаписьАрхива = Новый ЗаписьZipФайла(ПолноеИмяФайлаАрхива);
	НовыйСписокФайлов = Новый СписокЗначений;
	ЗаписьАрхива.Добавить(ПолучитьПутьДляПлатформы(ПараметрыОбмена.ПлатформаWindows, ПараметрыОбмена.КаталогЛога + "\reports\" + "Exchange_" + "(" + ПараметрыОбмена.ссылка.Наименование +  ")" +  СокрЛП(Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd")) + ".txt"));
	
	Если ПараметрыОбмена.ХранитьФайлыОбменаНаСайте тогда
		МассивПодкаталогов = Новый Массив;
		МассивПодкаталогов.Добавить(СокрЛП(ПараметрыОбмена.ссылка.Код));
		
	    ИмяАрхиваОбмена = ПолучитьПутьДляПлатформы(ПараметрыОбмена.ПлатформаWindows, ПараметрыОбмена.КаталогЛога + "\reports\Exchange.zip");
		
		СписокАрхивов 	= ПолучитьСписокZIPАрхивов(ПараметрыОбмена, ПолучитьПутьДляПлатформы(ПараметрыОбмена.ПлатформаWindows, ПараметрыОбмена.КаталогЛога + "\reports"), МассивПодкаталогов, ИмяАрхиваОбмена);
		
		Если СписокАрхивов.Количество() > 0 тогда
			ЗаписьАрхива.Добавить(СписокАрхивов[0].значение);
		КонецЕсли;
	КонецЕсли;
	Попытка
		ЗаписьАрхива.Записать();
	Исключение
		СообщитьПодробно("Не удалось записать zip-архив на диск!", ПараметрыОбмена);	
	КонецПопытки;
	
	Если ПараметрыОбмена.ХранитьФайлыОбменаНаСайте тогда
		Если СписокАрхивов.Количество() > 0 тогда
			УдалитьФайлы(СписокАрхивов[0].значение);				
		КонецЕсли;	
	КонецЕсли;	
	
	ПредставлениеФайла 	=  "\Reports\" + "Exchange_" + "(" + ПараметрыОбмена.ссылка.Наименование +  ")" +  СокрЛП(Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd")) + ".zip";
	
	ОтветСервера 		= ПолучитьРезультатОтправкиФайлаНаСервер(ПараметрыОбмена, ПолноеИмяФайлаАрхива, Соединение, АдресДляРаботы + НастройкиПодключения.ПараметрЗапросаHTTP_ПередачаФайла + ПредставлениеФайла + Токен, ЗаголовкиЗапросов);
	
	УдалитьФайлы(ПолноеИмяФайлаАрхива);
	
	Если ОтветСервера = Неопределено Тогда
		
		СообщитьПодробно("Не удалось получить ответ сервера. Файл не отправлен.", ПараметрыОбмена);	
		
		Возврат Ложь;
	КонецЕсли;
	
	СостояниеОбмена = СокрЛП(НРег(СтрПолучитьСтроку(ОтветСервера,1)));
	
	Если СостояниеОбмена = НастройкиПодключения.ОтветСервера_АварийноеЗавершениеТекущейОперации Тогда
		
		СообщитьПодробно("Произошла ошибка на стороне сервера. Файл не отправлен." + " (" + ПолноеИмяФайлаАрхива + ")." + Символы.ПС + "Ответ сервера: " + Символы.ПС + ОтветСервера, ПараметрыОбмена);	
		
		Возврат Ложь;
		
	ИначеЕсли СостояниеОбмена = НастройкиПодключения.ОтветСервера_УспешноеЗавершениеТекущейОперации Тогда
		
		Если СтрЧислоСтрок(ОтветСервера) > 1 Тогда
			СообщитьПодробно("Получен расширенный статус успешного завершения сеанса." + Символы.ПС + "Ответ сервера: " + Символы.ПС + ОтветСервера, ПараметрыОбмена);	
			
		КонецЕсли;
		
	Иначе
		
		СообщитьПодробно("Произошла ошибка на стороне сервера. Не получен статус завершения операции. Файл не отправлен" + " (" + ПолноеИмяФайлаАрхива + ")." + Символы.ПС + "Ответ сервера: " + Символы.ПС + ОтветСервера, ПараметрыОбмена);	
		СообщитьПодробно("Ответ сервера: " + ОтветСервера, ПараметрыОбмена);	
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ВыгрузитьДанныеОДективацииНаСайт(ПараметрыОбмена, ТипСоединения = "catalog") Экспорт
	
	Если ПараметрыОбмена.ДатаДеактивацииПриПакетнойВыгрузке = Неопределено тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОтветСервера = "";
	Соединение = Неопределено;
	НастройкиПодключения = ПараметрыОбмена.НастройкиПодключения;
	
	АдресДляРаботы = НастройкиПодключения.АдресСкрипта + "?type=" + ТипСоединения; 
	
	СообщитьПодробно("Отправка запроса на авторизацию.", ПараметрыОбмена);
	
	Успешно = АвторизацияВыполнена(Соединение, НастройкиПодключения, ОтветСервера, ПараметрыОбмена, ТипСоединения);
	
	Если Не Успешно Тогда
		СообщитьПодробно("Не выполнена выгрузка на сайт информации о деактивации.", ПараметрыОбмена);	
		Возврат Ложь;
	КонецЕсли;
	
	КукиИмя				= СтрПолучитьСтроку(ОтветСервера, 2);
	КукиЗначение		= СтрПолучитьСтроку(ОтветСервера, 3);
	
	Попытка
		Токен			= "&" + СтрПолучитьСтроку(ОтветСервера, 4);
	Исключение
		
		Токен = "";
		СообщитьПодробно("CSRF токен не поддерживается. Для того, чтобы поддерживался - необходимо обновить БУС.", ПараметрыОбмена);	
		
	КонецПопытки;
	ЗаголовкиЗапросов	= "Cookie: " + КукиИмя + "=" + КукиЗначение;
	ОтветСервера = ПолучитьДанныеССервера(Соединение, АдресДляРаботы + НастройкиПодключения.ПараметрЗапросаHTTP_ДеактивацияДанныхПоДате + ПараметрыОбмена.ДатаДеактивацииПриПакетнойВыгрузке + Токен, ЗаголовкиЗапросов, ПараметрыОбмена);
	
	Если ОтветСервера = Неопределено Тогда 
		
		Успешно = Ложь;
		СообщитьПодробно("Не удалось получить текущее состояние процесса деактивации элементов.", ПараметрыОбмена);	
		
	ИначеЕсли СтрЧислоСтрок(ОтветСервера) = 0 Тогда
		
		Успешно = Ложь;
		СообщитьПодробно("Не удалось получить текущее состояние процесса деактивации элементов.", ПараметрыОбмена);	
	Иначе
		
		СостояниеОбмена = СокрЛП(НРег(СтрПолучитьСтроку(ОтветСервера, 1)));
		
		Если СостояниеОбмена = НастройкиПодключения.ОтветСервера_АварийноеЗавершениеТекущейОперации Тогда
			
			Успешно = Ложь;
			СообщитьПодробно("Произошла ошибка на стороне сервера."	+ Символы.ПС + "Ответ сервера" + ": " + Символы.ПС + ОтветСервера, ПараметрыОбмена);	
			
		ИначеЕсли СостояниеОбмена = НастройкиПодключения.ОтветСервера_УспешноеЗавершениеТекущейОперации Тогда
			
			ИмпортУспешноЗавершен = Истина;
			
		ИначеЕсли СостояниеОбмена = НастройкиПодключения.ОтветСервера_ВыполнениеТекущейОперации Тогда
			
			ИмпортПродолжается = Истина;
		Иначе
			
			Успешно = Ложь;
			СообщитьПодробно("Произошла ошибка на стороне сервера. Получен неизвестный статус." + Символы.ПС + "Ответ сервера" + ": " + Символы.ПС + ОтветСервера, ПараметрыОбмена);	
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Успешно;
	
КонецФункции

Функция ПолучитьСписокZIPАрхивов(ПараметрыОбмена, КаталогДляВыгрузки, МассивПодкаталогов, ИмяФайла = "")
	
	// Для корректного формирования zip перемещаем файлы во временную папку, а их нее уже пакуем.
	// Иначе не удается получить правильную струкутру папок архива объектом ЗаписьЗипФайла (пути сохраняются без import_files)
	
	ВременнаяПапка = КаталогВременныхФайлов() + "webdata_zip";
	КаталогОчищен(ВременнаяПапка, ПараметрыОбмена);
	УдалитьФайлы(ВременнаяПапка);
	СоздатьКаталог(ВременнаяПапка);
	
	Если МассивПодкаталогов <> Неопределено Тогда
	
		Для Каждого Подкаталог Из МассивПодкаталогов Цикл
			СоздатьКаталог(ПолучитьПутьДляПлатформы(ПараметрыОбмена.ПлатформаWindows, (ВременнаяПапка + "\" + Подкаталог)));
			Файлы = НайтиФайлы(ПолучитьПутьДляПлатформы(ПараметрыОбмена.ПлатформаWindows, (КаталогДляВыгрузки + "\" + Подкаталог)), "*.*", Истина);
			Для Каждого Файл Из Файлы Цикл
				Если Файл.ЭтоКаталог() Тогда
					Продолжить;
				КонецЕсли;
				ПапкаФайла = СтрЗаменить(Файл.Путь, ПолучитьПутьДляПлатформы(ПараметрыОбмена.ПлатформаWindows, КаталогДляВыгрузки + "\" + Подкаталог + "\") , "");
				НовыйПуть = ПолучитьПутьДляПлатформы(ПараметрыОбмена.ПлатформаWindows, (ВременнаяПапка + "\" + Подкаталог + "\" + ПапкаФайла));
				СоздатьКаталог(НовыйПуть);
				КопироватьФайл(Файл.ПолноеИмя, НовыйПуть + Файл.Имя);
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	ПолноеИмяФайлаАрхива = ?(ИмяФайла = "", ПолучитьИмяВременногоФайла("zip"), ИмяФайла);
	ЗаписьАрхива = Новый ЗаписьZipФайла(ПолноеИмяФайлаАрхива);
	
	НовыйСписокФайлов = Новый СписокЗначений;
	
	Если ИмяФайла = "" тогда
		ЗаписьАрхива.Добавить(ПолучитьПутьДляПлатформы(ПараметрыОбмена.ПлатформаWindows, КаталогДляВыгрузки + "\*.xml"), РежимСохраненияПутейZIP.НеСохранятьПути, РежимОбработкиПодкаталоговZIP.НеОбрабатывать);
	КонецЕсли;
	
	ЗаписьАрхива.Добавить(ПолучитьПутьДляПлатформы(ПараметрыОбмена.ПлатформаWindows, ВременнаяПапка + "\*.*"), РежимСохраненияПутейZIP.СохранятьОтносительныеПути, РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
	
	Попытка
		ЗаписьАрхива.Записать();
	Исключение
		
		СообщитьПодробно("Не удалось записать zip-архив на диск!", ПараметрыОбмена);	
		
		УдалитьФайлы(ВременнаяПапка);

		Возврат НовыйСписокФайлов;
	КонецПопытки;
	
	УдалитьФайлы(ВременнаяПапка);

	ФайлАрхива = Новый Файл(ПолноеИмяФайлаАрхива);
	НовыйСписокФайлов.Добавить(ПолноеИмяФайлаАрхива, ФайлАрхива.Имя);
	
	Возврат НовыйСписокФайлов;
	
КонецФункции


Функция ПолучитьСписокФрагментовФайлов(СписокФайлов, ОграничениеРазмераФрагмента)
	
	НовыйСписокФайлов = Новый СписокЗначений;
	Для Каждого ТекФайл Из СписокФайлов цикл
		
		ФайлНаДиске = Новый Файл(ТекФайл.Значение);
		Если ФайлНаДиске.Размер() > ОграничениеРазмераФрагмента Тогда
			МассивФрагментов = РазделитьФайл(ФайлНаДиске.ПолноеИмя, ОграничениеРазмераФрагмента);
			Для Каждого НовыйФайл Из МассивФрагментов Цикл
				НовыйСписокФайлов.Добавить(НовыйФайл, ТекФайл.Представление);
			КонецЦикла;
			УдалитьФайлы(ФайлНаДиске.ПолноеИмя);
		Иначе
			НовыйСписокФайлов.Добавить(ТекФайл.Значение, ТекФайл.Представление);
		КонецЕсли;
		
	КонецЦикла;
	Возврат НовыйСписокФайлов;
	
КонецФункции

Функция ПолучитьСписокФайловДляОтправки(КаталогНаДиске, МассивПодкаталогов);
	
	СписокФайлов = Новый СписокЗначений;
	Маска = "*.*";
	
	ВсеФайлыДляВыгрузки = НайтиФайлы(КаталогНаДиске, Маска);
	
	Если МассивПодкаталогов <> Неопределено Тогда
		
		Для Каждого Подкаталог Из МассивПодкаталогов Цикл
			
			ФайлыВПодкаталоге = НайтиФайлы(КаталогНаДиске + "\" + Подкаталог, Маска);
			
			Для Каждого ТекФайл Из ФайлыВПодкаталоге Цикл
				
				Если ТекФайл.ЭтоКаталог() Тогда
					
					ФайлыВДобавочномПодкаталоге = НайтиФайлы(ТекФайл.ПолноеИмя, Маска);
					
					Для Каждого ТекФайлВПодкаталоге Из ФайлыВДобавочномПодкаталоге Цикл
						
						Если НЕ ТекФайлВПодкаталоге.ЭтоКаталог() Тогда	
							ВсеФайлыДляВыгрузки.Добавить(ТекФайлВПодкаталоге);
						КонецЕсли;
						
					КонецЦикла;
					
				Иначе
					
					ВсеФайлыДляВыгрузки.Добавить(ТекФайл);  
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого ТекФайл Из ВсеФайлыДляВыгрузки цикл
		
		Если НЕ ТекФайл.ЭтоКаталог() Тогда
			
			ПолноеИмяФайлаДляСервера = ПолучитьИмяФайлаДляСервера(КаталогНаДиске, ТекФайл);
			СписокФайлов.Добавить(ТекФайл.ПолноеИмя, ПолноеИмяФайлаДляСервера);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СписокФайлов;
	
КонецФункции

Функция ПолучитьИмяФайлаДляСервера(КаталогНаДиске, ФайлОбъект)
	
	ПолноеИмяФайлаДляСервера = "";
	
	Если Найти(ФайлОбъект.Имя, ".xml") > 0 Тогда
		
		ПолноеИмяФайлаДляСервера = ФайлОбъект.Имя;
		
	Иначе
		
		//у картинки надо оставить 2 папки и развернуть слэши
		ПолноеИмяФайлаДляСервера = ФайлОбъект.ПолноеИмя;
		ПутьДляУдаления = КаталогНаДиске + "\";
		ПолноеИмяФайлаДляСервера = СтрЗаменить(ПолноеИмяФайлаДляСервера, ПутьДляУдаления, "");
		ПолноеИмяФайлаДляСервера = СтрЗаменить(ПолноеИмяФайлаДляСервера, "\", "/");
		
	КонецЕсли;
	
	ПолноеИмяФайлаДляСервера = ПолучитьИмяФайлаБезДополнительныхРасширений(КаталогНаДиске, ПолноеИмяФайлаДляСервера);
	
	Возврат ПолноеИмяФайлаДляСервера;
	
КонецФункции

Функция ПолучитьИмяФайлаБезДополнительныхРасширений(КаталогНаДиске, ИсходноеИмяФайла)
	
	ПозицияТочки = Найти(ИсходноеИмяФайла, ".");
	
	ИмяФайла = Лев(ИсходноеИмяФайла, ПозицияТочки - 1);
	
	ПраваяЧастьИсходногоИмени = Прав(ИсходноеИмяФайла, СтрДлина(ИсходноеИмяФайла) - ПозицияТочки);
	
	ПозицияТочки = Найти(ПраваяЧастьИсходногоИмени, ".");
	
	Расширение = ПраваяЧастьИсходногоИмени;
	
	Если ПозицияТочки > 0 Тогда
		Расширение = Лев(ПраваяЧастьИсходногоИмени, ПозицияТочки - 1);
	КонецЕсли;
	
	Возврат ИмяФайла + "." + Расширение;
	
КонецФункции
 