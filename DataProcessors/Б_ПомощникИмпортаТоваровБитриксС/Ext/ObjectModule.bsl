// РИ ++ (c) Росинтеграл
// Шаблон работы с настройками во внешних обработках
// Переменные модуля

Перем мПрефиксНастроек;
Перем мКодИмениОбъектаНастроек;

// РИ -- (c) Росинтеграл
// Шаблон работы с настройками во внешних обработках
// Переменные модуля

// РИ ++ (c) Росинтеграл
// Шаблон работы с настройками во внешних обработках
// Процедуры и функции модуля

Перем мНачалоXML;
Перем мСтруктураДанных Экспорт;

Перем мКодировка;

Функция ПолучитьИмяОбъектаНастроек()
	
	ИмяЭтогоОбъекта = ЭтотОбъект.Метаданные().Имя;
	ИмяОбъекта = мПрефиксНастроек + ИмяЭтогоОбъекта;
	ДлинаИмени = СтрДлина(ИмяОбъекта);
	Лишнее = ДлинаИмени - 100;
	
	Если Лишнее <= 0 Тогда
		Возврат ИмяОбъекта;
	КонецЕсли;
	
	ИмяОбъекта = мПрефиксНастроек
		+ мКодИмениОбъектаНастроек + 
		+ ИмяЭтогоОбъекта;
	
	Возврат СокрЛП(Лев(ИмяОбъекта, 100));
	
КонецФункции

Процедура ЗагрузитьНастройки(ЗаполнитьПоУмолчанию = Ложь) Экспорт
	
	ИмяОбъекта = ПолучитьИмяОбъектаНастроек();
	НаименованиеНастройки = ПолучитьИмяОбъектаНастроек(); // также, как и объект
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	СохраненныеНастройки.СохраненнаяНастройка
	|ИЗ
	|	РегистрСведений.СохраненныеНастройки КАК СохраненныеНастройки
	|ГДЕ
	|	СохраненныеНастройки.НаименованиеНастройки = &НаименованиеНастройки
	|	И СохраненныеНастройки.ИмяОбъекта = &ИмяОбъекта";
	
	Запрос.УстановитьПараметр("НаименованиеНастройки", НаименованиеНастройки);
	Запрос.УстановитьПараметр("ИмяОбъекта", ИмяОбъекта);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если НЕ Выборка.Следующий() Тогда
		Если ЗаполнитьПоУмолчанию Тогда
			ЗаполнитьПоУмолчанию();
		КонецЕсли;
		Возврат;
	КонецЕсли;
		
	СохраненнаяНастройка = Выборка.СохраненнаяНастройка.Получить();
	
	Если СохраненнаяНастройка = НеОпределено Тогда
		Если ЗаполнитьПоУмолчанию Тогда
			ЗаполнитьПоУмолчанию();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	СтруктураНастроек = ПолучитьСтруктуруНастроек();
	
	ЗаполнитьЗначенияСвойств(СтруктураНастроек, СохраненнаяНастройка);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураНастроек);
	
КонецПроцедуры

Процедура ЗаполнитьПоУмолчанию() Экспорт
	
	ЭтотОбъект.АдресСайта = "http://адрес_сайта.ru/bitrix/admin/1c_exchange.php";
	ЭтотОбъект.ПользовательИмя = "имя_пользователя";
	
	ЭтотОбъект.СоздаватьГруппы = Истина;
	ЭтотОбъект.СоздаватьСвойства = Истина;
	ЭтотОбъект.УстанавливатьЦены = Истина;
	ЭтотОбъект.СоздаватьХарактеристики = Истина;
	
	ЭтотОбъект.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ЭтотОбъект.ИнтервалОтправкиЗапросов = 2;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ВидыНоменклатуры.Ссылка
		|ИЗ
		|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		|ГДЕ
		|	ВидыНоменклатуры.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
		|	И НЕ ВидыНоменклатуры.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЭтотОбъект.ВидНоменклатуры = Выборка.Ссылка;
	КонецЕсли; 
	
	ЭтотОбъект.БазоваяЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796");
	
КонецПроцедуры

Функция ПолучитьСтруктуруНастроек()
	
	СтруктураНастроек = Новый Структура;
	
	// Заполнить реквизитами объекта
	
	СтруктураНастроек.Вставить("АдресСайта");
	СтруктураНастроек.Вставить("ПользовательИмя");
	СтруктураНастроек.Вставить("ПользовательПароль");
	
	СтруктураНастроек.Вставить("ГруппаНоменклатуры");
	СтруктураНастроек.Вставить("СоздаватьГруппы");
	СтруктураНастроек.Вставить("СоздаватьСвойства");
	СтруктураНастроек.Вставить("УстанавливатьЦены");
	СтруктураНастроек.Вставить("СоздаватьХарактеристики");
	СтруктураНастроек.Вставить("ЗагружатьКартинки");
	
	СтруктураНастроек.Вставить("ИнтервалОтправкиЗапросов");
	
	СтруктураНастроек.Вставить("ВидНоменклатуры");
	СтруктураНастроек.Вставить("БазоваяЕдиницаИзмерения");
	
	СтруктураНастроек.Вставить("Валюта");
	
	Возврат СтруктураНастроек;
	
КонецФункции

Процедура СохранитьНастройки() Экспорт
	
	СтруктураНастроек = ПолучитьСтруктуруНастроек();
	
	ЗаполнитьЗначенияСвойств(СтруктураНастроек, ЭтотОбъект);
	
	ИмяОбъекта = ПолучитьИмяОбъектаНастроек();
	НаименованиеНастройки = ПолучитьИмяОбъектаНастроек(); // также, как и объект
	
	Зап = РегистрыСведений.СохраненныеНастройки.СоздатьМенеджерЗаписи();
	Зап.ИмяОбъекта = ИмяОбъекта;
	Зап.НаименованиеНастройки = НаименованиеНастройки;
	Зап.СохраненнаяНастройка = Новый ХранилищеЗначения(СтруктураНастроек, Новый СжатиеДанных(9));
	
	Зап.Записать();
	
КонецПроцедуры

// РИ -- (c) Росинтеграл
// Шаблон работы с настройками во внешних обработках
// Процедуры и функции модуля

Процедура ДобавитьОписаниеОшибки(ОписаниеОшибки, Дополнение)
	Если ПустаяСтрока(ОписаниеОшибки) Тогда
		ОписаниеОшибки = Дополнение;
	Иначе
		ОписаниеОшибки = ОписаниеОшибки + Символы.ПС + Дополнение;
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьСтруктуруПараметровСайта(АдресРесурса = "") Экспорт
	
	Если ПустаяСтрока(АдресРесурса) Тогда
		
		СтруктураПараметровСайтаHTTP = ПроцедурыОбменаССайтом.РазобратьАдресСайта(АдресСайта);
		
	Иначе
		
		СтруктураПараметровСайтаHTTP = ПроцедурыОбменаССайтом.РазобратьАдресСайта(АдресРесурса);
		
	КонецЕсли;
	
	СтруктураПараметровСайта = Новый Структура;
	
	Для Каждого КлючЗначение Из СтруктураПараметровСайтаHTTP Цикл
		СтруктураПараметровСайта.Вставить(СтрЗаменить(КлючЗначение.Ключ, "HTTP", ""), КлючЗначение.Значение)
	КонецЦикла;
	
	Если НЕ СтруктураПараметровСайта.Свойство("ЗащищенноеСоединение") Тогда
		СтруктураПараметровСайта.Вставить("ЗащищенноеСоединение", Ложь);
	КонецЕсли;

	Если СтруктураПараметровСайта.Порт = 0 Тогда
		Если СтруктураПараметровСайта.ЗащищенноеСоединение Тогда
			СтруктураПараметровСайта.Порт = 443;
		Иначе
			СтруктураПараметровСайта.Порт = 80;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураПараметровСайта.Порт = 443
		И НЕ СтруктураПараметровСайта.ЗащищенноеСоединение Тогда
		СтруктураПараметровСайта.ЗащищенноеСоединение = Истина;
	КонецЕсли;
	
	СтруктураПараметровСайта.Вставить("ПроксиИспользование", Ложь);
	СтруктураПараметровСайта.Вставить("ИмяПользователя", ПользовательИмя);
	СтруктураПараметровСайта.Вставить("Пароль", ПользовательПароль);
	
	Сервер = СтруктураПараметровСайта.Сервер;

	Возврат СтруктураПараметровСайта;
	
КонецФункции

Процедура ВывестиОжидание(Информер, Отсчет)
	
	ТекстОжидание = Символы.ПС + "Ожидание: ";
	ТекстСообщения = Информер.Состояние.Значение;
	Поз = Найти(ТекстСообщения, ТекстОжидание);
	
	Если Поз > 0 Тогда
		ТекстСообщения = Лев(ТекстСообщения, Поз - 1);
	КонецЕсли;
	
	Информер.Состояние.Значение = ТекстСообщения + ТекстОжидание + Отсчет + " сек.";
	
КонецПроцедуры

Процедура ОтобразитьСостояние(Информер, Текст)

	Информер.Состояние.Значение = Символы.ПС + Текст;

КонецПроцедуры

Процедура ОтобразитьСтатусВыполняется(Информер)

	Информер.Статус.Заголовок = "Выполняется...";
	Информер.Статус.Картинка = БиблиотекаКартинок.Сформировать;
	Информер.Статус.Видимость = Истина;
	Информер.Индикатор.Видимость = Истина;
	Информер.Прервать.Видимость = Истина;
	
КонецПроцедуры

Процедура ОтобразитьСтатусЗавершено(Информер)

	Информер.Статус.Заголовок = "Завершено";
	Информер.Статус.Картинка = БиблиотекаКартинок.ЗаписатьИЗакрыть;
	Информер.Индикатор.Видимость = Ложь;
	Информер.Прервать.Видимость = Ложь;

КонецПроцедуры

Процедура ОтобразитьСтатусЗавершеноСОшибкой(Информер)
	
	Информер.Статус.Заголовок = "Ошибка";
	Информер.Статус.Картинка = БиблиотекаКартинок.Удалить;
	Информер.Индикатор.Видимость = Ложь;
	Информер.Прервать.Видимость = Ложь;

КонецПроцедуры

Процедура ОтобразитьИндикатор(Информер, Значение)

	Информер.Индикатор.Значение = Значение;

КонецПроцедуры

Функция КодировкаUTF8(Строка)
	
	СтрокаНРег = НРег(Строка);
	
	СигнатураUTF8 = НРег("<?xml version=""1.0"" encoding=""UTF-8""?>");
	
	UTF8УказанаЯвно = Найти(СтрокаНРег, СигнатураUTF8) > 0;
	
	Если UTF8УказанаЯвно Тогда
		Возврат Истина;
	КонецЕсли;
	
	СигнатураWIN1251 = НРег("<?xml version=""1.0"" encoding=""windows-1251""?>");
	
	WIN1251УказанаЯвно = Найти(СтрокаНРег, СигнатураWIN1251) > 0;
	
	Если WIN1251УказанаЯвно Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Длина = СтрДлина(Строка);
	
	Для Сч = 1 По Длина Цикл
		
		КодСимвола = КодСимвола(Сред(Строка, Сч, 1));
		
		Если КодСимвола > 1105
			И КодСимвола < 1500 Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ОпределитьКодировку(ТекстФайла, ИмяФайла)
	
	Если НЕ мКодировка = НеОпределено Тогда
		Возврат мКодировка;
	КонецЕсли;
	
	ТекстФайла.Прочитать(ИмяФайла);
	
	СтрокаТекст = ТекстФайла.ПолучитьТекст();
	
	Если КодировкаUTF8(СтрокаТекст) Тогда
		
		Возврат КодировкаТекста.UTF8;
		
	КонецЕсли;
	
	Возврат КодировкаТекста.ANSI;
	
КонецФункции

Функция HTTPПолучитьДанныеССервера(Соединение, ПараметрыЗапроса="", Заголовки="", СтрокаСообщенияПользователю = "")
	
	ОтветСервера   = Неопределено; 
	
	ИмяФайлаОтвета = ПолучитьИмяВременногоФайла();
	
	Попытка
		Соединение.Получить(СокрЛП(ПараметрыЗапроса), ИмяФайлаОтвета, СокрЛП(Заголовки));
	Исключение
		СтрокаСообщенияПользователю = "Не удалось получить данные с сервера. Проверьте правильность адреса сервера, порт, имя пользователя и пароль,"
		+ Символы.ПС + "а также настройки подключения к Интернет." + Символы.ПС + ОписаниеОшибки();
	КонецПопытки;	
	
	ФайлОтвета = Новый Файл(ИмяФайлаОтвета);
	
	Если ФайлОтвета.Существует() Тогда
		
		ТекстОтвета = Новый ТекстовыйДокумент();
		
		ТекстОтвета.Прочитать(ИмяФайлаОтвета, ОпределитьКодировку(ТекстОтвета, ИмяФайлаОтвета));
		
		ОтветСервера = ТекстОтвета.ПолучитьТекст();
		
		Если ТекстОтвета.КоличествоСтрок() = 0 Тогда
			
			СтрокаСообщенияПользователю = СтрокаСообщенияПользователю + Символы.ПС + "Получение данных с сервера: Получен пустой ответ сервера."; 	
			
		КонецЕсли;
		
	Иначе
		
		СтрокаСообщенияПользователю = СтрокаСообщенияПользователю + Символы.ПС + "Получение данных с сервера: Ответ сервера не получен."; 
		
	КонецЕсли;
	
	Попытка
		УдалитьФайлы(КаталогВременныхФайлов(), ИмяФайлаОтвета);
	Исключение
	КонецПопытки;
	
	Возврат ОтветСервера;
	
КонецФункции

Процедура ЗагрузитьДанныеXMLССайта(Информер, МассивЧастейXML, ОписаниеОшибки)
	
	СтрокаСообщенияПользователю = "";
	
	СтруктураПараметровСайта = ПолучитьСтруктуруПараметровСайта();
	
	ОтобразитьСостояние(Информер, "Соединение с " + СтруктураПараметровСайта.Сервер + "...");
	
	Соединение = ПолучитьСоединениеССервером();
	
	Если Соединение = Неопределено Тогда
		ОписаниеОшибки = "Ошибка при попытке установки соединения с сайтом.";
		Возврат;
	КонецЕсли;
	
	ОтобразитьСостояние(Информер, "Авторизация...");
	ОтобразитьИндикатор(Информер, 1);
	
	ОтветСервера = "";
	СтрокаСообщенияПользователю = "";
	
	Успешно = ПроцедурыОбменаССайтом.HTTPВыполнитьАвторизациюДляСоединения(Соединение, СтруктураПараметровСайта, ОтветСервера, СтрокаСообщенияПользователю);
	
	Если Не ПустаяСтрока(СтрокаСообщенияПользователю) Тогда
		Сообщить(СтрокаСообщенияПользователю);
	КонецЕсли;
	
	Если Не Успешно Тогда
		ОписаниеОшибки = "Не удалось выполнить авторизацию.";
		Возврат;
	КонецЕсли;
	
	ОтобразитьСостояние(Информер, "Инициализация...");
	
	КукиИмя      	  = СтрПолучитьСтроку(ОтветСервера, 2);
	КукиЗначение 	  = СтрПолучитьСтроку(ОтветСервера, 3);
	ЗаголовкиЗапросов = "Cookie: " + КукиИмя + "=" + КукиЗначение;
	
	ИнформацияДляПользователя = "";
	
	ОтветСервера = HTTPПолучитьДанныеССервера(Соединение, СтруктураПараметровСайта.АдресСкрипта + "?type=get_catalog&mode=init", ЗаголовкиЗапросов, ИнформацияДляПользователя);
	
	Если Не ПустаяСтрока(ИнформацияДляПользователя) Тогда
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки, ИнформацияДляПользователя);
		
	КонецЕсли;
	
	Если ОтветСервера = Неопределено Тогда 
		ДобавитьОписаниеОшибки(ОписаниеОшибки, "Не удалось получить параметры обмена с сервера.");
		Возврат;
	КонецЕсли;
	
	ОтобразитьСостояние(Информер, "Загрузка данных с сервера...");

	Пауза = ИнтервалОтправкиЗапросов;
	ДатаНачала = ТекущаяДата() - 1000;

	Пока Истина Цикл
		
		#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
		#КонецЕсли
		
		Сейчас = ТекущаяДата();
		Прошло = Сейчас - ДатаНачала;
		
		Если Прошло <= Пауза Тогда
			
			Если Пауза > 1 Тогда
				ВывестиОжидание(Информер, Пауза - Прошло);
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		ИнформацияДляПользователя = "";
		
		ОтветСервера = HTTPПолучитьДанныеССервера(Соединение, СтруктураПараметровСайта.АдресСкрипта + "?type=get_catalog&mode=query", ЗаголовкиЗапросов, ИнформацияДляПользователя);
		
		ДатаНачала = ТекущаяДата();
		
		Если Не ПустаяСтрока(ИнформацияДляПользователя) Тогда
			
			ДобавитьОписаниеОшибки(ОписаниеОшибки, ИнформацияДляПользователя);
			
		КонецЕсли;
		
		Если ОтветСервера = Неопределено Тогда 
			ДобавитьОписаниеОшибки(ОписаниеОшибки, "Не удалось загрузить данные с сервера.");
			Возврат;
		КонецЕсли;
		
		Результат = СтрПолучитьСтроку(ОтветСервера, 1);
		
		Если Результат = "failure" Тогда
			
			ДобавитьОписаниеОшибки(ОписаниеОшибки, "Не удалось загрузить данные с сервера. Ответ сервера:"
				+ Символы.ПС + ОтветСервера);
			Возврат;
			
		ИначеЕсли Результат = "finished=yes" Тогда
			
			Прервать;
			
		Иначе
			
			СтатусXML = ПолучитьСтатусXML(ОтветСервера);
			
			Если ПустаяСтрока(СтатусXML.XML) Тогда
				
				ДобавитьОписаниеОшибки(ОписаниеОшибки, "Нет данных XML. Ответ сервера:"
					+ Символы.ПС + ОтветСервера);
				Возврат;
				
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(СтатусXML.Статус) Тогда
			
				ОтобразитьСостояние(Информер, "Загрузка данных с сервера:"
					+ Символы.ПС + СтатусXML.Статус);
				
				ЗначениеИндикатора = ПолучитьЗначениеИндикатораПоСтатусу(СтатусXML.Статус);
				
				Если ЗначениеИндикатора > 0 Тогда
					
					ОтобразитьИндикатор(Информер, ЗначениеИндикатора);
				
				КонецЕсли;
				
			КонецЕсли;

			МассивЧастейXML.Добавить(СтатусXML.XML);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьЗначениеИндикатораПоСтатусу(Статус)
	
	Цифры = "0123456789";
	Длина = СтрДлина(Статус);
	ЗначениеВсегоСтрока = "";
	ЗначениеТекущееСтрока = "";
	Сигнатура = " из ";
	ДлинаСигнатуры = СтрДлина(Сигнатура);
	
	Поз = Найти(Статус, Сигнатура);
	
	Если Поз = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Для Сч = 1 По 10 Цикл
		
		// Текущее
		
		Символ = Сред(Статус, Поз - Сч, 1);
		
		Если Найти(Цифры, Символ) = 0
			ИЛИ ПустаяСтрока(Символ) Тогда
			Прервать;
		КонецЕсли;
		
		ЗначениеТекущееСтрока = Символ + ЗначениеТекущееСтрока;
		
		// Всего
		
		Символ = Сред(Статус, Поз + Сч + ДлинаСигнатуры - 1, 1);
		
		Если Найти(Цифры, Символ) = 0
			ИЛИ ПустаяСтрока(Символ) Тогда
			Прервать;
		КонецЕсли;
		
		ЗначениеВсегоСтрока = ЗначениеВсегоСтрока + Символ;

	КонецЦикла;
	
	Попытка
		ЗначениеВсего = Число(ЗначениеВсегоСтрока);
	Исключение
		Возврат 0;
	КонецПопытки;
	
	Попытка
		ЗначениеТекущее = Число(ЗначениеТекущееСтрока);
	Исключение
		Возврат 0;
	КонецПопытки;
	
	Если ЗначениеТекущее > ЗначениеВсего
		ИЛИ ЗначениеВсего = 0 Тогда
		Возврат 0;
	КонецЕсли;

	ЗначениеИндикатора = ЗначениеТекущее / ЗначениеВсего;
	
	Если Найти(НРег(Статус), "товаров") > 0 Тогда
		ПроцентИндикатора = 47 * ЗначениеИндикатора;
	ИначеЕсли Найти(НРег(Статус), "предложений") > 0 Тогда
		ПроцентИндикатора = 47 + 53 * ЗначениеИндикатора;
	Иначе
		ПроцентИндикатора = 100 * ЗначениеИндикатора;
	КонецЕсли;
	
	Если ПроцентИндикатора > 100 Тогда
		ПроцентИндикатора = 100;
	КонецЕсли;
		
	Возврат ПроцентИндикатора;
	
КонецФункции

Функция ПолучитьСтатусXML(ОтветСервера)
	
	СтатусXML = Новый Структура;
	СтатусXML.Вставить("Статус", "");
	СтатусXML.Вставить("XML", "");
	
	Поз = Найти(ОтветСервера, мНачалоXML);
	Если Поз = 0 Тогда
		Возврат СтатусXML;
	КонецЕсли;
	
	СтатусXML.Статус = СокрЛП(Лев(ОтветСервера, Поз - 1));
	СтатусXML.XML = СокрЛП(Сред(ОтветСервера, Поз));
	
	Возврат СтатусXML;
	
КонецФункции

Процедура НайтиСоздатьГруппыРекурсивно(Информер, СтрокиДереваГрупп, Обработано, Найдено, Создано)
	
	Для Каждого СтрокаГруппы Из СтрокиДереваГрупп Цикл
		
		Обработано = Обработано + 1;
		
		Если ПустаяСтрока(СтрокаГруппы.Ид) Тогда
			Продолжить;
		КонецЕсли;
		
		ОтобразитьСостояние(Информер, "Обработка группы: " + СтрокаГруппы.Наименование);
		
		Родитель = НеОпределено;
		
		Если СтрокаГруппы.Уровень() = 0 Тогда
			Родитель = ГруппаНоменклатуры;
		Иначе
			РодительВДереве = СтрокаГруппы.Родитель;
			Если НЕ РодительВДереве = НеОпределено Тогда
				Родитель = РодительВДереве.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
		ГруппаСсылка = ПолучениеОбъектаПоКоду(СтрокаГруппы.Ид, "СправочникСсылка.Номенклатура", "Справочник.Номенклатура"); 
		
		Если ЗначениеЗаполнено(ГруппаСсылка) Тогда
			
			Найдено = Найдено + 1;
			
		Иначе
			
			Группа = Справочники.Номенклатура.СоздатьГруппу();
			Группа.Наименование = СтрокаГруппы.Наименование;
			Группа.ВидНоменклатуры = ВидНоменклатуры;
			Группа.Родитель = Родитель;
			Группа.Б_Идентификатор = СтрокаГруппы.Ид;
			НачатьТранзакцию();

			Группа.Записать();
			ГруппаСсылка = Группа.Ссылка;
			
			ЗафиксироватьТранзакцию();
			
			Создано = Создано + 1;
			
		КонецЕсли;
		
		СтрокаГруппы.Ссылка = ГруппаСсылка;
		
		НайтиСоздатьГруппыРекурсивно(Информер, СтрокаГруппы.Строки, Обработано, Найдено, Создано)
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьРодителяНоменклатуры(Номенклатура, Группы)
	
	Если СоздаватьГруппы Тогда
		
		Если Группы.Количество() = 0 Тогда
			
			Номенклатура.Родитель = ГруппаНоменклатуры;
			
		Иначе
			
			ИдГруппы = Группы[0];
			
			Если ПустаяСтрока(ИдГруппы) Тогда
				
				Номенклатура.Родитель = ГруппаНоменклатуры;
				
			Иначе
				
				СтрокаГруппы = мСтруктураДанных.ДеревоГрупп.Строки.Найти(ИдГруппы, "Ид", Истина);
				
				Если СтрокаГруппы = НеОпределено Тогда
					
					Номенклатура.Родитель = ГруппаНоменклатуры;
					
				Иначе
					
					Номенклатура.Родитель = СтрокаГруппы.Ссылка;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Номенклатура.Родитель = ГруппаНоменклатуры;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьКомментарийНовогоОбъекта()
	
	Возврат ШтампВремени() + "Загружен автоматически с """ + Сервер + """";
	
КонецФункции

Функция ПолучитьЗначениеСвойстваНоменклатуры(ЗначенияСвойств, ИдСвойства)

	ИмяКолонки = "Ид";
	
	Если ЗначенияСвойств.Колонки.Найти(ИмяКолонки) = НеОпределено Тогда
		Возврат "";
	КонецЕсли;
	
	СтрокаСвойства = ЗначенияСвойств.Найти(ИдСвойства, ИмяКолонки);
	
	Если СтрокаСвойства = НеОпределено Тогда
		Возврат "";
	КонецЕсли;
		
	Возврат СтрокаСвойства.Значение;
	
КонецФункции

Процедура НайтиСоздатьНоменклатуру(НоменклатураСсылка, СтрокаТовара, Создана)

	НоменклатураСсылка = ПолучениеОбъектаПоКоду(СтрокаТовара.Ид, "СправочникСсылка.Номенклатура", "Справочник.Номенклатура"); 
	
	Если НЕ ЗначениеЗаполнено(НоменклатураСсылка) Тогда
		
		Создана = Истина;
		
		НачатьТранзакцию();
		
		Номенклатура = Справочники.Номенклатура.СоздатьЭлемент();
		
		Если ПустаяСтрока(СтрокаТовара.Артикул) Тогда
			
			Номенклатура.Артикул = ПолучитьЗначениеСвойстваНоменклатуры(СтрокаТовара.ЗначенияСвойств, "CML2_ARTICLE");
			
		Иначе
			
			Номенклатура.Артикул = СтрокаТовара.Артикул;
			
		КонецЕсли;
			
		Номенклатура.ВидНоменклатуры = ВидНоменклатуры;
		Номенклатура.ДополнительноеОписаниеНоменклатуры = СтрокаТовара.Описание;
		Номенклатура.Комментарий = СформироватьКомментарийНовогоОбъекта();
		Номенклатура.Наименование = СтрокаТовара.Наименование;
		Номенклатура.НаименованиеПолное = СтрокаТовара.Наименование;
		УстановитьРодителяНоменклатуры(Номенклатура, СтрокаТовара.Группы);
		
		БазоваяЕдиницаCML = НеОпределено;
		СтрокаТовара.БазоваяЕдиница.Свойство("Значение", БазоваяЕдиницаCML);
		
		Если БазоваяЕдиницаCML = НеОпределено
			ИЛИ ПустаяСтрока(БазоваяЕдиницаCML) Тогда
			
			БазоваяЕдиницаCML = ПолучитьЗначениеСвойстваНоменклатуры(СтрокаТовара.ЗначенияСвойств, "CML2_BASE_UNIT");
			
		КонецЕсли;
			
		Если ПустаяСтрока(БазоваяЕдиницаCML) Тогда
			
			Номенклатура.БазоваяЕдиницаИзмерения = БазоваяЕдиницаИзмерения;
			
		Иначе
			
			БазоваяЕдиницаСсылка = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию(БазоваяЕдиницаCML);
			
			Если ЗначениеЗаполнено(БазоваяЕдиницаСсылка) Тогда
				
				Номенклатура.БазоваяЕдиницаИзмерения = БазоваяЕдиницаСсылка;
				
			Иначе
				
				Номенклатура.БазоваяЕдиницаИзмерения = БазоваяЕдиницаИзмерения;
				
			КонецЕсли;
				
		КонецЕсли;
		
		Номенклатура.Записать();
		НоменклатураСсылка = Номенклатура.Ссылка;

		Единица = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
		Единица.Владелец = НоменклатураСсылка;
		Единица.ЕдиницаПоКлассификатору = БазоваяЕдиницаИзмерения;
		Единица.Наименование = БазоваяЕдиницаИзмерения.Наименование;
		Единица.Коэффициент = 1;
		Единица.Записать();
		
		Номенклатура.ЕдиницаДляОтчетов = Единица.Ссылка;
		Номенклатура.ЕдиницаХраненияОстатков = Единица.Ссылка;
		Номенклатура.Б_Идентификатор = СтрокаТовара.Ид;
		Номенклатура.Записать();
		
		
		ЗафиксироватьТранзакцию();
		
	КонецЕсли;

КонецПроцедуры

Процедура ПодготовитьТаблицуПредложений()
	
	мСтруктураДанных.ТаблицаПредложений.Колонки.Добавить("ИдХарактеристики", Новый ОписаниеТипов("Строка"));
	
	Для Каждого СтрокаПредложения Из мСтруктураДанных.ТаблицаПредложений Цикл
		
		Поз = Найти(СтрокаПредложения.Ид, "#");
		
		Если Поз = 0 Тогда
			
			СтрокаПредложения.ИдХарактеристики = "";
			
		Иначе
			
			СтрокаПредложения.ИдХарактеристики = СокрЛП(Сред(СтрокаПредложения.Ид, Поз + 1));
			СтрокаПредложения.Ид = СокрЛП(Лев(СтрокаПредложения.Ид, Поз - 1));
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ШтампВремени() Экспорт
	Возврат "[" + Формат(ТекущаяДата(), "ДЛФ=DT") + "] ";
КонецФункции

Процедура ДобавитьВСтатистику(Статистика, ТекстРаздела, Обработано, Найдено, Создано)
	
	ТекстСообщения = "[[Время]] [ТекстРаздела]: Обработано [Обработано] (Найдено [Найдено], Создано [Создано])";
	
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "[Время]", Формат(ТекущаяДата(), "ДЛФ=DT"));
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ТекстРаздела]", ТекстРаздела);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "[Обработано]", Обработано);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "[Найдено]", Найдено);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "[Создано]", Создано);
	
	Статистика.Добавить(ТекстСообщения);
	
КонецПроцедуры

Процедура СоздатьТовары(Информер, КоличествоКартинок, Статистика) Экспорт
	
	ПодготовитьТаблицуПредложений();

	ОтобразитьСтатусВыполняется(Информер);
	ОтобразитьИндикатор(Информер, 5);
	
	Если СоздаватьГруппы Тогда
		
		Обработано = 0;
		Найдено = 0;
		Создано = 0;
		
		СтрокиДереваГрупп = мСтруктураДанных.ДеревоГрупп.Строки;
		НайтиСоздатьГруппыРекурсивно(Информер, СтрокиДереваГрупп, Обработано, Найдено, Создано);
		
		ДобавитьВСтатистику(Статистика, "Группы", Обработано, Найдено, Создано);
		
	КонецЕсли;
	
	ВсегоТоваров = мСтруктураДанных.ТаблицаТоваров.Количество();
	Сч = 0;
	
	ДокУстановкиЦен = Документы.УстановкаЦенНоменклатуры.СоздатьДокумент();
	
	НоменклатураСоздано = 0;
	НоменклатураНайдено = 0;
	
	СвойстваОбработано = 0;
	СвойстваСоздано = 0;
	СвойстваНайдено = 0;
	
	ХарактеристикиОбработано = 0;
	ХарактеристикиНайдено = 0;
	ХарактеристикиСоздано = 0;
	
	ТипыЦенОбработано = 0;
	ТипыЦенНайдено = 0;
	ТипыЦенСоздано = 0;
	ЦеныУстановлено = 0;
	
	Для Каждого СтрокаТовара Из мСтруктураДанных.ТаблицаТоваров Цикл
		
		#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
		#КонецЕсли
		
		Сч = Сч + 1;
		
		ОтобразитьИндикатор(Информер, 100 * Сч / ВсегоТоваров);
		ОтобразитьСостояние(Информер, "Обработка товара: " +  СтрокаТовара.Наименование);
		
		Номенклатура = НеОпределено;
		НоменклатураСоздана = Ложь;
		НайтиСоздатьНоменклатуру(Номенклатура, СтрокаТовара, НоменклатураСоздана);
		
		Если НоменклатураСоздана Тогда
			НоменклатураСоздано = НоменклатураСоздано + 1;
		Иначе
			НоменклатураНайдено = НоменклатураНайдено + 1;
		КонецЕсли;
		
		СтрокаТовара.Ссылка = Номенклатура;
		
		Если СоздаватьСвойства Тогда
			
			ЗаполнитьСвойстваНоменклатруры(Номенклатура, СтрокаТовара.ЗначенияСвойств, СвойстваОбработано, СвойстваНайдено, СвойстваСоздано);
			
		КонецЕсли;
		
		Если СоздаватьХарактеристики Тогда
			
			СоздатьХарактеристикиНоменклатуры(Номенклатура, СтрокаТовара.Ид, ХарактеристикиОбработано, ХарактеристикиНайдено, ХарактеристикиСоздано);
			
		КонецЕсли;
		
		Если УстанавливатьЦены Тогда
			
			УстановитьЦены(Номенклатура, СтрокаТовара.Ид, ДокУстановкиЦен, ТипыЦенОбработано, ТипыЦенНайдено, ТипыЦенСоздано, ЦеныУстановлено);
			
		КонецЕсли;
		
		КоличествоКартинок = КоличествоКартинок + СтрокаТовара.Картинки.Количество();
		
	КонецЦикла;
	
	Если УстанавливатьЦены
		И ДокУстановкиЦен.Товары.Количество() > 0 Тогда
			
		ОтобразитьСостояние(Информер, "Установка цен...");
		
		ДокУстановкиЦен.Дата = ТекущаяДата();
		ДокУстановкиЦен.Комментарий = СформироватьКомментарийНовогоОбъекта();
	
		Попытка
			ДокУстановкиЦен.Записать(РежимЗаписиДокумента.Запись);
			Сообщить("Записан документ установки цен: " + ДокУстановкиЦен.Ссылка);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
			
	КонецЕсли;
	
	ОтобразитьСтатусЗавершено(Информер);
	
	ДобавитьВСтатистику(Статистика, "Товары", Сч, НоменклатураНайдено, НоменклатураСоздано);
	
	Если СоздаватьСвойства Тогда
		ДобавитьВСтатистику(Статистика, "Свойства", СвойстваОбработано, СвойстваНайдено, СвойстваСоздано);
	КонецЕсли;
	
	Если СоздаватьХарактеристики Тогда
		ДобавитьВСтатистику(Статистика, "Характеристики", ХарактеристикиОбработано, ХарактеристикиНайдено, ХарактеристикиСоздано);
	КонецЕсли;
	
	Если УстанавливатьЦены Тогда
		ДобавитьВСтатистику(Статистика, "Типы цен", ТипыЦенОбработано, ТипыЦенНайдено, ТипыЦенСоздано);
		Статистика.Добавить("Установлено цен: " + ЦеныУстановлено);
	КонецЕсли;

КонецПроцедуры

Функция НайтиКартинку(АдресКартинки, Номенклатура)

	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ХранилищеДополнительнойИнформации.Ссылка
	|ИЗ
	|	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
	|ГДЕ
	|	НЕ ХранилищеДополнительнойИнформации.ПометкаУдаления
	|	И ХранилищеДополнительнойИнформации.ИмяФайла ПОДОБНО &ИмяФайла
	|	И ХранилищеДополнительнойИнформации.Объект = &Объект
	|	И ХранилищеДополнительнойИнформации.ВидДанных = ЗНАЧЕНИЕ(Перечисление.ВидыДополнительнойИнформацииОбъектов.Изображение)";
	
	Запрос.УстановитьПараметр("Объект", Номенклатура);
	Запрос.УстановитьПараметр("ИмяФайла", АдресКартинки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		Возврат Выборка.Ссылка;
	
	КонецЕсли; 
	
	Возврат НеОпределено;

КонецФункции

Процедура ЗагрузитьКартинки(Информер, Статистика) Экспорт
	
	ВсегоТоваров = мСтруктураДанных.ТаблицаТоваров.Количество();
	Сч = 0;
	
	ОтобразитьСтатусВыполняется(Информер);
	
	Обработано = 0;
	Загружено = 0;
	Найдено = 0;
	
	Для Каждого СтрокаТовара Из мСтруктураДанных.ТаблицаТоваров Цикл
		
		#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
		#КонецЕсли
		
		Сч = Сч + 1;
		ОтобразитьИндикатор(Информер, 100 * Сч / ВсегоТоваров);
		
		Для Каждого Картинка Из СтрокаТовара.Картинки Цикл
			
			Обработано = Обработано + 1;
			
			Если ЗначениеЗаполнено(СтрокаТовара.Ссылка) тогда
			
				Если НЕ СтрокаТовара.Ссылка.ЭтоГруппа тогда
					
					ОтобразитьСостояние(Информер, "Обработка картинки:"
						+ Символы.ПС + Картинка);
						
					КартинкаСсылка = НайтиКартинку(Картинка, СтрокаТовара.Ссылка);
					
					Если ЗначениеЗаполнено(КартинкаСсылка) Тогда
						Найдено = Найдено + 1;
						Продолжить;
					КонецЕсли;
					
					ОтобразитьСостояние(Информер, "Загрузка картинки: " + Картинка);

					СтруктураПараметровСайта = ПолучитьСтруктуруПараметровСайта(Картинка);
					Соединение = ПолучитьСоединениеССервером();
			
					Если Соединение = Неопределено Тогда
						Сообщить("Ошибка при попытке установки соединения с сайтом: " + Картинка);
						Продолжить;
					КонецЕсли;
					
					ФайлКартинки = ПолучитьИмяВременногоФайла(РасширениеФайла(Картинка));
					
					Попытка
						Соединение.Получить(СтруктураПараметровСайта.АдресСкрипта, ФайлКартинки);
					Исключение
						Сообщить(ОписаниеОшибки());
						Продолжить;
					КонецПопытки;
					
					СохранитьКартинку(ФайлКартинки, Картинка, СтрокаТовара.Ссылка);
			
					Загружено = Загружено + 1;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	ОтобразитьСтатусЗавершено(Информер);
	
	ДобавитьВСтатистику(Статистика, "Картинки", Обработано, Найдено, Загружено);
	
КонецПроцедуры

Процедура СохранитьКартинку(ФайлКартинки, АдресКартинки, Номенклатура)
	
	Попытка
		Картинка = Новый Картинка(ФайлКартинки);
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	Спр = Справочники.ХранилищеДополнительнойИнформации.СоздатьЭлемент();
	Спр.ВидДанных = Перечисления.ВидыДополнительнойИнформацииОбъектов.Изображение;
	Спр.ИмяФайла = АдресКартинки;
	Спр.Наименование = "Картинка с сайта";
	Спр.Объект = Номенклатура;
	Спр.Хранилище = Новый ХранилищеЗначения(Картинка);
	Спр.Записать();
	
	Если НЕ ЗначениеЗаполнено(Номенклатура.ОсновноеИзображение) Тогда
		
		НоменклатураОбъект = Номенклатура.ПолучитьОбъект();
		НоменклатураОбъект.ОсновноеИзображение = Спр.Ссылка;
		НоменклатураОбъект.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

Функция РасширениеФайла(ИмяФайла)
	
	Строка = СтрЗаменить(ИмяФайла, ".", Символы.ПС);
	
	Всего = СтрЧислоСтрок(Строка);
	
	Если Всего < 2 Тогда
		Возврат "";
	КонецЕсли;
		
	Возврат СтрПолучитьСтроку(Строка, Всего);
	
КонецФункции

Процедура УстановитьЦены(Номенклатура, ИдНоменклатуры, ДокУстановкиЦен, ТипыЦенОбработано, ТипыЦенНайдено, ТипыЦенСоздано, ЦеныУстановлено)
	
	Найдено = мСтруктураДанных.ТаблицаПредложений.НайтиСтроки(Новый Структура("Ид", ИдНоменклатуры));
	
	Для Каждого СтрокаПредложения Из Найдено Цикл
		
		Если СтрокаПредложения.Цены.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтрокаЦены Из СтрокаПредложения.Цены Цикл
			
			Если Номенклатура.ЭтоГруппа = Истина тогда
				Продолжить;
			КонецЕсли;
			
			Попытка
				Цена = Число(СтрокаЦены.ЦенаЗаЕдиницу);
			Исключение
				Продолжить;
			КонецПопытки;
			
			Если Цена <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТипаЦены = мСтруктураДанных.ТаблицаТиповЦен.Найти(СтрокаЦены.ИдТипаЦены, "Ид");
			
			Если СтрокаТипаЦены = НеОпределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаТипаЦены.Ссылка) Тогда
				
				НайтиСоздатьТипЦен(СтрокаТипаЦены, ТипыЦенОбработано, ТипыЦенНайдено, ТипыЦенСоздано);
			
				Если НЕ ЗначениеЗаполнено(СтрокаТипаЦены.Ссылка) Тогда
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
			ЕстьТипЦен = ДокУстановкиЦен.ТипыЦен.Найти(СтрокаТипаЦены.Ссылка, "ТипЦен");
			Если ЕстьТипЦен = НеОпределено Тогда
				НовСтрока = ДокУстановкиЦен.ТипыЦен.Добавить();
				НовСтрока.ТипЦен = СтрокаТипаЦены.Ссылка;
			КонецЕсли;

			ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
			
			Если ЗначениеЗаполнено(СтрокаПредложения.Ссылка) Тогда
				ХарактеристикаНоменклатуры = СтрокаПредложения.Ссылка;
			КонецЕсли;
			
			Найдено = ДокУстановкиЦен.Товары.НайтиСтроки(
				Новый Структура(
				"Номенклатура, ХарактеристикаНоменклатуры, ТипЦен",
				Номенклатура, ХарактеристикаНоменклатуры, СтрокаТипаЦены.Ссылка));
				
			Если Найдено.Количество() > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТовары = ДокУстановкиЦен.Товары.Добавить();
			СтрокаТовары.Номенклатура = Номенклатура;
			СтрокаТовары.ХарактеристикаНоменклатуры = ХарактеристикаНоменклатуры;
			СтрокаТовары.Цена = Цена;
			СтрокаТовары.Валюта = Валюта;
			СтрокаТовары.ЕдиницаИзмерения = Номенклатура.ЕдиницаХраненияОстатков;
			СтрокаТовары.ТипЦен = СтрокаТипаЦены.Ссылка;
			
			ЦеныУстановлено = ЦеныУстановлено + 1;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура НайтиСоздатьТипЦен(СтрокаТипаЦены, ТипыЦенОбработано, ТипыЦенНайдено, ТипыЦенСоздано)
	
	ТипыЦенОбработано = ТипыЦенОбработано + 1;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ТипыЦенНоменклатуры.Ссылка
		|ИЗ
		|	Справочник.ТипыЦенНоменклатуры КАК ТипыЦенНоменклатуры
		|ГДЕ
		|	ТипыЦенНоменклатуры.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", СтрокаТипаЦены.Наименование);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		СтрокаТипаЦены.Ссылка = Выборка.Ссылка;
		ТипыЦенНайдено = ТипыЦенНайдено + 1;
		Возврат;
	
	КонецЕсли; 
	
	Спр = Справочники.ТипыЦенНоменклатуры.СоздатьЭлемент();
	Спр.Комментарий = СформироватьКомментарийНовогоОбъекта();
	Спр.Наименование = СтрокаТипаЦены.Наименование;
	Спр.ВалютаЦены = Валюта;
	Спр.ПорядокОкругления = Перечисления.ПорядкиОкругления.Окр0_01;
	Спр.Записать();
	
	СтрокаТипаЦены.Ссылка = Спр.Ссылка;
	
	ТипыЦенСоздано = ТипыЦенСоздано + 1;
	
КонецПроцедуры

Процедура СоздатьХарактеристикиНоменклатуры(Номенклатура, ИдНоменклатуры, Обработано, пНайдено, Создано)
	
	Найдено = мСтруктураДанных.ТаблицаПредложений.НайтиСтроки(Новый Структура("Ид", ИдНоменклатуры));
	
	Для Каждого СтрокаПредложения Из Найдено Цикл
		
		Если ПустаяСтрока(СтрокаПредложения.ИдХарактеристики) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаПредложения.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		Обработано = Обработано + 1;
		
		НаименованиеХарактеристики = СтрокаПредложения.Наименование;
		
		Если ПустаяСтрока(СтрокаПредложения.Наименование) Тогда
			НаименованиеХарактеристики = СтрокаПредложения.ИдХарактеристики;
		КонецЕсли;
		
		НоваяХарактеристика = Ложь;
		ХарактеристикаСсылка = НеОпределено;
		НайтиСоздатьХарактеристику(СтрокаПредложения.ИдХарактеристики, Номенклатура, НаименованиеХарактеристики, ХарактеристикаСсылка, НоваяХарактеристика, СтрокаПредложения.Характеристики);
		
		Если НоваяХарактеристика Тогда
			Создано = Создано + 1;
		Иначе
			пНайдено = пНайдено + 1;
		КонецЕсли;
		
		СтрокаПредложения.Ссылка = ХарактеристикаСсылка;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура НайтиСоздатьХарактеристику(ИдХарактеристики, Номенклатура, НаименованиеХарактеристики, ХарактеристикаСсылка, НоваяХарактеристика, СвойстваХарактеристики)
	
	ХарактеристикаСсылка = ПолучениеОбъектаПоКоду(ИдХарактеристики, "СправочникСсылка.ХарактеристикиНоменклатуры", "Справочник.ХарактеристикиНоменклатуры"); 
	
	Если ЗначениеЗаполнено(ХарактеристикаСсылка) Тогда
	
		Возврат;
		
	КонецЕсли;
	
	Если Номенклатура.ЭтоГруппа = Истина Тогда
	
		Возврат;
		
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Если НЕ Номенклатура.ВестиУчетПоХарактеристикам Тогда
		
		НоменклатураОбъект = Номенклатура.ПолучитьОбъект();
		НоменклатураОбъект.ВестиУчетПоХарактеристикам = Истина;
		НоменклатураОбъект.Записать();
		
	КонецЕсли;
		
	Спр = Справочники.ХарактеристикиНоменклатуры.СоздатьЭлемент();
	Спр.Владелец = Номенклатура;
	Спр.Наименование = НаименованиеХарактеристики;
	
	Спр.Б_Идентификатор = ИдХарактеристики;
	Спр.Записать();
	
	НайтиСоздатьСвойстваХарактеристики(Спр.Ссылка, СвойстваХарактеристики);
	
	ЗафиксироватьТранзакцию();
	
	ХарактеристикаСсылка = Спр.Ссылка;
	
	НоваяХарактеристика = Истина;
	
КонецПроцедуры

Процедура НайтиСоздатьСвойстваХарактеристики(Характеристика, ТаблицаСвойств)
	
	Если ТаблицаСвойств.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	Для Каждого СтрокаСвойства Из ТаблицаСвойств Цикл
		
		Если ПустаяСтрока(СтрокаСвойства.Наименование) Тогда
			Продолжить;
		КонецЕсли;
			
		НайтиСоздатьСвойствоХарактеристики(Характеристика, СтрокаСвойства);
		
	КонецЦикла;

КонецПроцедуры

Процедура НайтиСоздатьСвойствоХарактеристики(Характеристика, СтрокаСвойства)

	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СвойстваОбъектов.Ссылка,
		|	СвойстваОбъектов.ТипЗначения
		|ИЗ
		|	ПланВидовХарактеристик.СвойстваОбъектов КАК СвойстваОбъектов
		|ГДЕ
		|	СвойстваОбъектов.Наименование = &Наименование
		|	И СвойстваОбъектов.НазначениеСвойства = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры)";
	
	Запрос.УстановитьПараметр("Наименование", СтрокаСвойства.Наименование);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Свойство = НеОпределено;
	Значение = НеОпределено;
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ЗначенияСвойствОбъектов")) Тогда
			
			Свойство = Выборка.Ссылка;
			
			Значение = ПолучитьЗначениеСвойства(Свойство, СтрокаСвойства.Значение);
			
			Прервать;
		КонецЕсли;
			
	КонецЦикла;
	
	Если Свойство = НеОпределено Тогда
		
		НовоеСвойство = ПланыВидовХарактеристик.СвойстваОбъектов.СоздатьЭлемент();
		НовоеСвойство.НазначениеСвойства = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры;
		НовоеСвойство.Наименование = СтрокаСвойства.Наименование;
		НовоеСвойство.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ЗначенияСвойствОбъектов");
		НовоеСвойство.Записать();
		Свойство = НовоеСвойство.Ссылка;
		
	КонецЕсли; 
	
	Если Значение = НеОпределено Тогда
		
		НовоеЗначение = Справочники.ЗначенияСвойствОбъектов.СоздатьЭлемент();
		НовоеЗначение.Владелец = Свойство;
		НовоеЗначение.Наименование = СтрокаСвойства.Значение;
		НовоеЗначение.Записать();
		Значение = НовоеЗначение.Ссылка;
		
	КонецЕсли;
		
	Зап = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
	Зап.Значение = Значение;
	Зап.Объект = Характеристика;
	Зап.Свойство = Свойство;
	
	Зап.Записать();

КонецПроцедуры

Функция ПолучитьЗначениеСвойства(Свойство, Значение)

	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ЗначенияСвойствОбъектов.Ссылка
	|ИЗ
	|	Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Наименование = &Наименование
	|	И ЗначенияСвойствОбъектов.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Наименование", Значение);
	Запрос.УстановитьПараметр("Владелец", Свойство);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		Возврат Выборка.Ссылка;
	
	КонецЕсли; 
	
	Возврат НеОпределено;

КонецФункции

Процедура ЗаполнитьСвойстваНоменклатруры(Номенклатура, ТаблицаЗначенийСвойств, Обработано, Найдено, Создано);
	
	Для Каждого СтрокаЗначенияСвойства Из ТаблицаЗначенийСвойств Цикл
		
		Обработано = Обработано + 1;
		
		Если ПустаяСтрока(СтрокаЗначенияСвойства.Ид)
			ИЛИ ПустаяСтрока(СтрокаЗначенияСвойства.Значение)
			ИЛИ Лев(СтрокаЗначенияСвойства.Ид, 5) = "CML2_" Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ДанныеСвойства = мСтруктураДанных.ТаблицаСвойств.Найти(СтрокаЗначенияСвойства.Ид, "Ид");
		
		Если ДанныеСвойства = НеОпределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеСвойства.Множественное Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ДанныеСвойства.Ссылка) Тогда
			
			Новое = Ложь;
			
			НайтиСоздатьСвойство(ДанныеСвойства, Новое);
			
			Если НЕ ЗначениеЗаполнено(ДанныеСвойства.Ссылка) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Новое Тогда
				Создано = Создано + 1;
			Иначе
				Найдено = Найдено + 1;
			КонецЕсли;
			
		КонецЕсли;
		
		ЗаписатьЗначениеСвойства(Номенклатура, ДанныеСвойства, СтрокаЗначенияСвойства.Значение);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура НайтиСоздатьЗначениеСвойстваСправочник(ДанныеСвойства, ИдЗначенияИлиЗначениеСвойства, ЗначениеСвойстваСсылка)
	
	ЗначениеСвойства = ИдЗначенияИлиЗначениеСвойства;
	ИдЗначения = "";
	
	СтрокаВарианта = ДанныеСвойства.ВариантыЗначений.Найти(ИдЗначенияИлиЗначениеСвойства, "Ид");
	
	Если НЕ СтрокаВарианта = НеОпределено Тогда
		ЗначениеСвойства = СтрокаВарианта.Значение;
		ИдЗначения = СтрокаВарианта.Ид;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Если ПустаяСтрока(ИдЗначения) Тогда
		
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	ЗначенияСвойствОбъектов.Ссылка
			|ИЗ
			|	Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
			|ГДЕ
			|	ЗначенияСвойствОбъектов.Владелец = &Владелец
			|	И ЗначенияСвойствОбъектов.Наименование = &Наименование";
	
		Запрос.УстановитьПараметр("Наименование", ЗначениеСвойства);
		Запрос.УстановитьПараметр("Владелец", ДанныеСвойства.Ссылка);
		
	Иначе
		
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	ЗначенияСвойствОбъектов.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
			|ГДЕ
			|	ЗначенияСвойствОбъектов.Б_Идентификатор = &Идентификатор
			|	И ЗначенияСвойствОбъектов.Владелец = &Владелец";
	
		Запрос.УстановитьПараметр("Идентификатор", ИдЗначения);
		Запрос.УстановитьПараметр("Владелец", ДанныеСвойства.Ссылка);
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ЗначениеСвойстваСсылка = Выборка.Ссылка;
		Возврат;
	
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Спр = Справочники.ЗначенияСвойствОбъектов.СоздатьЭлемент();
	Спр.Владелец = ДанныеСвойства.Ссылка;
	Спр.Наименование = ЗначениеСвойства;
	Если НЕ ПустаяСтрока(ИдЗначения) Тогда
		Спр.Б_Идентификатор = ИдЗначения;
	КонецЕсли;
	Спр.Записать();
	
	ЗначениеСвойстваСсылка = Спр.Ссылка;
	
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура ЗаписатьЗначениеСвойства(Номенклатура, ДанныеСвойства, пЗначениеСвойства)
	
	ЗначениеСвойства = пЗначениеСвойства;
	
	Если ДанныеСвойства.Справочник Тогда
		
		НайтиСоздатьЗначениеСвойстваСправочник(ДанныеСвойства, пЗначениеСвойства, ЗначениеСвойства);
		
	КонецЕсли;
	
	Рег = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
	Рег.Значение = ЗначениеСвойства;
	Рег.Объект = Номенклатура;
	Рег.Свойство = ДанныеСвойства.Ссылка;
	Рег.Записать();
	
КонецПроцедуры

Процедура НайтиСоздатьСвойство(ДанныеСвойства, Новое)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	СвойстваОбъектов.Ссылка
		|ИЗ
		|	ПланВидовХарактеристик.СвойстваОбъектов КАК СвойстваОбъектов
		|ГДЕ
		|	СвойстваОбъектов.Б_Идентификатор = &Идентификатор";
		
	Запрос.УстановитьПараметр("Идентификатор", ДанныеСвойства.Ид);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		ДанныеСвойства.Ссылка = Выборка.Ссылка;
		Возврат;
		
	КонецЕсли;
	
	//
	
	Если ДанныеСвойства.Справочник Тогда
		
		Тип = Тип("СправочникСсылка.ЗначенияСвойствОбъектов");
		
		ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ЗначенияСвойствОбъектов");
		
	Иначе
		
		Тип = Тип("Строка");
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип);
		ПараметрыСтроки = Новый КвалификаторыСтроки(50);

		ТипЗначения = Новый ОписаниеТипов(МассивТипов, , ПараметрыСтроки);
		
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.СоздатьЭлемент();
	Свойство.НазначениеСвойства = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура;
	Свойство.Наименование = ДанныеСвойства.Наименование;
	Свойство.ТипЗначения = ТипЗначения;
	Свойство.Б_Идентификатор = ДанныеСвойства.Ид;
	
	Свойство.Записать();
	
	ДанныеСвойства.Ссылка = Свойство.Ссылка;
	
	ЗафиксироватьТранзакцию();
	
	Новое = Истина;
	
КонецПроцедуры

Функция ИмпортВыполнен(ИнформерИмпорт, ИнформерРазбор, Статистика) Экспорт
	
	ОписаниеОшибки = "";
	МассивЧастейXML = Новый Массив;
	мКодировка = НеОпределено;
	
	ОтобразитьСтатусВыполняется(ИнформерИмпорт);
	
	ЗагрузитьДанныеXMLССайта(ИнформерИмпорт, МассивЧастейXML, ОписаниеОшибки);
	
	ОтобразитьСтатусЗавершено(ИнформерИмпорт);
	
	Если НЕ ПустаяСтрока(ОписаниеОшибки) Тогда
		Сообщить(ОписаниеОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	Если МассивЧастейXML.Количество() = 0 Тогда
		Сообщить("Данные XML не получены.");
		Возврат Ложь;
	КонецЕсли;
	
	Статистика.Добавить(ШтампВремени() + "Загружено блоков XML: " + МассивЧастейXML.Количество());

	мСтруктураДанных = Новый Структура;
	
	ОтобразитьСтатусВыполняется(ИнформерРазбор);
	
	Статистика.Добавить("");
	Статистика.Добавить("Анализ данных XML:");
	
	РазобратьXML(ИнформерРазбор, МассивЧастейXML, ОписаниеОшибки);
	
	ОтобразитьСтатусЗавершено(ИнформерРазбор);
	
	Если НЕ ПустаяСтрока(ОписаниеОшибки) Тогда
		Сообщить(ОписаниеОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура РазобратьXML(Информер, МассивЧастейXML, ОписаниеОшибки)
	
	//
	
	ДеревоГрупп = Новый ДеревоЗначений;
	ДеревоГрупп.Колонки.Добавить("Ид", Новый ОписаниеТипов("Строка"));
	ДеревоГрупп.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	ДеревоГрупп.Колонки.Добавить("Ссылка");

	ТаблицаСвойств = Новый ТаблицаЗначений;
	ТаблицаСвойств.Колонки.Добавить("Ид", Новый ОписаниеТипов("Строка"));
	ТаблицаСвойств.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	ТаблицаСвойств.Колонки.Добавить("Множественное", Новый ОписаниеТипов("Булево"));
	ТаблицаСвойств.Колонки.Добавить("Справочник", Новый ОписаниеТипов("Булево"));
	ТаблицаСвойств.Колонки.Добавить("Ссылка");
	ТаблицаСвойств.Колонки.Добавить("ВариантыЗначений", Новый ОписаниеТипов("ТаблицаЗначений"));
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Ид", Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("Группы", Новый ОписаниеТипов("Массив"));
	ТаблицаТоваров.Колонки.Добавить("Описание", Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("Артикул", Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиница", Новый ОписаниеТипов("Структура"));
	ТаблицаТоваров.Колонки.Добавить("Картинки", Новый ОписаниеТипов("Массив"));
	ТаблицаТоваров.Колонки.Добавить("ЗначенияСвойств", Новый ОписаниеТипов("ТаблицаЗначений"));
	ТаблицаТоваров.Колонки.Добавить("Ссылка");

	ТаблицаТиповЦен = Новый ТаблицаЗначений;
	ТаблицаТиповЦен.Колонки.Добавить("Ид", Новый ОписаниеТипов("Строка"));
	ТаблицаТиповЦен.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	ТаблицаТиповЦен.Колонки.Добавить("Ссылка");

	ТаблицаПредложений = Новый ТаблицаЗначений;
	ТаблицаПредложений.Колонки.Добавить("Ид", Новый ОписаниеТипов("Строка"));
	ТаблицаПредложений.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	ТаблицаПредложений.Колонки.Добавить("Цены", Новый ОписаниеТипов("ТаблицаЗначений"));
	ТаблицаПредложений.Колонки.Добавить("Ссылка");
	ТаблицаПредложений.Колонки.Добавить("Характеристики", Новый ОписаниеТипов("ТаблицаЗначений"));
	
	//
	
	мСтруктураДанных.Вставить("ДеревоГрупп", ДеревоГрупп);
	мСтруктураДанных.Вставить("ТаблицаСвойств", ТаблицаСвойств);
	мСтруктураДанных.Вставить("ТаблицаТоваров", ТаблицаТоваров);
	мСтруктураДанных.Вставить("ТаблицаТиповЦен", ТаблицаТиповЦен);
	мСтруктураДанных.Вставить("ТаблицаПредложений", ТаблицаПредложений);
	
	//
	
	Всего = МассивЧастейXML.Количество();
	Сч = 0;
	ОтобразитьСостояние(Информер, "Обработка данных XML...");
	
	Для Каждого СтрокаXML Из МассивЧастейXML Цикл
		
		#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
		#КонецЕсли

		Сч = Сч + 1;
		
		ОтобразитьИндикатор(Информер, 100 * Сч / Всего);
		
		РазобратьДанныеXML(СтрокаXML, ОписаниеОшибки);
	
		Если НЕ ПустаяСтрока(ОписаниеОшибки) Тогда
			Возврат;
		КонецЕсли;
	
	КонецЦикла;
	
	
КонецПроцедуры

Процедура РазобратьДанныеXML(СтрокаXML, ОписаниеОшибки)
	
	ОбъектXML = Новый ЧтениеXML;
	
	Попытка
		ОбъектXML.УстановитьСтроку(СтрокаXML);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		Возврат;
	КонецПопытки;
	
	ПоследовательностьЭлементов = "";

	ТекущаяСтрокаДереваГрупп = мСтруктураДанных.ДеревоГрупп;
	мСтруктураДанных.Вставить("ТекущаяСтрокаДереваГрупп", ТекущаяСтрокаДереваГрупп);
	
	Пока Истина Цикл
		
		#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
		#КонецЕсли

		ОчереднойУзелXMLПрочитан = Ложь;
		
		Попытка
			ОчереднойУзелXMLПрочитан = ОбъектXML.Прочитать();
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
			Возврат;
		КонецПопытки;
		
		Если НЕ ОчереднойУзелXMLПрочитан Тогда
			Прервать;
		КонецЕсли;
		
		ТипУзла = ОбъектXML.ТипУзла;
		ИмяУзла = ОбъектXML.Имя;
		
		Если ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			ПоследовательностьЭлементов = ДобавитьЭлементКПоследовательности(ПоследовательностьЭлементов, ИмяУзла);
			
			ОбработатьНачалоЭлемента(ОбъектXML, ПоследовательностьЭлементов);
			
			Если НЕ ПустаяСтрока(ОписаниеОшибки) Тогда
				Возврат;
			КонецЕсли;
			
		ИначеЕсли ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			
			ОбработатьКонецЭлемента(ПоследовательностьЭлементов);
			
			ПоследовательностьЭлементов = УдалитьПоследнийЭлементИзПоследовательности(ПоследовательностьЭлементов);
			
		ИначеЕсли ТипУзла = ТипУзлаXML.Текст Тогда
			
			ЗначениеЭлемента = СокрЛП(ОбъектXML.Значение);
			
			ОбработатьЗначениеЭлемента(ОбъектXML, ПоследовательностьЭлементов, ЗначениеЭлемента, ОписаниеОшибки);
			
			Если НЕ ПустаяСтрока(ОписаниеОшибки) Тогда
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбъектXML.Закрыть();
	
КонецПроцедуры

Функция ДобавитьЭлементКПоследовательности(Знач ПоследовательностьЭлементов, Знач ИмяУзла)
	
	ИсключатьИзПоследовательности = Новый Массив;
	ИсключатьИзПоследовательности.Добавить("КоммерческаяИнформация");
	
	Если ИсключатьИзПоследовательности.Найти(ИмяУзла) = Неопределено Тогда
		
		Если НЕ ПоследовательностьЭлементов = "" Тогда
			ПоследовательностьЭлементов = ПоследовательностьЭлементов + ".";
		КонецЕсли;
		ПоследовательностьЭлементов = ПоследовательностьЭлементов + ИмяУзла;
		
	КонецЕсли;
	
	Возврат ПоследовательностьЭлементов;
	
КонецФункции

Функция УдалитьПоследнийЭлементИзПоследовательности(Знач ПоследовательностьЭлементов)
	
	ПромСтрока = СтрЗаменить(ПоследовательностьЭлементов, ".", Символы.ПС);
	КоличествоЭлементов = СтрЧислоСтрок(ПромСтрока);
	
	ПоследовательностьЭлементов = "";
	
	Если КоличествоЭлементов > 0 Тогда
		КоличествоЭлементов = КоличествоЭлементов - 1;
		Для Счетчик = 1 По КоличествоЭлементов Цикл
			ПоследовательностьЭлементов	= ПоследовательностьЭлементов + "." + СтрПолучитьСтроку(ПромСтрока, Счетчик);
		КонецЦикла;
		ПоследовательностьЭлементов = Прав(ПоследовательностьЭлементов, СтрДлина(ПоследовательностьЭлементов) - 1);
	КонецЕсли;
	
	Возврат ПоследовательностьЭлементов;
	
КонецФункции

Функция ПолучитьИмяЭлементаИзПоследовательности(Знач ПоследовательностьЭлементов)
	
	ПромСтрока 	= СтрЗаменить(ПоследовательностьЭлементов, ".", Символы.ПС);
	КоличествоЭлементов = СтрЧислоСтрок(ПромСтрока);
	
	ИмяПоследнегоЭлемента = "";
	Если КоличествоЭлементов > 0 Тогда
		ИмяПоследнегоЭлемента = СтрПолучитьСтроку(ПромСтрока, КоличествоЭлементов);
	КонецЕсли;
	
	Возврат ИмяПоследнегоЭлемента;
	
КонецФункции

Процедура ОбработатьКонецЭлемента(Знач ИмяЭлемента)
	
	Если Прав(ИмяЭлемента, 14) = ".Группа.Группы" Тогда
		
		мСтруктураДанных.ТекущаяСтрокаДереваГрупп = мСтруктураДанных.ТекущаяСтрокаДереваГрупп.Родитель;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьНачалоЭлемента(ОбъектXML, Знач ИмяЭлемента)
	
	Если Прав(ИмяЭлемента, 14) = ".Группа.Группы"
		ИЛИ ИмяЭлемента = "Классификатор.Группы" Тогда
		
		// Начинаются группы, надо добавить уровень
		мСтруктураДанных.ТекущаяСтрокаДереваГрупп = мСтруктураДанных.ТекущаяСтрокаДереваГрупп.Строки.Добавить();
	
	ИначеЕсли Прав(ИмяЭлемента, 14) = ".Группы.Группа" Тогда
			
		Родитель = мСтруктураДанных.ТекущаяСтрокаДереваГрупп.Родитель;
		Если Родитель = НеОпределено Тогда
			Родитель = мСтруктураДанных.ТекущаяСтрокаДереваГрупп.Владелец();
		КонецЕсли;
		мСтруктураДанных.ТекущаяСтрокаДереваГрупп = Родитель.Строки.Добавить();
		
	ИначеЕсли ИмяЭлемента = "Классификатор.Свойства.Свойство" Тогда
		
		мСтруктураДанных.ТаблицаСвойств.Добавить();
		
	ИначеЕсли ИмяЭлемента = "Классификатор.Свойства.Свойство.ВариантыЗначений" Тогда
		
		ТекСтрока = мСтруктураДанных.ТаблицаСвойств[мСтруктураДанных.ТаблицаСвойств.Количество() - 1];
		ТекСтрока.Справочник = Истина;
		ТекСтрока.ВариантыЗначений.Колонки.Добавить("Ид", Новый ОписаниеТипов("Строка"));
		ТекСтрока.ВариантыЗначений.Колонки.Добавить("Значение", Новый ОписаниеТипов("Строка"));
		ТекСтрока.ВариантыЗначений.Добавить();
		
	ИначеЕсли ИмяЭлемента = "Каталог.Товары.Товар" Тогда
		
		мСтруктураДанных.ТаблицаТоваров.Добавить();
		
	ИначеЕсли ИмяЭлемента = "Каталог.Товары.Товар.ЗначенияСвойств.ЗначенияСвойства" Тогда
		
		ТекСтрока = мСтруктураДанных.ТаблицаТоваров[мСтруктураДанных.ТаблицаТоваров.Количество() - 1];
		
		Если ТекСтрока.ЗначенияСвойств.Колонки.Количество() = 0 Тогда
			ТекСтрока.ЗначенияСвойств.Колонки.Добавить("Ид", Новый ОписаниеТипов("Строка"));
			ТекСтрока.ЗначенияСвойств.Колонки.Добавить("Значение", Новый ОписаниеТипов("Строка"));
		КонецЕсли;
		
		ТекСтрока.ЗначенияСвойств.Добавить();
		
	ИначеЕсли ИмяЭлемента = "ПакетПредложений.ТипыЦен.ТипЦены" Тогда
		
		мСтруктураДанных.ТаблицаТиповЦен.Добавить();

	ИначеЕсли ИмяЭлемента = "ПакетПредложений.Предложения.Предложение" Тогда
		
		мСтруктураДанных.ТаблицаПредложений.Добавить();
		
	ИначеЕсли ИмяЭлемента = "ПакетПредложений.Предложения.Предложение.ХарактеристикиТовара" Тогда
		
		ТекПредложение = мСтруктураДанных.ТаблицаПредложений[мСтруктураДанных.ТаблицаПредложений.Количество() - 1];
		
		ТекПредложение.Характеристики.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
		ТекПредложение.Характеристики.Колонки.Добавить("Значение", Новый ОписаниеТипов("Строка"));

	ИначеЕсли ИмяЭлемента = "ПакетПредложений.Предложения.Предложение.ХарактеристикиТовара.ХарактеристикаТовара" Тогда
		
		ТекПредложение = мСтруктураДанных.ТаблицаПредложений[мСтруктураДанных.ТаблицаПредложений.Количество() - 1];
		
		ТекПредложение.Характеристики.Добавить();

	ИначеЕсли ИмяЭлемента = "ПакетПредложений.Предложения.Предложение.Цены.Цена" Тогда
		
		ТекСтрока = мСтруктураДанных.ТаблицаПредложений[мСтруктураДанных.ТаблицаПредложений.Количество() - 1];
		
		Если ТекСтрока.Цены.Колонки.Количество() = 0 Тогда
			ТекСтрока.Цены.Колонки.Добавить("ИдТипаЦены", Новый ОписаниеТипов("Строка"));
			ТекСтрока.Цены.Колонки.Добавить("ЦенаЗаЕдиницу", Новый ОписаниеТипов("Строка"));
			ТекСтрока.Цены.Колонки.Добавить("Валюта", Новый ОписаниеТипов("Строка"));
			ТекСтрока.Цены.Колонки.Добавить("Единица", Новый ОписаниеТипов("Строка"));
		КонецЕсли;
		
		ТекСтрока.Цены.Добавить();

	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьЗначениеЭлемента(ОбъектXML, ИмяЭлемента, ЗначениеЭлемента, ОписаниеОшибки);
	
	ДлинаИд = 255;
	ОшибкаДлинаИд = "Ошибка данных XML: превышена максимальная длина идентификатора - более " + ДлинаИд + ": ";
	
	ИмяТекущегоЭлемента = ПолучитьИмяЭлементаИзПоследовательности(ИмяЭлемента);
	
	Если Прав(ИмяЭлемента, 17) = ".Группы.Группа.Ид" Тогда
		
		Если СтрДлина(ЗначениеЭлемента) > ДлинаИд Тогда
			ДобавитьОписаниеОшибки(ОписаниеОшибки, "Группы: " + ОшибкаДлинаИд + ЗначениеЭлемента);
			Возврат;
		КонецЕсли;
		
		мСтруктураДанных.ТекущаяСтрокаДереваГрупп[ИмяТекущегоЭлемента] = ЗначениеЭлемента;
		
	ИначеЕсли Прав(ИмяЭлемента, 27) = ".Группы.Группа.Наименование" Тогда
		
		мСтруктураДанных.ТекущаяСтрокаДереваГрупп[ИмяТекущегоЭлемента] = ЗначениеЭлемента;

	ИначеЕсли ИмяЭлемента = "Классификатор.Свойства.Свойство.Ид" Тогда
		
		Если СтрДлина(ЗначениеЭлемента) > ДлинаИд Тогда
			ДобавитьОписаниеОшибки(ОписаниеОшибки, "Свойства: " + ОшибкаДлинаИд + ЗначениеЭлемента);
			Возврат;
		КонецЕсли;
		
		ТекСтрока = мСтруктураДанных.ТаблицаСвойств[мСтруктураДанных.ТаблицаСвойств.Количество() - 1];
		ТекСтрока[ИмяТекущегоЭлемента] = ЗначениеЭлемента;

	ИначеЕсли ИмяЭлемента = "Классификатор.Свойства.Свойство.Наименование" Тогда
		
		ТекСтрока = мСтруктураДанных.ТаблицаСвойств[мСтруктураДанных.ТаблицаСвойств.Количество() - 1];
		ТекСтрока[ИмяТекущегоЭлемента] = ЗначениеЭлемента;

	ИначеЕсли ИмяЭлемента = "Классификатор.Свойства.Свойство.ВариантыЗначений.Значение"
		ИЛИ ИмяЭлемента = "Классификатор.Свойства.Свойство.ВариантыЗначений.Справочник.Значение" Тогда
		
		ТекСтрока = мСтруктураДанных.ТаблицаСвойств[мСтруктураДанных.ТаблицаСвойств.Количество() - 1];
		ТекВариант = ТекСтрока.ВариантыЗначений[ТекСтрока.ВариантыЗначений.Количество() - 1];
		ТекВариант.Значение = ЗначениеЭлемента;
		
	ИначеЕсли ИмяЭлемента = "Классификатор.Свойства.Свойство.ВариантыЗначений.Справочник.ИдЗначения" Тогда
		
		ТекСтрока = мСтруктураДанных.ТаблицаСвойств[мСтруктураДанных.ТаблицаСвойств.Количество() - 1];
		ТекВариант = ТекСтрока.ВариантыЗначений[ТекСтрока.ВариантыЗначений.Количество() - 1];
		ТекВариант.Ид = ЗначениеЭлемента;

	ИначеЕсли ИмяЭлемента = "Классификатор.Свойства.Свойство.Множественное" Тогда
		
		Если ЗначениеЭлемента = "true" Тогда
			ТекСтрока = мСтруктураДанных.ТаблицаСвойств[мСтруктураДанных.ТаблицаСвойств.Количество() - 1];
			ТекСтрока.Множественное = Истина;
		КонецЕсли;
		
	ИначеЕсли ИмяЭлемента = "Каталог.Товары.Товар.Ид" Тогда
		
		Если СтрДлина(ЗначениеЭлемента) > ДлинаИд Тогда
			ДобавитьОписаниеОшибки(ОписаниеОшибки, "Товары: " + ОшибкаДлинаИд + ЗначениеЭлемента);
			Возврат;
		КонецЕсли;
		
		ТекСтрока = мСтруктураДанных.ТаблицаТоваров[мСтруктураДанных.ТаблицаТоваров.Количество() - 1];
		ТекСтрока[ИмяТекущегоЭлемента] = ЗначениеЭлемента;
		
	ИначеЕсли ИмяЭлемента = "Каталог.Товары.Товар.Наименование"
		ИЛИ ИмяЭлемента = "Каталог.Товары.Товар.Описание" 
		ИЛИ ИмяЭлемента = "Каталог.Товары.Товар.Артикул" Тогда
		
		ТекСтрока = мСтруктураДанных.ТаблицаТоваров[мСтруктураДанных.ТаблицаТоваров.Количество() - 1];
		ТекСтрока[ИмяТекущегоЭлемента] = ЗначениеЭлемента;
		
	ИначеЕсли ИмяЭлемента = "Каталог.Товары.Товар.БазоваяЕдиница" Тогда
		
		ТекСтрока = мСтруктураДанных.ТаблицаТоваров[мСтруктураДанных.ТаблицаТоваров.Количество() - 1];
		ТекСтрока.БазоваяЕдиница.Вставить("Значение", ЗначениеЭлемента);

	ИначеЕсли ИмяЭлемента = "Каталог.Товары.Товар.Группы.Ид" Тогда
		
		Если НЕ ПустаяСтрока(ЗначениеЭлемента) Тогда
			
			ТекСтрока = мСтруктураДанных.ТаблицаТоваров[мСтруктураДанных.ТаблицаТоваров.Количество() - 1];
			ТекСтрока.Группы.Добавить(ЗначениеЭлемента);
			
		КонецЕсли;
		
	ИначеЕсли ИмяЭлемента = "Каталог.Товары.Товар.Картинка" Тогда
		
		Если НЕ ПустаяСтрока(ЗначениеЭлемента) Тогда
			
			ТекСтрока = мСтруктураДанных.ТаблицаТоваров[мСтруктураДанных.ТаблицаТоваров.Количество() - 1];
			ТекСтрока.Картинки.Добавить(ЗначениеЭлемента);
			
		КонецЕсли;

	ИначеЕсли ИмяЭлемента = "Каталог.Товары.Товар.ЗначенияСвойств.ЗначенияСвойства.Ид"
		ИЛИ ИмяЭлемента = "Каталог.Товары.Товар.ЗначенияСвойств.ЗначенияСвойства.Значение" Тогда
		
		ТекСтрокаТовара = мСтруктураДанных.ТаблицаТоваров[мСтруктураДанных.ТаблицаТоваров.Количество() - 1];
		ТекСтрокаСвойства = ТекСтрокаТовара.ЗначенияСвойств[ТекСтрокаТовара.ЗначенияСвойств.Количество() - 1];
		
		ТекСтрокаСвойства[ИмяТекущегоЭлемента] = ЗначениеЭлемента;

	ИначеЕсли ИмяЭлемента = "ПакетПредложений.ТипыЦен.ТипЦены.Ид"
		ИЛИ ИмяЭлемента = "ПакетПредложений.ТипыЦен.ТипЦены.Наименование" Тогда
		
		ТекСтрока = мСтруктураДанных.ТаблицаТиповЦен[мСтруктураДанных.ТаблицаТиповЦен.Количество() - 1];
		ТекСтрока[ИмяТекущегоЭлемента] = ЗначениеЭлемента;

	ИначеЕсли ИмяЭлемента = "ПакетПредложений.Предложения.Предложение.Ид" Тогда
		
		Поз = Найти(ЗначениеЭлемента, "#");
		
		ПраваяЧасть = Сред(ЗначениеЭлемента, Поз + 1);
		
		Если СтрДлина(ПраваяЧасть) > ДлинаИд Тогда
			
			ДобавитьОписаниеОшибки(ОписаниеОшибки, "Предложения: " + ОшибкаДлинаИд + ЗначениеЭлемента);
			Возврат;
			
		КонецЕсли;
		
		ТекСтрока = мСтруктураДанных.ТаблицаПредложений[мСтруктураДанных.ТаблицаПредложений.Количество() - 1];
		ТекСтрока[ИмяТекущегоЭлемента] = ЗначениеЭлемента;

	ИначеЕсли ИмяЭлемента = "ПакетПредложений.Предложения.Предложение.Наименование" Тогда
		
		ТекСтрока = мСтруктураДанных.ТаблицаПредложений[мСтруктураДанных.ТаблицаПредложений.Количество() - 1];
		ТекСтрока[ИмяТекущегоЭлемента] = ЗначениеЭлемента;
		
	ИначеЕсли ИмяЭлемента = "ПакетПредложений.Предложения.Предложение.Цены.Цена.ИдТипаЦены"
		ИЛИ ИмяЭлемента = "ПакетПредложений.Предложения.Предложение.Цены.Цена.ЦенаЗаЕдиницу" 
		ИЛИ ИмяЭлемента = "ПакетПредложений.Предложения.Предложение.Цены.Цена.Валюта" 
		ИЛИ ИмяЭлемента = "ПакетПредложений.Предложения.Предложение.Цены.Цена.Единица" Тогда
		
		ТекСтрока = мСтруктураДанных.ТаблицаПредложений[мСтруктураДанных.ТаблицаПредложений.Количество() - 1];
		ТекСтрокаЦены = ТекСтрока.Цены[ТекСтрока.Цены.Количество() - 1];
		ТекСтрокаЦены[ИмяТекущегоЭлемента] = ЗначениеЭлемента;

	ИначеЕсли ИмяЭлемента = "ПакетПредложений.Предложения.Предложение.ХарактеристикиТовара.ХарактеристикаТовара.Наименование"
		ИЛИ ИмяЭлемента = "ПакетПредложений.Предложения.Предложение.ХарактеристикиТовара.ХарактеристикаТовара.Значение" Тогда
		
		ТекПредложение = мСтруктураДанных.ТаблицаПредложений[мСтруктураДанных.ТаблицаПредложений.Количество() - 1];
		ТекСтрокаХарактеристики = ТекПредложение.Характеристики[ТекПредложение.Характеристики.Количество() - 1];
		ТекСтрокаХарактеристики[ИмяТекущегоЭлемента] = ЗначениеЭлемента;

	КонецЕсли;

КонецПроцедуры

Функция ПолучениеОбъектаПоКоду(Код, ТипОбъекта, ИмяОбъекта = "") Экспорт
	
	Попытка
		Результат = XMLЗначение(Тип(ТипОбъекта), Код);
	Исключение
		Результат = Неопределено;
	КонецПопытки;
	
	Если Результат <> Неопределено тогда
		Результат = ?(СокрЛП(Результат.ВерсияДанных) = "", Неопределено, Результат);
	КонецЕсли;
	
	Если Результат = Неопределено и ИмяОбъекта <> "" тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Справочник.Ссылка
		|ИЗ
		|	" + ИмяОбъекта + " КАК Справочник
		|ГДЕ
		|	Справочник.Б_Идентификатор = &Идентификатор";
		запрос.УстановитьПараметр("Идентификатор",Код);
		тзнВрем = запрос.Выполнить().Выгрузить();
		Если тзнВрем.Количество() > 0 тогда
			Результат = тзнВрем[0].Ссылка; 	   
		КонецЕсли;
	КонецЕсли;
	
	Если Результат <> Неопределено тогда
		Результат = ?(СокрЛП(Результат.ВерсияДанных) = "", Неопределено, Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


Функция ПолучитьСоединениеССервером() Экспорт
	
	ПараметрыПодключения = Новый Структура;
	
	ПараметрыПодключения.Вставить("Пользователь", ПользовательИмя);
	ПараметрыПодключения.Вставить("Пароль", ПользовательПароль);
	
	Если НЕ АдресСайтаРазобран(ПараметрыПодключения, АдресСайта) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НастройкаПроксиСервера = ПолучениеФайловИзИнтернета.ПолучитьНастройкиПроксиНаСервере1СПредприятие();
	
	Если НастройкаПроксиСервера <> Неопределено
		И НастройкаПроксиСервера["ИспользоватьПрокси"] = Ложь Тогда
		НастройкаПроксиСервера = Неопределено;
	КонецЕсли;
	
	Протокол = ?(ПараметрыПодключения.ЗащищенноеСоединение, "https", "http");
	Прокси = ?(НастройкаПроксиСервера = Неопределено, Неопределено, Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ПолучитьПрокси(НастройкаПроксиСервера, Протокол));
	
	ПараметрыПодключения.Вставить("Прокси", Прокси);
	
	Соединение = НеОпределено;
	
	Попытка
		
		СисИнфо = Новый СистемнаяИнформация;
		
		Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СисИнфо.ВерсияПриложения, "8.3.3.721") < 0  тогда	
			Выполнить("Соединение = Новый HTTPСоединение(ПараметрыПодключения.Сервер, ПараметрыПодключения.Порт, ПараметрыПодключения.Пользователь, ПараметрыПодключения.Пароль, ПараметрыПодключения.Прокси, ПараметрыПодключения.ЗащищенноеСоединение)");
		Иначе
			
			Выполнить("Если НЕ ПараметрыПодключения.ЗащищенноеСоединение тогда
			|	ssl = Неопределено;
			|Иначе
			|	
			|	ssl = Новый ЗащищенноеСоединениеOpenSSL(
			|	Неопределено,
			|	Неопределено); 
			|КонецЕсли;
			|Соединение = Новый HTTPСоединение(ПараметрыПодключения.Сервер, ПараметрыПодключения.Порт, ПараметрыПодключения.Пользователь, ПараметрыПодключения.Пароль, ПараметрыПодключения.Прокси, ,ssl)");	
		КонецЕсли;	
		
	Исключение
		
		Сообщить(" Не удалось установить соединение с сервером. Проверьте правильность адреса сервера, порт, имя пользователя и пароль.");	
		
		Соединение = Неопределено;
		
	Конецпопытки;
	
	Возврат Соединение;
	
КонецФункции

Функция АдресСайтаРазобран(НастройкиПодключения, пАдресСайта)
	
	ВремАдрес = АдресСайта; 
	
	Сервер = ""; 
	
	Порт = 0;
	
	АдресСкрипта = "";
	
	ЗащищенноеСоединение = Ложь;
	
	Если НЕ ПустаяСтрока(ВремАдрес) Тогда
		
		ВремАдрес = СтрЗаменить(ВремАдрес, "\", "/");
		ВремАдрес = СтрЗаменить(ВремАдрес, " ", "");
		
		Если НРег(Лев(ВремАдрес, 7)) = "http://" Тогда
			ВремАдрес = Сред(ВремАдрес, 8);
		ИначеЕсли НРег(Лев(ВремАдрес, 8)) = "https://" Тогда
			ВремАдрес = Сред(ВремАдрес, 9);
			ЗащищенноеСоединение = Истина;
		КонецЕсли;
		
		ПозицияСлэша = Найти(ВремАдрес, "/");
		
		Если ПозицияСлэша > 0 Тогда
			Сервер = Лев(ВремАдрес, ПозицияСлэша - 1);
			АдресСкрипта = Прав(ВремАдрес, СтрДлина(ВремАдрес) - ПозицияСлэша);
		Иначе	
			Сервер = ВремАдрес;
			АдресСкрипта = "";
		КонецЕсли;
		
		ПозицияДвоеточия = Найти(Сервер, ":");
		ПортСтрока = "0";
		Если ПозицияДвоеточия > 0 Тогда
			СерверСПортом = Сервер;
			Сервер = Лев(СерверСПортом, ПозицияДвоеточия - 1);
			ПортСтрока = Прав(СерверСПортом, СтрДлина(СерверСПортом) - ПозицияДвоеточия);
		КонецЕсли;
		
		Попытка
			
			Порт = Число(ПортСтрока);
			
		Исключение
			
			Сообщить("Не удалось получить номер порта: " + ПортСтрока + Символы.ПС + "Проверьте правильность ввода адреса сайта.");	
			
			Возврат Ложь;
			
		КонецПопытки;
		
		Если Порт = 0 Тогда
			Порт = ?(ЗащищенноеСоединение, 443, 80);
		КонецЕсли;
		
	КонецЕсли;
	
	НастройкиПодключения.Вставить("Сервер", Сервер); 
	НастройкиПодключения.Вставить("Порт", Порт);
	НастройкиПодключения.Вставить("АдресСкрипта", АдресСкрипта);
	НастройкиПодключения.Вставить("ЗащищенноеСоединение", ЗащищенноеСоединение);
	
	Возврат Истина;
	
КонецФункции


// РИ ++ (c) Росинтеграл                       
// Шаблон работы с настройками во внешних обработках
// Инициализация переменных модуля

мПрефиксНастроек = "РИ_О_";
мКодИмениОбъектаНастроек = "БитрИмп_";

// РИ -- (c) Росинтеграл
// Шаблон работы с настройками во внешних обработках
// Инициализация переменных модуля

мНачалоXML = "<?xml";

